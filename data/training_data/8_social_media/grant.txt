<t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE ON users TO analyst1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>grant select, insert, update on users to analyst1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>GRANT INSERT, UPDATE, DELETE ON users TO editor1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>grant insert, update, delete on users to editor1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>GRANT SELECT, UPDATE, DELETE ON users TO admin1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(50), date_joined TIMESTAMP)</t><stat>grant select, update, delete on users to admin1</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON posts TO user_role;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON posts TO user_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>GRANT SELECT ON users, posts TO public_role;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)

CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))</t><stat>grant select on users, posts to public_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>GRANT SELECT ON users, posts TO public_role;</stat><divider><t>CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT NOT NULL, post_content TEXT NOT NULL, created_at TIMESTAMP NOT NULL, FOREIGN KEY (user_id) REFERENCES users(user_id))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL)</t><stat>grant select on users, posts to public_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT SELECT ON users TO analysts;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant select on users to analysts;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>GRANT SELECT, UPDATE, DELETE ON comments TO moderators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    post_content TEXT NOT NULL,
    created_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>grant select, update, delete on comments to moderators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT SELECT ON users TO public;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant select on users to public;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT INSERT, UPDATE ON posts TO editors;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant insert, update on posts to editors;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>GRANT DELETE ON comments TO administrators;</stat><divider><t>CREATE TABLE likes (
    like_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    like_date DATE
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY,
    post_id INT REFERENCES posts(post_id),
    user_id INT REFERENCES users(user_id),
    comment_text TEXT,
    comment_date DATE
);

CREATE TABLE posts (
    post_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    post_content TEXT,
    post_date DATE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    date_joined DATE
);</t><stat>grant delete on comments to administrators;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on users to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Posts TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on posts to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on comments to user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Comments TO user_role;</stat><divider><t>CREATE TABLE Followers (follower_id INT PRIMARY KEY, user_id INT, follower_user_id INT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE, FOREIGN KEY (follower_user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_content TEXT, created_at TIMESTAMP, FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, created_at TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, bio TEXT, created_at TIMESTAMP)</t><stat>grant select, insert, update, delete on comments to user_role;</stat>