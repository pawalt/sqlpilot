[
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, total_amount FROM restaurant_orders WHERE order_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id FROM restaurant_orders WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_spent FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT COUNT(order_id) AS total_orders FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_amount FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_amount FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS avg_total_amount FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_amount FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE total_amount = (SELECT MAX(total_amount) FROM restaurant_orders);",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MIN(order_date) AS first_order_date FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE customer_id IN ('123e4567-e89b-12d3-a456-426614174000', '234e5678-e89b-12d3-a456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS avg_amount, MAX(total_amount) AS max_amount, MIN(total_amount) AS min_amount FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id FROM restaurant_orders WHERE total_amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM restaurant_orders WHERE order_date = CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, order_date FROM restaurant_orders WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) FROM restaurant_orders GROUP BY customer_id HAVING SUM(total_amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, EXTRACT(MONTH FROM order_date) AS month, SUM(total_amount) FROM restaurant_orders GROUP BY customer_id, month ORDER BY month;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_amount FROM restaurant_orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE customer_id IN ('123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' AND total_amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT order_date) AS unique_dates FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_amount FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_amount FROM restaurant_orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM restaurant_orders;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE total_amount BETWEEN 50 AND 100 ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' AND total_amount BETWEEN 50 AND 100 ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' OR total_amount > 100 ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE restaurant_orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date DATE,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM restaurant_orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' AND order_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone_number FROM customers WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) AS order_count FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_spent FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING MAX(total_amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING MIN(total_amount) < 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers ORDER BY customer_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_phone_number LIKE '555%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS avg_order_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone_number FROM customers WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS num_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_order_amount FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS num_orders FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_name HAVING num_orders > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, EXTRACT(YEAR FROM order_date) AS order_year FROM orders JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_date) AS latest_order_date FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(order_date) AS first_order_date FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM orders JOIN customers ON orders.customer_id = customers.customer_id WHERE EXTRACT(MONTH FROM order_date) = 1 GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > (SELECT AVG(total_amount) FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_phone_number VARCHAR(15),\n    customer_email VARCHAR(50)\n);\n\n\nCREATE TABLE orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT name, phone_number FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, name, phone_number FROM customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT * FROM orders",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM orders WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM orders WHERE total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT * FROM order_history",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT order_id, status, update_date FROM order_history WHERE status = 'Shipped'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT order_history_id, order_id, status, update_date FROM order_history WHERE update_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT customers.name, orders.order_date, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT customers.name, orders.order_date, order_history.status FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_history ON orders.order_id = order_history.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT customers.name AS customer_name, orders.order_date, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT o.order_id, o.order_date, c.name AS customer_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, o.order_date, oh.status FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_history oh ON o.order_id = oh.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, o.order_date, oh.status FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN order_history oh ON o.order_id = oh.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, o.order_date, oh.status FROM customers c RIGHT JOIN orders o ON c.customer_id = o.customer_id RIGHT JOIN order_history oh ON o.order_id = oh.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, o.order_date, oh.status FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_history oh ON o.order_id = oh.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, SUM(o.total_amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name HAVING total_spent > 1000",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, COUNT(oh.order_history_id) AS total_updates FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN order_history oh ON o.order_id = oh.order_id GROUP BY c.name",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT name, phone_number FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, name, phone_number FROM customers WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT o.order_id, c.name, c.phone_number, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT oh.order_history_id, oh.status, oh.update_date, o.total_amount FROM order_history oh JOIN orders o ON oh.order_id = o.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, o.order_date, oh.status FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_history oh ON o.order_id = oh.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, COUNT(o.total_amount) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT MAX(total_amount) AS max_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS avg_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT c.name, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT o.order_date, AVG(o.total_amount) AS avg_amount FROM orders o GROUP BY o.order_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, COUNT(oh.status) AS order_updates FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_history oh ON o.order_id = oh.order_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, MIN(o.total_amount) AS min_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT o.order_id, SUM(oh.status) AS total_updates FROM orders o JOIN order_history oh ON o.order_id = oh.order_id GROUP BY o.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, AVG(o.total_amount) AS avg_amount FROM customers c RIGHT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT o.order_id, MIN(o.total_amount) AS min_amount FROM orders o HAVING min_amount < 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, MAX(o.total_amount) AS max_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name HAVING max_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  phone_number VARCHAR(20) NOT NULL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT NOT NULL,\n  order_date TIMESTAMP NOT NULL,\n  total_amount DECIMAL(10, 2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE order_history (\n  order_history_id INT PRIMARY KEY,\n  order_id INT NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  update_date TIMESTAMP NOT NULL,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id)\n)\n\n### STATEMENT\n\nSELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name HAVING total_spent > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_orders;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, total_amount FROM customer_orders;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT item_id, order_id, item_name, price FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM order_history;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT history_id, order_id, status FROM order_history;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, history_date FROM customer_orders JOIN customers ON customer_orders.customer_id = customers.customer_id JOIN order_history ON customer_orders.order_id = order_history.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, item_name, quantity, price FROM order_items WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM order_history WHERE status = 'Delivered';",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id ORDER BY total_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_orders FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_spent FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_spent FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_spent FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_orders",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, total_amount FROM customer_orders WHERE total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date, total_amount FROM customer_orders INNER JOIN customers ON customer_orders.customer_id = customers.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity, price FROM order_items WHERE price BETWEEN 10 AND 50",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, history_date, status FROM order_history WHERE status = 'completed'",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders)",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_spent FROM customer_orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers WHERE EXISTS (SELECT * FROM customer_orders WHERE customers.customer_id = customer_orders.customer_id)",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, item_name, quantity, price, customer_name FROM order_items INNER JOIN customer_orders ON order_items.order_id = customer_orders.order_id INNER JOIN customers ON customer_orders.customer_id = customers.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_amount FROM customer_orders GROUP BY customer_id HAVING AVG(total_amount) > 500",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, history_date, status FROM order_history WHERE history_date >= '2022-01-01' AND history_date <= '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers WHERE customer_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS order_count FROM customer_orders GROUP BY customer_id HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_amount FROM customer_orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers INNER JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_amount FROM customer_orders WHERE total_amount > 500 GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_amount FROM customer_orders GROUP BY customer_id HAVING MIN(total_amount) < 100",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_orders ORDER BY total_amount DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE customer_orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\n\nCREATE TABLE order_items (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  item_name VARCHAR(50),\n  quantity INT,\n  price DECIMAL\n);\n\n\nCREATE TABLE order_history (\n  history_id INT PRIMARY KEY,\n  order_id INT,\n  history_date DATE,\n  status VARCHAR(50)\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  email VARCHAR(50),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE email LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, total_price FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_item_id, item_name FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM order_history;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, status FROM order_history;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.customer_id, customers.customer_name, orders.total_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT orders.order_id, orders.total_price, order_items.item_name FROM orders JOIN order_items ON orders.order_id = order_items.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT orders.order_id, orders.order_date, payments.payment_date FROM orders JOIN payments ON orders.order_id = payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_history.order_id, order_history.status, order_items.item_name FROM order_history JOIN order_items ON order_history.order_id = order_items.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_price, payments.amount_paid FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, order_items.item_name, payments.amount_paid FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN payments ON orders.order_id = payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_price, order_history.status FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_history ON orders.order_id = order_history.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT orders.total_price, payments.amount_paid, order_history.status FROM orders JOIN payments ON orders.order_id = payments.order_id JOIN order_history ON orders.order_id = order_history.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_price, payments.amount_paid, order_history.status FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id JOIN order_history ON orders.order_id = order_history.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_price FROM orders WHERE total_price > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM order_items WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, item_name, quantity FROM order_items WHERE item_name = 'Apple';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_id, total_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_price > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_date, amount_paid FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, status FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_history ON orders.order_id = order_history.order_id WHERE status = 'Delivered';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number, order_id, item_name, quantity, unit_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_price, payment_date, amount_paid FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_price, status, updated_at FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_history ON orders.order_id = order_history.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_price, item_name, quantity, unit_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(total_price) AS max_price FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_price) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id HAVING COUNT(order_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_price) AS avg_order_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id HAVING AVG(total_price) > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_price DECIMAL(10, 2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    item_name VARCHAR(255),\n    quantity INT,\n    unit_price DECIMAL(8, 2)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    payment_date DATE,\n    amount_paid DECIMAL(10, 2)\n);\n\nCREATE TABLE order_history (\n    history_id INT PRIMARY KEY,\n    order_id INT,\n    status VARCHAR(50),\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_price) AS max_order_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id HAVING MAX(total_price) > 1000;"
]