[
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, unit_of_measure FROM ingredients WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE unit_of_measure = 'g';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_id, ingredient_name FROM ingredients WHERE quantity < 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT AVG(quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT MAX(quantity), MIN(quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, SUM(quantity) FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients ORDER BY ingredient_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, MAX(quantity) FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT COUNT(ingredient_id) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE ingredient_name LIKE '%sugar%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE quantity BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity, unit_of_measure FROM ingredients WHERE ingredient_id = '12345';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, AVG(quantity) FROM ingredients GROUP BY ingredient_name HAVING AVG(quantity) > 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT DISTINCT unit_of_measure FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT DISTINCT ingredient_name FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity, unit_of_measure FROM ingredients WHERE quantity > 0 AND unit_of_measure = 'oz';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity FROM ingredients WHERE unit_of_measure='oz';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM ingredients WHERE unit_of_measure='g';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT DISTINCT ingredient_name FROM ingredients WHERE quantity >= 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE unit_of_measure='g' ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, SUM(quantity) AS total_quantity FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE ingredient_name LIKE 'apple%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, AVG(quantity) AS avg_quantity FROM ingredients GROUP BY ingredient_name HAVING AVG(quantity) > 20;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, MAX(quantity) AS max_quantity FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT DISTINCT unit_of_measure, COUNT(*) AS unit_count FROM ingredients GROUP BY unit_of_measure;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity * 2 AS doubled_quantity FROM ingredients WHERE ingredient_name='banana';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_ingredients, AVG(quantity) AS avg_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE ingredient_id IN (SELECT ingredient_id FROM recipes WHERE recipe_name='Apple Pie');",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, quantity, unit_of_measure, CASE WHEN quantity > 5 THEN 'High Quantity' ELSE 'Low Quantity' END AS quantity_type FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity, MIN(quantity) AS min_quantity, MAX(quantity) AS max_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, SUM(quantity) AS total_quantity FROM ingredients WHERE quantity > 10 GROUP BY ingredient_name HAVING SUM(quantity) > 50;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_id, ingredient_name, quantity, unit_of_measure FROM ingredients WHERE ingredient_name='tomato' OR ingredient_name='onion';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT ingredient_name, COUNT(*) AS ingredient_count FROM ingredients GROUP BY ingredient_name ORDER BY COUNT(*) DESC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id UUID PRIMARY KEY,\n  ingredient_name STRING,\n  quantity FLOAT,\n  unit_of_measure STRING\n)\n\n### STATEMENT\n\nSELECT unit_of_measure, AVG(quantity) AS avg_quantity_per_unit FROM ingredients GROUP BY unit_of_measure HAVING AVG(quantity) > 15;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, available_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, available_quantity FROM ingredients WHERE available_quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, required_ingredients FROM recipes WHERE serving_size > 2;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT i.ingredient_name, r.recipe_name FROM ingredients i INNER JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients);",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT i.ingredient_name, r.recipe_name FROM ingredients i LEFT JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients);",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT i.ingredient_name, COUNT(*) AS num_recipes FROM ingredients i INNER JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients) GROUP BY i.ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT ingredient_name FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(*) AS num_ingredients FROM recipes GROUP BY recipe_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, SUM(available_quantity) AS total_stock FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, ARRAY_LENGTH(required_ingredients) AS num_required_ingredients FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size, ARRAY_TO_STRING(required_ingredients, ', ') AS required_ingredient_list FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(*) AS num_ingredients, SUM(serving_size) AS total_serving_size FROM recipes LEFT JOIN ingredients ON ingredients.ingredient_id = ANY(recipes.required_ingredients) GROUP BY recipe_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(*) AS num_ingredients, SUM(COALESCE(available_quantity, 0)) AS total_available_quantity FROM recipes LEFT JOIN ingredients ON ingredients.ingredient_id = ANY(recipes.required_ingredients) GROUP BY recipe_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, available_quantity FROM ingredients WHERE ingredient_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes WHERE recipe_name ILIKE '%pasta%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes ORDER BY serving_size DESC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes ORDER BY serving_size ASC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, available_quantity FROM ingredients ORDER BY available_quantity DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_id, ingredient_name FROM ingredients WHERE available_quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT MAX(available_quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT MIN(available_quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT SUM(available_quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT AVG(available_quantity) FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT ingredient_name, SUM(available_quantity) AS total_quantity FROM ingredients GROUP BY ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(required_ingredients) AS num_ingredients FROM recipes GROUP BY recipe_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT recipe_name, serving_size, SUM(available_quantity) AS total_available_qty FROM ingredients i INNER JOIN recipes r ON i.ingredient_name = ANY(r.required_ingredients) GROUP BY recipe_name, serving_size;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE ingredient_id IN (SELECT ingredient_id FROM recipes WHERE recipe_name = 'Spaghetti Bolognese');",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT * FROM recipes WHERE required_ingredients @> ARRAY['Tomato', 'Onion'];",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    ingredient_id INT PRIMARY KEY,\n    ingredient_name VARCHAR(50) NOT NULL,\n    available_quantity INT\n);\n\n\nCREATE TABLE recipes (\n    recipe_id INT PRIMARY KEY,\n    recipe_name VARCHAR(50) NOT NULL,\n    required_ingredients VARCHAR[],\n    serving_size INT\n);\n\n### STATEMENT\n\nSELECT r.recipe_name, i.ingredient_name FROM recipes r, unnest(r.required_ingredients) AS ing(ingredient_name) JOIN ingredients i ON i.ingredient_name = ing.ingredient_name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT name, quantity FROM ingredients WHERE expiration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT id, name FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT recipe_id, ingredient_id, quantity_used FROM recipe_ingredients WHERE quantity_used > 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE ri.quantity_used > 10;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE name LIKE '%sugar%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT id, name, expiration_date FROM ingredients WHERE expiration_date = '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT id, name FROM ingredients WHERE quantity < 100;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, COUNT(ri.ingredient_id) AS num_ingredients FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id GROUP BY r.name;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT MIN(quantity) AS min_quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT AVG(quantity_used) AS avg_quantity_used FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT MAX(quantity_used) AS max_quantity_used FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT MIN(quantity_used) AS min_quantity_used FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE r.name = 'Pasta Carbonara';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE i.name = 'Flour';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE r.name LIKE '%cake%' AND i.name LIKE '%sugar%';",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE ri.quantity_used BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE expiration_date < CURDATE()",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT name, quantity FROM ingredients WHERE quantity > 10 ORDER BY quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT i.name AS ingredient_name, r.name AS recipe_name FROM ingredients AS i INNER JOIN recipe_ingredients AS ri ON i.id = ri.ingredient_id INNER JOIN recipes AS r ON r.id = ri.recipe_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, SUM(ri.quantity_used) AS total_quantity_used FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id GROUP BY r.name",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, COUNT(ri.ingredient_id) AS total_ingredients FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id GROUP BY r.name HAVING total_ingredients >= 3",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipes WHERE id IN (SELECT recipe_id FROM recipe_ingredients WHERE ingredient_id = 1)",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    quantity INT,\n    expiration_date DATE\n);\n\nCREATE TABLE recipes (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n    recipe_id INT,\n    ingredient_id INT,\n    quantity_used INT,\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id),\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)\n);\n\n### STATEMENT\n\nSELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id INNER JOIN ingredients AS i ON i.id = ri.ingredient_id ORDER BY r.name ASC, i.name ASC",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredients",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT ingredient_name, quantity_in_stock FROM ingredients",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM recipes",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredient_usage",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_id, ingredient_id, quantity_used FROM ingredient_usage",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM alerts",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT ingredient_id, message FROM alerts",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT ingredient_name, quantity_in_stock FROM ingredients WHERE quantity_in_stock < 10",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes WHERE serving_size > 4",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM alerts WHERE message LIKE '%expiry%'",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredients JOIN ingredient_usage ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_name, serving_size, ingredient_name FROM recipes JOIN ingredient_usage ON recipes.recipe_id = ingredient_usage.recipe_id JOIN ingredients ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredients INNER JOIN alerts ON ingredients.ingredient_id = alerts.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT ingredient_name, quantity_in_stock FROM ingredients LEFT JOIN ingredient_usage ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes RIGHT JOIN ingredient_usage ON recipes.recipe_id = ingredient_usage.recipe_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredient_usage INNER JOIN recipes ON ingredient_usage.recipe_id = recipes.recipe_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE quantity_in_stock < 50",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT recipe_name, serving_size FROM recipes WHERE serving_size > 4",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT i.ingredient_name, u.quantity_used FROM ingredients i INNER JOIN ingredient_usage u ON i.ingredient_id = u.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT r.recipe_name, i.ingredient_name FROM recipes r INNER JOIN ingredient_usage u ON r.recipe_id = u.recipe_id INNER JOIN ingredients i ON u.ingredient_id = i.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT i.ingredient_name, SUM(u.quantity_used) AS total_quantity_used FROM ingredients i INNER JOIN ingredient_usage u ON i.ingredient_id = u.ingredient_id GROUP BY i.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT a.message, i.ingredient_name FROM alerts a INNER JOIN ingredients i ON a.ingredient_id = i.ingredient_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients ( ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), quantity_in_stock DECIMAL(10,2) )\n\nCREATE TABLE recipes ( recipe_id INT PRIMARY KEY, recipe_name VARCHAR(255), serving_size INT )\n\nCREATE TABLE ingredient_usage ( usage_id INT PRIMARY KEY, recipe_id INT, ingredient_id INT, quantity_used DECIMAL(10,2), FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\nCREATE TABLE alerts ( alert_id INT PRIMARY KEY, ingredient_id INT, message VARCHAR(255), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id) )\n\n### STATEMENT\n\nSELECT r.recipe_name, COUNT(u.usage_id) AS num_ingredients_used FROM recipes r INNER JOIN ingredient_usage u ON r.recipe_id = u.recipe_id GROUP BY r.recipe_id",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_name, quantity FROM ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, description FROM recipes;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_id, ingredient_id, quantity_required FROM recipe_ingredients;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_information FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredient_suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_id, supplier_id, price FROM ingredient_suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_name, quantity FROM ingredients WHERE ingredient_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, description FROM recipes WHERE recipe_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_name, quantity_required FROM ingredients INNER JOIN recipe_ingredients ON ingredients.ingredient_id = recipe_ingredients.ingredient_id;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name FROM suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_name, price FROM ingredients INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, quantity_required FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients WHERE quantity > 50 ORDER BY ingredient_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipes WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_information FROM suppliers WHERE supplier_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ingredients",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredient_name, quantity FROM ingredients WHERE quantity > 100",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, description FROM recipes WHERE recipe_id = 5",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredients.ingredient_name, recipe_ingredients.quantity_required FROM ingredients INNER JOIN recipe_ingredients ON ingredients.ingredient_id = recipe_ingredients.ingredient_id WHERE recipe_id = 3",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_information FROM suppliers WHERE supplier_id = 1",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT ingredients.ingredient_name, ingredient_suppliers.price FROM ingredients INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE supplier_id = 2",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, ingredients.ingredient_name, recipe_ingredients.quantity_required, ingredient_suppliers.price FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE supplier_id = 3",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM recipes WHERE description LIKE '%healthy%'",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(price) AS total_price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id GROUP BY supplier_name HAVING total_price > 1000",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(ingredient_id) AS num_ingredients FROM recipes LEFT JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id GROUP BY recipe_id HAVING num_ingredients >= 3",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, ingredients.ingredient_name, ingredient_suppliers.price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id INNER JOIN ingredients ON ingredient_suppliers.ingredient_id = ingredients.ingredient_id WHERE supplier_id = 1 ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity FROM ingredients",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM suppliers",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, COUNT(ingredient_id) AS num_ingredients FROM recipes LEFT JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id GROUP BY recipe_id ORDER BY num_ingredients DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM ingredient_suppliers",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, ingredients.ingredient_name, supplier_name FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id ORDER BY supplier_name ASC, price DESC",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT recipe_name, ingredients.ingredient_name, supplier_name, price FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE price > 5 ORDER BY price ASC",
  "### TABLEDATA\n\nCREATE TABLE ingredients (\n  ingredient_id INT PRIMARY KEY,\n  ingredient_name VARCHAR(50) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE recipes (\n  recipe_id INT PRIMARY KEY,\n  recipe_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE recipe_ingredients (\n  recipe_id INT,\n  ingredient_id INT,\n  quantity_required INT,\n  FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)\n);\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  contact_information VARCHAR(100)\n);\n\nCREATE TABLE ingredient_suppliers (\n  ingredient_id INT,\n  supplier_id INT,\n  price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id),\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT recipe_name, ingredient_name FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id WHERE quantity_required > 1 ORDER BY recipe_name ASC, ingredient_name DESC"
]