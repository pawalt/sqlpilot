[
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_name = 'Milk';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE expiration_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(item_id) FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(expiration_date) FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, COUNT(*) FROM perishable_items GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, MAX(expiration_date) FROM perishable_items GROUP BY item_id, item_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items ORDER BY expiration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items ORDER BY item_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_name LIKE '%fruit%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_id BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE expiration_date BETWEEN '2022-10-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_name = 'Apples' OR item_name = 'Bananas';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE expiration_date > CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE expiration_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items ORDER BY expiration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_items FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(expiration_date, CURRENT_DATE)) AS avg_days_remaining FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_name, CONCAT('Expires on ', expiration_date) AS expiry_info FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_date = (SELECT MAX(expiration_date) FROM perishable_items);",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT item_name FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE expiration_date BETWEEN '2022-01-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(item_id) AS avg_item_id, AVG(DATEDIFF(expiration_date, CURRENT_DATE)) AS avg_days_remaining FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_name NOT LIKE 'Banana';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_name, MONTH(expiration_date) AS expiry_month FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items WHERE item_id < 10 ORDER BY item_id DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE item_id % 2 = 0;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_name, DATE_FORMAT(expiration_date, '%Y-%m-%d') AS formatted_expiry_date FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE YEAR(expiration_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50),\n  expiration_date DATE\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE expiration_date < DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY);",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, quantity FROM stock WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.item_id, p.item_name, s.quantity FROM stock s INNER JOIN perishable_items p ON s.item_id = p.item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT p.item_id, p.item_name, p.expiration_date, s.quantity FROM perishable_items p LEFT JOIN stock s ON p.item_id = s.item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, COUNT(*) AS total_items FROM stock GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, SUM(quantity) AS total_quantity FROM stock GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, MAX(quantity) AS max_quantity FROM stock GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, MIN(quantity) AS min_quantity FROM stock GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, AVG(quantity) AS avg_quantity FROM stock GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_date < CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_date >= CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items ORDER BY expiration_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items ORDER BY expiration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date, quantity FROM perishable_items JOIN stock USING (item_id);",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT p.item_id, p.item_name, s.quantity FROM perishable_items p, stock s WHERE p.item_id = s.item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE item_name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date < CURDATE()",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id WHERE quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity, expiration_date FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id WHERE quantity < 10 AND expiration_date < CURDATE()",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT perishable_items.item_id, item_name, expiration_date FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id WHERE quantity > 50",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_name LIKE '%bread%'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT item_name FROM perishable_items",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity FROM perishable_items LEFT JOIN stock ON perishable_items.item_id = stock.item_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, SUM(quantity) AS total_quantity FROM stock GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, AVG(quantity) AS average_quantity FROM stock GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(item_id) AS total_items FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, MAX(quantity) AS max_quantity FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, MIN(quantity) AS min_quantity FROM perishable_items JOIN stock ON perishable_items.item_id = stock.item_id GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items ORDER BY expiration_date DESC",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_name LIKE '%milk%' AND expiration_date BETWEEN '2022-10-01' AND '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_name = 'Banana' OR item_name = 'Apple'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_name <> 'Orange'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE NOT (item_name = 'Strawberry' OR item_name = 'Blueberry')",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date < '2022-09-15'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(50) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE stock (\n  stock_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT NOT NULL,\n  FOREIGN KEY (item_id) REFERENCES perishable_items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date >= '2022-11-01'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM perishable_items",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE expiration_date < '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_id, location_name FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, capacity FROM storage_locations WHERE capacity > 100",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM item_tracking",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT tracking_id, item_id, location_id FROM item_tracking",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, quantity FROM item_tracking WHERE expiration_status = 'expired'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT perishable_items.item_name, item_tracking.quantity FROM perishable_items JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT perishable_items.item_name, storage_locations.location_name FROM perishable_items JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date BETWEEN '2023-01-01' AND '2023-12-31'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, SUM(quantity) AS total_quantity FROM item_tracking JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, COUNT(tracking_id) AS total_tracking FROM perishable_items LEFT JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, MAX(capacity) AS max_capacity FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, expiration_status FROM perishable_items UNION SELECT location_name, expiration_status FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, location_id, quantity FROM item_tracking ORDER BY quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, expiration_date, CASE WHEN expiration_date > CURDATE() THEN 'Not Expired' ELSE 'Expired' END AS status FROM perishable_items",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT tracking_id, item_name, location_name, quantity, CASE WHEN expiration_status = 'expired' THEN 'Expired' ELSE 'Not Expired' END AS status FROM item_tracking JOIN perishable_items ON item_tracking.item_id = perishable_items.item_id JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_items FROM perishable_items UNION SELECT COUNT(*) AS total_locations FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_date < NOW()",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_id, location_name, capacity FROM storage_locations WHERE capacity > 0",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM item_tracking WHERE tracking_id = 123",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, location_name, quantity, expiration_status FROM perishable_items JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id WHERE expiration_status = 'expired'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT DISTINCT location_name FROM storage_locations",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, expiration_status FROM perishable_items WHERE expiration_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, SUM(quantity) AS total_quantity FROM item_tracking JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_expired_items FROM perishable_items WHERE expiration_date < NOW()",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name, capacity FROM perishable_items JOIN storage_locations ON perishable_items.item_id = storage_locations.location_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, AVG(capacity) AS avg_capacity FROM storage_locations GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, quantity FROM perishable_items LEFT JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, MIN(capacity) AS min_capacity FROM storage_locations GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_items, SUM(quantity) AS total_quantity FROM item_tracking",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, quantity FROM perishable_items JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id WHERE quantity > 100",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, MAX(capacity) AS max_capacity FROM storage_locations GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_name, quantity, expiration_status FROM perishable_items JOIN item_tracking ON perishable_items.item_id = item_tracking.item_id WHERE expiration_status = 'fresh'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, COUNT(*) AS total_items FROM item_tracking JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id GROUP BY location_name",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name, expiration_date FROM perishable_items WHERE expiration_status IS NULL",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT location_name, SUM(quantity) AS total_quantity FROM item_tracking JOIN storage_locations ON item_tracking.location_id = storage_locations.location_id WHERE location_name LIKE '%cold%'",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(50),\n    expiration_date DATE\n)\n\nCREATE TABLE storage_locations (\n    location_id INT PRIMARY KEY,\n    location_name VARCHAR(50),\n    capacity INT\n)\n\nCREATE TABLE item_tracking (\n    tracking_id INT PRIMARY KEY,\n    item_id INT,\n    location_id INT,\n    quantity INT,\n    expiration_status VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT item_id) AS total_unique_items FROM item_tracking",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, item_name FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, item_name, expiration_date FROM perishable_items WHERE expiration_date > CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM item_categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM stores;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, store_name FROM stores;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, store_name, location FROM stores WHERE location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, c.category_name FROM perishable_items p JOIN item_categories ic ON p.id = ic.item_id JOIN categories c ON ic.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.store_name, s.location, p.item_name, p.expiration_date FROM stores s JOIN perishable_items p ON s.id = 1 AND s.id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, c.category_name FROM perishable_items p LEFT JOIN item_categories ic ON p.id = ic.item_id JOIN categories c ON ic.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, COALESCE(c.category_name, 'Uncategorized') AS category_name FROM perishable_items p LEFT JOIN item_categories ic ON p.id = ic.item_id LEFT JOIN categories c ON ic.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, COUNT(ic.category_id) AS category_count FROM perishable_items p LEFT JOIN item_categories ic ON p.id = ic.item_id GROUP BY p.item_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.store_name, COUNT(p.id) AS item_count FROM stores s LEFT JOIN perishable_items p ON s.id = p.id GROUP BY s.store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, AVG(DATE_PART('day', p.expiration_date - CURRENT_DATE)) AS days_to_expire FROM perishable_items p GROUP BY p.item_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.category_name, COUNT(p.item_name) AS item_count FROM categories c LEFT JOIN item_categories ic ON c.id = ic.category_id JOIN perishable_items p ON ic.item_id = p.id GROUP BY c.category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.item_name, MAX(DATE_PART('day', p.expiration_date - CURRENT_DATE)) AS days_until_expire FROM perishable_items p;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.store_name, MIN(DATE_PART('day', p.expiration_date - CURRENT_DATE)) AS closest_expiration FROM stores s JOIN perishable_items p ON s.id = p.id GROUP BY s.store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items ORDER BY expiration_date ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items ORDER BY expiration_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date > NOW();",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, categories.category_name FROM perishable_items INNER JOIN item_categories ON perishable_items.id = item_categories.item_id INNER JOIN categories ON item_categories.category_id = categories.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, location FROM stores WHERE location LIKE '%mall%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date, category_name FROM perishable_items INNER JOIN item_categories ON perishable_items.id = item_categories.item_id INNER JOIN categories ON item_categories.category_id = categories.id WHERE category_name = 'Vegetables';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date, store_name FROM perishable_items INNER JOIN stores ON perishable_items.id = stores.id WHERE expiration_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(id) AS total_items, category_name FROM item_categories INNER JOIN categories ON item_categories.category_id = categories.id GROUP BY category_name HAVING COUNT(id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, COUNT(perishable_items.id) AS total_items FROM stores INNER JOIN perishable_items ON stores.id = perishable_items.id GROUP BY store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, category_name FROM stores CROSS JOIN categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date, category_name, store_name FROM perishable_items JOIN item_categories ON perishable_items.id = item_categories.item_id JOIN categories ON item_categories.category_id = categories.id JOIN stores ON perishable_items.id = stores.id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(item_id) AS total_items FROM item_categories INNER JOIN categories ON item_categories.category_id = categories.id GROUP BY category_name HAVING COUNT(item_id) > 3;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, AVG(EXTRACT(DAY FROM expiration_date)) AS avg_expiration_days FROM perishable_items INNER JOIN stores ON perishable_items.id = stores.id GROUP BY store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, COUNT(DISTINCT category_id) AS total_categories FROM stores INNER JOIN perishable_items ON stores.id = perishable_items.id INNER JOIN item_categories ON perishable_items.id = item_categories.item_id GROUP BY store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(EXTRACT(YEAR FROM expiration_date)) AS max_expiration_year, MIN(EXTRACT(YEAR FROM expiration_date)) AS min_expiration_year FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date, category_name FROM perishable_items INNER JOIN item_categories ON perishable_items.id = item_categories.item_id INNER JOIN categories ON item_categories.category_id = categories.id WHERE expiration_date >= '2022-06-01' AND expiration_date <= '2023-06-01';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(EXTRACT(DAY FROM expiration_date)) AS avg_expiration_days FROM perishable_items INNER JOIN item_categories ON perishable_items.id = item_categories.item_id INNER JOIN categories ON item_categories.category_id = categories.id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, COUNT(DISTINCT category_id) AS total_categories FROM stores INNER JOIN perishable_items ON stores.id = perishable_items.id INNER JOIN item_categories ON perishable_items.id=item_categories.item_id GROUP BY store_name HAVING COUNT(DISTINCT category_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(item_id) AS total_items FROM item_categories INNER JOIN categories ON item_categories.category_id = categories.id GROUP BY category_name HAVING COUNT(item_id) < 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, COUNT(item_id) AS total_items FROM stores INNER JOIN perishable_items ON stores.id = perishable_items.id INNER JOIN item_categories ON perishable_items.id = item_categories.item_id GROUP BY store_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date, category_name FROM perishable_items JOIN item_categories ON perishable_items.id = item_categories.item_id JOIN categories ON item_categories.category_id = categories.id WHERE item_name LIKE 'Apple%' ORDER BY expiration_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n  id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\n\nCREATE TABLE categories (\n  id SERIAL PRIMARY KEY,\n  category_name VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE item_categories (\n  item_id INTEGER REFERENCES perishable_items(id),\n  category_id INTEGER REFERENCES categories(id)\n);\n\n\nCREATE TABLE stores (\n  id SERIAL PRIMARY KEY,\n  store_name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT store_name, location, category_name FROM stores JOIN perishable_items ON stores.id = perishable_items.id JOIN item_categories ON perishable_items.id = item_categories.item_id JOIN categories ON item_categories.category_id = categories.id WHERE expiration_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM item_categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM supply_history;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, category_name FROM perishable_items JOIN item_categories ON perishable_items.item_id = item_categories.item_id JOIN categories ON item_categories.category_id = categories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name, supply_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS total_supply FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id GROUP BY perishable_items.item_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_supply FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id GROUP BY suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supply_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id WHERE supply_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supply_date FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id WHERE supply_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name AS product, supplier_name AS provider, supply_date AS delivery_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date < CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(*) AS total_items FROM categories JOIN item_categories ON categories.category_id = item_categories.category_id GROUP BY categories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_products FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id JOIN perishable_items ON supply_history.item_id = perishable_items.item_id GROUP BY suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id WHERE supplier_name = 'Supplier A';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE item_name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM perishable_items;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM perishable_items WHERE expiration_date > CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, category_name FROM perishable_items JOIN item_categories ON perishable_items.item_id = item_categories.item_id JOIN categories ON item_categories.category_id = categories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, expiration_date FROM perishable_items WHERE expiration_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supply_date FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id WHERE supply_date = '2022-12-25';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(item_id) AS item_count FROM item_categories JOIN categories ON item_categories.category_id = categories.category_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name, supply_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id WHERE perishable_items.expiration_date < supply_history.supply_date;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(DISTINCT item_id) AS item_count FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id GROUP BY supplier_name HAVING COUNT(DISTINCT item_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MAX(supply_date) AS last_supply_date FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(DATEDIFF(supply_date, expiration_date)) AS average_days_overdue FROM item_categories JOIN supply_history ON item_categories.item_id = supply_history.item_id JOIN perishable_items ON item_categories.item_id = perishable_items.item_id WHERE supply_date > expiration_date GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(item_id) AS total_supply_count FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id GROUP BY supplier_name ORDER BY total_supply_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(DISTINCT supplier_id) AS supplier_count FROM item_categories JOIN supply_history ON item_categories.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id JOIN categories ON item_categories.category_id = categories.category_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM suppliers WHERE supplier_name LIKE '%Co%';",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, MIN(supply_date) AS first_supply_date FROM item_categories JOIN supply_history ON item_categories.item_id = supply_history.item_id JOIN perishable_items ON item_categories.item_id = perishable_items.item_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name, supply_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id WHERE supplier_name = 'Supplier A' AND perishable_items.expiration_date < supply_history.supply_date;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, AVG(DATEDIFF(supply_date, perishable_items.expiration_date)) AS avg_delay_days FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id JOIN perishable_items ON supply_history.item_id = perishable_items.item_id WHERE supply_date > perishable_items.expiration_date GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(item_id) AS total_supply_count FROM suppliers JOIN supply_history ON suppliers.supplier_id = supply_history.supplier_id GROUP BY supplier_name HAVING COUNT(item_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT item_name, supplier_name, MIN(supply_date) AS first_supply_date FROM perishable_items JOIN supply_history ON perishable_items.item_id = supply_history.item_id JOIN suppliers ON supply_history.supplier_id = suppliers.supplier_id GROUP BY item_name, supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE perishable_items (\n    item_id UUID PRIMARY KEY,\n    item_name VARCHAR(255) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id UUID PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE item_categories (\n    item_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    PRIMARY KEY (item_id, category_id),\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE supply_history (\n    supply_id UUID PRIMARY KEY,\n    item_id UUID NOT NULL,\n    supplier_id UUID NOT NULL,\n    supply_date DATE NOT NULL,\n    FOREIGN KEY (item_id) REFERENCES perishable_items(item_id),\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(DISTINCT item_id) AS item_count FROM item_categories JOIN categories ON item_categories.category_id = categories.category_id GROUP BY category_name HAVING item_count > 1;"
]