[
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, chromosome, genotype FROM GeneticData;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT sample_id, quality FROM GeneticData WHERE position > 1000;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData WHERE genotype = 'AA';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, chromosome, position, quality FROM GeneticData WHERE sample_id = 1234;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT chromosome FROM GeneticData;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM GeneticData;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT AVG(quality) FROM GeneticData WHERE chromosome = 'X';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, position, genotype FROM GeneticData WHERE quality >= 30.0;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT sample_id FROM GeneticData WHERE chromosome IN ('X', 'Y');",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData WHERE genotype LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, position, genotype, quality FROM GeneticData WHERE sample_id = 5678 AND chromosome = 'Y';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT MAX(quality) FROM GeneticData WHERE sample_id = 9876;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, genotype FROM GeneticData WHERE position BETWEEN 1000 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData ORDER BY quality DESC;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT AVG(quality) AS avg_quality FROM GeneticData WHERE sample_id = 3456;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT sample_id) FROM GeneticData WHERE chromosome = 'X';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, chromosome FROM GeneticData WHERE sample_id IN (1234, 5678);",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT AVG(quality) AS avg_quality FROM GeneticData WHERE genotype = 'AA';",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, sample_id, genotype FROM GeneticData WHERE sample_id = 1234 ORDER BY position ASC;",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT id, sample_id, genotype FROM GeneticData WHERE position > 100 AND quality > 0.7",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData WHERE chromosome = 'X' AND genotype IN ('AA', 'TT')",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT sample_id, AVG(quality) AS average_quality FROM GeneticData GROUP BY sample_id HAVING AVG(quality) > 0.5",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT chromosome FROM GeneticData WHERE sample_id IN (SELECT id FROM Samples WHERE gender = 'Female')",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_rows FROM GeneticData",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData ORDER BY position DESC, quality ASC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData JOIN Samples ON GeneticData.sample_id = Samples.id WHERE Samples.gender = 'Male'",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT chromosome, COUNT(*) AS total_count FROM GeneticData GROUP BY chromosome HAVING COUNT(*) > 100",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT * FROM GeneticData WHERE position BETWEEN 500 AND 1000",
  "### TABLEDATA\n\nCREATE TABLE GeneticData (\n    id INT PRIMARY KEY,\n    sample_id INT,\n    chromosome VARCHAR(50),\n    position INT,\n    genotype VARCHAR(10),\n    quality FLOAT,\n    CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES Samples(id)\n);\n\n### STATEMENT\n\nSELECT sample_id, MAX(quality) AS max_quality FROM GeneticData GROUP BY sample_id ORDER BY max_quality DESC",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT name FROM Genes;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, name FROM Genes;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, name, sequence FROM Genes;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Variants;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT type FROM Variants;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT allele_frequency FROM Variants;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, gene_id FROM Variants;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, gene_id, type FROM Variants;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes JOIN Variants ON Genes.id = Variants.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.id, Genes.name, Variants.type FROM Genes JOIN Variants ON Genes.id = Variants.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Variants.id, Variants.type, Variants.allele_frequency, Genes.name FROM Genes JOIN Variants ON Genes.id = Variants.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.id, Genes.sequence, Variants.type, Variants.allele_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT name FROM Genes WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT type FROM Variants WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT allele_frequency FROM Variants WHERE gene_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, sequence FROM Genes WHERE name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, name FROM Genes WHERE sequence = 'XYZ';",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes ORDER BY id ASC;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes ORDER BY name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM Genes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT name, sequence FROM Genes WHERE id > 10;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, name, sequence FROM Genes WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, gene_id, type FROM Variants WHERE allele_frequency > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT id, gene_id, type FROM Variants WHERE gene_id IN (SELECT id FROM Genes WHERE name = 'ABC');",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, Variants.type FROM Genes JOIN Variants ON Genes.id = Variants.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, COUNT(Variants.type) AS variant_count FROM Genes LEFT JOIN Variants ON Genes.id = Variants.gene_id GROUP BY Genes.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, MAX(Variants.allele_frequency) AS max_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id GROUP BY Genes.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, AVG(Variants.allele_frequency) AS avg_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id GROUP BY Genes.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, SUM(Variants.allele_frequency) AS total_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id GROUP BY Genes.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, Variants.type, MAX(Variants.allele_frequency) AS max_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id GROUP BY Genes.name, Variants.type;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, Variants.type, AVG(Variants.allele_frequency) AS avg_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id WHERE Genes.id < 10 GROUP BY Genes.name, Variants.type;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT Genes.name, Variants.type, SUM(Variants.allele_frequency) AS total_frequency FROM Genes JOIN Variants ON Genes.id = Variants.gene_id WHERE Variants.allele_frequency <= 0.5 GROUP BY Genes.name, Variants.type;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, v.type AS variant_type FROM Genes g JOIN Variants v ON g.id = v.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, COUNT(v.type) AS variant_count FROM Genes g LEFT JOIN Variants v ON g.id = v.gene_id GROUP BY g.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, MAX(v.allele_frequency) AS max_frequency FROM Genes g JOIN Variants v ON g.id = v.gene_id GROUP BY g.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, AVG(v.allele_frequency) AS avg_frequency FROM Genes g JOIN Variants v ON g.id = v.gene_id GROUP BY g.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, SUM(v.allele_frequency) AS total_frequency FROM Genes g JOIN Variants v ON g.id = v.gene_id GROUP BY g.name;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, v.type AS variant_type, MAX(v.allele_frequency) AS max_frequency FROM Genes g JOIN Variants v ON g.id = v.gene_id GROUP BY g.name, v.type;",
  "### TABLEDATA\n\nCREATE TABLE Genes (\n  id INT PRIMARY KEY,\n  name STRING,\n  sequence STRING\n);\n\n\nCREATE TABLE Variants (\n  id INT PRIMARY KEY,\n  gene_id INT,\n  type STRING,\n  allele_frequency FLOAT\n);\n\n### STATEMENT\n\nSELECT g.name AS gene_name, v.type AS variant_type, AVG(v.allele_frequency) AS avg_frequency FROM Genes g JOIN Variants v ON g.id = v.gene_id WHERE g.id < 10 GROUP BY g.name, v.type;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, sequence FROM DNA_Sequences WHERE quality_score > 5;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT variant_name, gene_name FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Variants WHERE allele_frequency >= 0.5;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, trait FROM Phenotype_Information;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Phenotype_Information WHERE trait = 'Trait1';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, sequence, quality_score FROM DNA_Sequences WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT variant_name, allele_frequency FROM Genetic_Variants WHERE gene_name = 'Gene1';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, trait FROM Phenotype_Information WHERE sample_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences ORDER BY quality_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Variants ORDER BY allele_frequency ASC;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Phenotype_Information ORDER BY sample_id;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Genetic_Variants WHERE gene_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Phenotype_Information WHERE trait = 'Trait2';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(quality_score) FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(allele_frequency) FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(sample_id) FROM Phenotype_Information;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(quality_score) FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(allele_frequency) FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences WHERE quality_score > 30;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT variant_name, gene_name FROM Genetic_Variants WHERE allele_frequency < 0.05;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences JOIN Genetic_Variants ON DNA_Sequences.id = Genetic_Variants.id;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sequence, quality_score FROM DNA_Sequences WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DNA_Sequences.sequence, Genetic_Variants.variant_name FROM DNA_Sequences JOIN Genetic_Variants ON DNA_Sequences.id = Genetic_Variants.id;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences WHERE sequence LIKE 'ATG%';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Variants WHERE gene_name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sample_id, trait FROM Phenotype_Information WHERE sample_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT gene_name FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(quality_score) AS avg_quality FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(allele_frequency) AS max_frequency FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS sequence_count FROM DNA_Sequences;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT gene_name) AS gene_count FROM Genetic_Variants;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences WHERE sequence NOT LIKE 'CGT%';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences WHERE quality_score BETWEEN 20 AND 40;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT variant_name, allele_frequency FROM Genetic_Variants WHERE variant_name LIKE '%insertion%';",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DNA_Sequences ORDER BY quality_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT trait, COUNT(*) AS sample_count FROM Phenotype_Information GROUP BY trait;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT gene_name, AVG(allele_frequency) AS avg_frequency FROM Genetic_Variants GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE DNA_Sequences (\n    id SERIAL PRIMARY KEY,\n    sequence TEXT NOT NULL,\n    quality_score FLOAT\n);\n\nCREATE TABLE Genetic_Variants (\n    id SERIAL PRIMARY KEY,\n    variant_name VARCHAR(50) NOT NULL,\n    gene_name VARCHAR(50),\n    allele_frequency FLOAT\n);\n\nCREATE TABLE Phenotype_Information (\n    id SERIAL PRIMARY KEY,\n    sample_id INTEGER UNIQUE,\n    trait VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sequence, quality_score FROM DNA_Sequences WHERE quality_score IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, age FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Test;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT test_date, test_result FROM Genetic_Test;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Variant;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT gene_name, chromosome, position FROM Variant;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Analysis_Result;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT analysis_date, analysis_result FROM Analysis_Result;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, g.test_date, g.test_result FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT v.gene_name, v.chromosome, a.analysis_date, a.analysis_result FROM Variant v JOIN Analysis_Result a ON v.variant_id = a.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, a.analysis_date, a.analysis_result FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id JOIN Analysis_Result a ON g.test_id = a.test_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, a.analysis_date, a.analysis_result FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id JOIN Analysis_Result a ON g.test_id = a.test_id JOIN Variant v ON a.variant_id = v.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient WHERE age > 50;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient WHERE sex = 'M';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient WHERE first_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Test WHERE test_date >= '2022-01-01' AND test_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Variant WHERE allele_freq > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Analysis_Result WHERE analysis_result = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, g.test_result, v.variant_type FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id JOIN Analysis_Result a ON g.test_id = a.test_id JOIN Variant v ON a.variant_id = v.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, g.test_result, v.variant_type FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id JOIN Analysis_Result a ON g.test_id = a.test_id JOIN Variant v ON a.variant_id = v.variant_id WHERE g.test_result = 'Negative';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, a.analysis_result FROM Patient p JOIN Genetic_Test g ON p.patient_id = g.patient_id JOIN Analysis_Result a ON g.test_id = a.test_id WHERE g.test_result = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, age FROM Patient WHERE age > 40;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Genetic_Test WHERE test_result='Positive';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT Patient.first_name, Variant.gene_name FROM Patient INNER JOIN Variant ON Patient.patient_id = Variant.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT Patient.first_name, Genetic_Test.test_date FROM Patient INNER JOIN Genetic_Test ON Patient.patient_id = Genetic_Test.patient_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT Patient.first_name, Variant.gene_name, Analysis_Result.analysis_result FROM Patient INNER JOIN Variant ON Patient.patient_id = Variant.variant_id INNER JOIN Analysis_Result ON Variant.variant_id = Analysis_Result.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT Patient.first_name, Genetic_Test.test_result, Variant.variant_type FROM Patient LEFT JOIN Genetic_Test ON Patient.patient_id = Genetic_Test.patient_id LEFT JOIN Variant ON Genetic_Test.test_id = Variant.variant_id;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient WHERE age BETWEEN 30 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT DISTINCT sex FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM Patient ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, age FROM Patient WHERE sex='M' AND age > 50;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, age FROM Patient WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT last_name) FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT AVG(age) FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT patient_id, MAX(age) AS oldest_patient_age FROM Patient;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT test_date, COUNT(*) AS num_tests FROM Genetic_Test GROUP BY test_date;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT gene_name, AVG(allele_freq) FROM Variant GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, MAX(age) AS max_age FROM Patient GROUP BY first_name;",
  "### TABLEDATA\n\nCREATE TABLE Patient (\n    patient_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    sex CHAR,\n    genetic_data BYTES\n);\n\n\nCREATE TABLE Genetic_Test (\n    test_id UUID PRIMARY KEY,\n    patient_id UUID REFERENCES Patient(patient_id),\n    test_date DATE,\n    test_result VARCHAR(100),\n    test_data JSONB\n);\n\n\nCREATE TABLE Variant (\n    variant_id UUID PRIMARY KEY,\n    gene_name VARCHAR(50),\n    chromosome VARCHAR(10),\n    position INT,\n    variant_type VARCHAR(20),\n    allele_freq FLOAT\n);\n\n\nCREATE TABLE Analysis_Result (\n    result_id UUID PRIMARY KEY,\n    test_id UUID REFERENCES Genetic_Test(test_id),\n    variant_id UUID REFERENCES Variant(variant_id),\n    analysis_date DATE,\n    analysis_result VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT first_name, test_date FROM Patient, Genetic_Test WHERE Patient.patient_id = Genetic_Test.patient_id;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM patients",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, age FROM patients",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM samples",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT sample_type, collection_date FROM samples",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM variants",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT chromosome, position, variant_type FROM variants",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM genes",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, gene_name FROM genes",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM interpretations",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT interpretation_text FROM interpretations",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, s.sample_type FROM patients p JOIN samples s ON p.patient_id = s.patient_id",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT v.chromosome, v.position, v.variant_type, s.sample_type FROM variants v JOIN samples s ON v.sample_id = s.sample_id",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_symbol, g.gene_name, i.interpretation_text FROM genes g JOIN interpretations i ON g.gene_id = i.gene_id",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT p.first_name, p.last_name, v.chromosome, v.position, i.interpretation_text FROM patients p JOIN samples s ON p.patient_id = s.patient_id JOIN variants v ON s.sample_id = v.sample_id JOIN interpretations i ON v.variant_id = i.variant_id LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM patients WHERE age > 30 AND gender = 'Male';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT * FROM samples WHERE quantity > 100 AND collection_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT patients.first_name, samples.sample_type FROM patients JOIN samples ON patients.patient_id = samples.patient_id;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT variants.variant_type, genes.gene_name FROM variants JOIN genes ON variants.chromosome = genes.chromosome;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT patient_id, first_name, last_name, date_of_birth FROM patients WHERE age >= 40;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, gene_name FROM genes WHERE start_position < 1000 AND end_position > 500;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, interpretation_text FROM interpretations JOIN genes ON interpretations.gene_id = genes.gene_id;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_variants FROM variants;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT gene_symbol FROM genes;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT AVG(age) AS avg_age FROM patients;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(*) AS total_interpretations FROM genes JOIN interpretations ON genes.gene_id = interpretations.gene_id GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT patient_id, first_name, last_name, age FROM patients WHERE date_of_birth < '1980-01-01';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT sample_id, sample_type, collection_date FROM samples WHERE collection_date > '2021-06-01' AND quantity < 50;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, interpretation_text FROM genes JOIN interpretations ON genes.gene_id = interpretations.gene_id WHERE length(interpretation_text) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT patient_id, first_name, last_name, gender FROM patients WHERE gender = 'Female';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(*) AS total_variants FROM genes JOIN variants ON genes.gene_id = variants.variant_id GROUP BY gene_name HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT patient_id, first_name, last_name, age, gender FROM patients WHERE age BETWEEN 20 AND 30 AND gender = 'Female';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT interpretation_id, interpretation_text FROM interpretations WHERE interpretation_text LIKE '%pathogenic%';",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, AVG(start_position) AS avg_start_position FROM genes GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT interpretation_text FROM interpretations;",
  "### TABLEDATA\n\nCREATE TABLE patients (\n  patient_id INT PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  age INT,\n  gender VARCHAR(10),\n  date_of_birth DATE\n)\n\nCREATE TABLE samples (\n  sample_id INT PRIMARY KEY,\n  patient_id INT,\n  sample_type VARCHAR(50),\n  collection_date DATE,\n  quantity FLOAT,\n  CONSTRAINT fk_patient_id FOREIGN KEY (patient_id) REFERENCES patients(patient_id)\n)\n\nCREATE TABLE variants (\n  variant_id INT PRIMARY KEY,\n  sample_id INT,\n  chromosome VARCHAR(10),\n  position INT,\n  variant_type VARCHAR(50),\n  CONSTRAINT fk_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id)\n)\n\nCREATE TABLE genes (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(20),\n  gene_name VARCHAR(100),\n  chromosome VARCHAR(10),\n  start_position INT,\n  end_position INT\n)\n\nCREATE TABLE interpretations (\n  interpretation_id INT PRIMARY KEY,\n  variant_id INT,\n  gene_id INT,\n  interpretation_text TEXT,\n  CONSTRAINT fk_variant_id FOREIGN KEY (variant_id) REFERENCES variants(variant_id),\n  CONSTRAINT fk_gene_id FOREIGN KEY (gene_id) REFERENCES genes(gene_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, age FROM patients ORDER BY age DESC, last_name ASC LIMIT 5;"
]