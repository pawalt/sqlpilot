<t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>UPSERT INTO user_energy_data (id, user_id, energy_consumed, timestamp) VALUES (1, 101, 50.2, '2022-10-10 08:30:00')</stat><divider><t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>upsert into user_energy_data (id, user_id, energy_consumed, timestamp) values (1, 101, 50.2, '2022-10-10 08:30:00')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>UPSERT INTO user_energy_data (id, user_id, energy_consumed, timestamp) VALUES (1, 101, 50.2, '2022-10-10 08:30:00')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>upsert into user_energy_data (id, user_id, energy_consumed, timestamp) values (1, 101, 50.2, '2022-10-10 08:30:00')</stat><divider><t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>UPSERT INTO energy_providers (provider_id, provider_name, location) VALUES (1, 'Provider A', 'Location A')</stat><divider><t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>upsert into energy_providers (provider_id, provider_name, location) values (1, 'provider a', 'location a')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>UPSERT INTO energy_providers (provider_id, provider_name, location) VALUES (1, 'Provider A', 'Location A')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>upsert into energy_providers (provider_id, provider_name, location) values (1, 'provider a', 'location a')</stat><divider><t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>UPSERT INTO user_energy_data (id, user_id, energy_consumed, timestamp) VALUES (2, 102, 70.5, '2022-10-11 10:45:00')</stat><divider><t>CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )

CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )</t><stat>upsert into user_energy_data (id, user_id, energy_consumed, timestamp) values (2, 102, 70.5, '2022-10-11 10:45:00')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>UPSERT INTO user_energy_data (id, user_id, energy_consumed, timestamp) VALUES (2, 102, 70.5, '2022-10-11 10:45:00')</stat><divider><t>CREATE TABLE energy_providers ( provider_id INT PRIMARY KEY, provider_name VARCHAR(255), location VARCHAR(255) )

CREATE TABLE user_energy_data ( id INT PRIMARY KEY, user_id INT, energy_consumed FLOAT, timestamp TIMESTAMP )</t><stat>upsert into user_energy_data (id, user_id, energy_consumed, timestamp) values (2, 102, 70.5, '2022-10-11 10:45:00')</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_producers (id, name, location) VALUES (1, 'Solar Energy Inc.', 'California') ON CONFLICT (id) DO UPDATE SET name = 'Solar Energy Inc.', location = 'California';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_producers (id, name, location) values (1, 'solar energy inc.', 'california') on conflict (id) do update set name = 'solar energy inc.', location = 'california';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_consumers (id, name, location) VALUES (2, 'Green Power Co.', 'New York') ON CONFLICT (id) DO UPDATE SET name = 'Green Power Co.', location = 'New York';</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_consumers (id, name, location) values (2, 'green power co.', 'new york') on conflict (id) do update set name = 'green power co.', location = 'new york';</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>UPSERT INTO energy_production (id, producer_id, production_date, production_amount) VALUES (1, 1, '2022-10-20', 5000.0) ON CONFLICT (id) DO UPDATE SET producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE energy_production (
  id INT PRIMARY KEY,
  producer_id INT NOT NULL,
 production_date DATE NOT NULL,
 production_amount FLOAT NOT NULL
);


CREATE TABLE energy_consumers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);


CREATE TABLE energy_producers (
  id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location VARCHAR(100) NOT NULL
);
</t><stat>upsert into energy_production (id, producer_id, production_date, production_amount) values (1, 1, '2022-10-20', 5000.0) on conflict (id) do update set producer_id = 1, production_date = '2022-10-20', production_amount = 5000.0;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO customers (customer_id, customer_name, city, country) VALUES (1, 'John Doe', 'New York', 'USA') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', city = 'New York', country = 'USA'</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into customers (customer_id, customer_name, city, country) values (1, 'john doe', 'new york', 'usa') on duplicate key update customer_name = 'john doe', city = 'new york', country = 'usa'</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO supplies (supply_id, supply_name, description, unit_price, supplier_id) VALUES (1, 'Paper', 'A4 size paper', 1.5, 1) ON DUPLICATE KEY UPDATE supply_name = 'Paper', description = 'A4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into supplies (supply_id, supply_name, description, unit_price, supplier_id) values (1, 'paper', 'a4 size paper', 1.5, 1) on duplicate key update supply_name = 'paper', description = 'a4 size paper', unit_price = 1.5, supplier_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>UPSERT INTO products (product_id, product_name, category, price, supply_id) VALUES (1, 'Notebook', 'Stationery', 2.5, 1) ON DUPLICATE KEY UPDATE product_name = 'Notebook', category = 'Stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), quantity INT)

CREATE TABLE products (product_id INT PRIMARY KEY, product_name STRING, category STRING, price FLOAT, supply_id INT REFERENCES supplies(supply_id))

CREATE TABLE supplies (supply_id INT PRIMARY KEY, supply_name STRING, description STRING, unit_price FLOAT, supplier_id INT REFERENCES suppliers(supplier_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, city STRING, country STRING)},{</t><stat>upsert into products (product_id, product_name, category, price, supply_id) values (1, 'notebook', 'stationery', 2.5, 1) on duplicate key update product_name = 'notebook', category = 'stationery', price = 2.5, supply_id = 1</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>UPSERT INTO EnergyCompany (company_id, company_name, industry) VALUES (1, 'ABC Energy', 'Renewable Energy')</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>upsert into energycompany (company_id, company_name, industry) values (1, 'abc energy', 'renewable energy')</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>UPSERT INTO EnergyCompany (company_id, company_name, industry) VALUES (2, 'XYZ Power', 'Electric Utility')</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>upsert into energycompany (company_id, company_name, industry) values (2, 'xyz power', 'electric utility')</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>UPSERT INTO EnergyCompany (company_id, company_name, industry) VALUES (3, '123 Energy', 'Solar Power')</stat><divider><t>CREATE TABLE EnergyCompany (company_id INT PRIMARY KEY, company_name VARCHAR(255) NOT NULL, industry VARCHAR(100) NOT NULL)</t><stat>upsert into energycompany (company_id, company_name, industry) values (3, '123 energy', 'solar power')</stat>