[
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Alice', 'Bad service', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Alice', complaint_text = 'Bad service', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Bob', 'Product damaged during shipping', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Bob', complaint_text = 'Product damaged during shipping', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Charlie', 'Late delivery', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Charlie', complaint_text = 'Late delivery', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('David', 'Faulty product received', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'David', complaint_text = 'Faulty product received', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Eve', 'Wrong item delivered', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Eve', complaint_text = 'Wrong item delivered', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Frank', 'Poor customer service', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Frank', complaint_text = 'Poor customer service', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Grace', 'Defective product', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Grace', complaint_text = 'Defective product', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Henry', 'Late response from customer service', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Henry', complaint_text = 'Late response from customer service', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Ivy', 'Missing item in order', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Ivy', complaint_text = 'Missing item in order', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('John', 'Rude behavior from staff', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'John', complaint_text = 'Rude behavior from staff', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Kelly', 'Incorrect billing amount', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Kelly', complaint_text = 'Incorrect billing amount', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Leo', 'Order mix-up', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Leo', complaint_text = 'Order mix-up', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Maria', 'Damaged packaging', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Maria', complaint_text = 'Damaged packaging', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Nathan', 'Late delivery', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Nathan', complaint_text = 'Late delivery', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Olivia', 'Wrong size received', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Olivia', complaint_text = 'Wrong size received', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Peter', 'Product not as described', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Peter', complaint_text = 'Product not as described', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Queenie', 'Incorrect color in order', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Queenie', complaint_text = 'Incorrect color in order', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Richard', 'Delayed refund process', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Richard', complaint_text = 'Delayed refund process', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Sarah', 'Poor quality product', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Sarah', complaint_text = 'Poor quality product', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Tom', 'Missing parts in order', 'Pending', NULL) ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Tom', complaint_text = 'Missing parts in order', status = 'Pending', resolved_date = NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('John Doe', 'Broken product received', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Broken product received', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Alice Smith', 'Incorrect item delivered', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Incorrect item delivered', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Bob Johnson', 'Delayed shipment', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Delayed shipment', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Emily Brown', 'Defective product received', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Defective product received', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Sarah Wilson', 'Poor customer service', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Poor customer service', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Michael Anderson', 'Incorrect billing', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Incorrect billing', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Laura Garcia', 'Missing items in order', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Missing items in order', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Steven Martinez', 'Damaged package', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Damaged package', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Olivia Lewis', 'Late delivery', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Late delivery', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Daniel Brown', 'Received wrong size', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Received wrong size', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Jennifer Thompson', 'Product not as described', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Product not as described', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Kevin Clark', 'Faulty item', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Faulty item', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Sophia Rodriguez', 'Unresponsive customer support', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Unresponsive customer support', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Matthew Lee', 'Billing discrepancy', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Billing discrepancy', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Ava Perez', 'Missing refund', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Missing refund', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Nathan Scott', 'Poor product quality', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Poor product quality', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Hannah Ward', 'No response from support', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'No response from support', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Ethan Foster', 'Delayed refund processing', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Delayed refund processing', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Madison Phillips', 'Wrong color received', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Wrong color received', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (customer_name, complaint_text, status, resolved_date) VALUES ('Logan Wright', 'Received damaged goods', 'Pending', NULL) ON CONFLICT (customer_name) DO UPDATE SET complaint_text = 'Received damaged goods', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('f8a30b0d-30b3-4a23-b2a0-15ccee391c84', 'eac1bde8-28c2-4530-a1d0-429d44a9cf45', 'Product not delivered') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('d8a3354a-7c1a-48a0-958e-04a5f66d66a3', 'b4b597f0-0df1-494e-98f3-0b3d440045d6', 'Wrong item received') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('1f06debe-4f79-4bc9-bbc8-c029a03c8c83', '98d29b34-f362-4bb1-995c-4e8981a60e0a', 'Defective product') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('aa41541c-65c5-41ce-91e1-8c77e0894e13', '3bb777a8-73c3-4a10-87b3-a7bea74ccb9c', 'Late delivery') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('2ce9fe2b-c3ca-4124-a4b4-03d752f64647', '14b24e64-281e-4832-8936-17d475c0af60', 'Poor customer service') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('7c751620-46c2-4586-b8ff-8185a7a0fd03', 'fe55b2e2-3ba6-4b50-b58b-0bc6a72db0f1', 'Billing error') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('c241d788-785b-4f1c-8989-e7c12b5a2a62', 'b21c4449-1a59-47fc-b58d-2157f6c7d62d', 'Package damaged') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('e41170ce-cd53-43d8-88db-33b48d9eb7a7', 'f8a30b0d-30b3-4a23-b2a0-15ccee391c84', 'Late refund') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('90b9bf7a-ef79-499b-b47f-30d2da43c2be', 'aa41541c-65c5-41ce-91e1-8c77e0894e13', 'Missing parts') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('4237b8a9-724e-49b5-ae3f-9a160346bd1b', '7c751620-46c2-4586-b8ff-8185a7a0fd03', 'Wrong billing amount') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('8e3b1882-6253-4d2f-8aa6-16da2469ec06', '1f06debe-4f79-4bc9-bbc8-c029a03c8c83', 'Poor quality product') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('f91bd29b-d479-4eb1-98c9-578346ec3130', '90b9bf7a-ef79-499b-b47f-30d2da43c2be', 'Damaged packaging') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('ff25003e-87cf-45b8-8946-d831e90f9461', '8e3b1882-6253-4d2f-8aa6-16da2469ec06', 'Incomplete order') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('24cae154-68e5-49ff-9efa-f7389c040c47', '2ce9fe2b-c3ca-4124-a4b4-03d752f64647', 'No response from support') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('de593af2-291d-4106-9c20-2d336d1a27cf', '24cae154-68e5-49ff-9efa-f7389c040c47', 'Incorrect product shipped') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('3bd2e97c-c9c9-4a75-bf1d-d78d00b89df3', 'de593af2-291d-4106-9c20-2d336d1a27cf', 'Late response from customer service') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('a79d2283-3f94-43b2-bbcc-dbce9f4888bf', '3bd2e97c-c9c9-4a75-bf1d-d78d00b89df3', 'Wrong size product') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('fe590ec2-eaac-40e7-b10f-75a99737ff88', 'a79d2283-3f94-43b2-bbcc-dbce9f4888bf', 'Missing accessories') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text) VALUES ('ecbbe9dd-205e-4337-80e8-d9db4116b146', 'fe590ec2-eaac-40e7-b10f-75a99737ff88', 'Late delivery') ON CONFLICT (complaint_id) DO UPDATE SET status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c1', 'cus1', 'Poor service', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus1', complaint_text = 'Poor service', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c2', 'cus2', 'Late delivery', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus2', complaint_text = 'Late delivery', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c3', 'cus3', 'Wrong item received', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus3', complaint_text = 'Wrong item received', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c4', 'cus4', 'Damaged product', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus4', complaint_text = 'Damaged product', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c5', 'cus5', 'Billing issue', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus5', complaint_text = 'Billing issue', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c6', 'cus1', 'Product not as described', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus1', complaint_text = 'Product not as described', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c7', 'cus2', 'Poor customer service', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus2', complaint_text = 'Poor customer service', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c8', 'cus3', 'Delivery not received', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus3', complaint_text = 'Delivery not received', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c9', 'cus4', 'Defective product', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus4', complaint_text = 'Defective product', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c10', 'cus5', 'Refund not processed', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus5', complaint_text = 'Refund not processed', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c11', 'cus1', 'Order canceled without notice', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus1', complaint_text = 'Order canceled without notice', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c12', 'cus2', 'Technical issue', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus2', complaint_text = 'Technical issue', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c13', 'cus3', 'Late response from customer service', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus3', complaint_text = 'Late response from customer service', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c14', 'cus4', 'Missing item in order', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus4', complaint_text = 'Missing item in order', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c15', 'cus5', 'Faulty product', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus5', complaint_text = 'Faulty product', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c16', 'cus1', 'Package not delivered', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus1', complaint_text = 'Package not delivered', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c17', 'cus2', 'Incorrect billing amount', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus2', complaint_text = 'Incorrect billing amount', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c18', 'cus3', 'Poor product quality', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus3', complaint_text = 'Poor product quality', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c19', 'cus4', 'Unresponsive customer support', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus4', complaint_text = 'Unresponsive customer support', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status, timestamp) VALUES ('c20', 'cus5', 'Exchange request rejected', 'Open', NOW()) ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 'cus5', complaint_text = 'Exchange request rejected', status = 'Open', timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (1, 101, 'Delayed delivery', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 101, complaint_text = 'Delayed delivery', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (2, 102, 'Product damaged during shipping', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 102, complaint_text = 'Product damaged during shipping', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (3, 103, 'Incorrect item received', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 103, complaint_text = 'Incorrect item received', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (4, 104, 'Customer service issue', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 104, complaint_text = 'Customer service issue', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (5, 105, 'Defective product received', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 105, complaint_text = 'Defective product received', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (6, 106, 'Billing error', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 106, complaint_text = 'Billing error', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (7, 107, 'Late response from customer service', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 107, complaint_text = 'Late response from customer service', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (8, 108, 'Product missing from order', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 108, complaint_text = 'Product missing from order', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (9, 109, 'Refund not processed', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 109, complaint_text = 'Refund not processed', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (10, 110, 'Wrong size received', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 110, complaint_text = 'Wrong size received', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (11, 111, 'Item out of stock after purchase', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 111, complaint_text = 'Item out of stock after purchase', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (12, 112, 'Poor product quality', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 112, complaint_text = 'Poor product quality', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (13, 113, 'Delayed refund processing', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 113, complaint_text = 'Delayed refund processing', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (14, 114, 'Incorrect billing amount', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 114, complaint_text = 'Incorrect billing amount', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (15, 115, 'Late delivery', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 115, complaint_text = 'Late delivery', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (16, 116, 'Package lost in transit', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 116, complaint_text = 'Package lost in transit', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (17, 117, 'Unresponsive customer service', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 117, complaint_text = 'Unresponsive customer service', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (18, 118, 'Wrong item shipped', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 118, complaint_text = 'Wrong item shipped', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (19, 119, 'Damaged packaging', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 119, complaint_text = 'Damaged packaging', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (20, 120, 'Incorrect delivery address', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 120, complaint_text = 'Incorrect delivery address', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (1, 101, 'Complaint 1', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 101, status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (2, 102, 'Complaint 2', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 102, status = 'In Progress';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (3, 103, 'Complaint 3', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 103, status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (4, 104, 'Complaint 4', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 104, status = 'In Progress';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO customer_complaints (complaint_id, customer_id, complaint_text, status) VALUES (5, 105, 'Complaint 5', 'Pending') ON DUPLICATE KEY UPDATE customer_id = 105, status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints_history (complaint_id, resolved_by_id, resolved_date, resolution_details) VALUES (1, 201, '2022-01-15', 'Issue resolved successfully') ON DUPLICATE KEY UPDATE resolved_by_id = 201, resolved_date = '2022-01-15', resolution_details = 'Issue resolved successfully';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints_history (complaint_id, resolved_by_id, resolved_date, resolution_details) VALUES (2, 202, '2022-01-16', 'Resolution in progress') ON DUPLICATE KEY UPDATE resolved_by_id = 202, resolved_date = '2022-01-16', resolution_details = 'Resolution in progress';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints_history (complaint_id, resolved_by_id, resolved_date, resolution_details) VALUES (3, 203, '2022-01-17', 'Issue resolved successfully') ON DUPLICATE KEY UPDATE resolved_by_id = 203, resolved_date = '2022-01-17', resolution_details = 'Issue resolved successfully';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints_history (complaint_id, resolved_by_id, resolved_date, resolution_details) VALUES (4, 204, '2022-01-18', 'Resolution in progress') ON DUPLICATE KEY UPDATE resolved_by_id = 204, resolved_date = '2022-01-18', resolution_details = 'Resolution in progress';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints_history (complaint_id, resolved_by_id, resolved_date, resolution_details) VALUES (5, 205, '2022-01-19', 'Issue resolved successfully') ON DUPLICATE KEY UPDATE resolved_by_id = 205, resolved_date = '2022-01-19', resolution_details = 'Issue resolved successfully';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO employees (emp_id, emp_name, email) VALUES (201, 'Employee 1', 'employee1@example.com') ON DUPLICATE KEY UPDATE emp_name = 'Employee 1', email = 'employee1@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO employees (emp_id, emp_name, email) VALUES (202, 'Employee 2', 'employee2@example.com') ON DUPLICATE KEY UPDATE emp_name = 'Employee 2', email = 'employee2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO employees (emp_id, emp_name, email) VALUES (203, 'Employee 3', 'employee3@example.com') ON DUPLICATE KEY UPDATE emp_name = 'Employee 3', email = 'employee3@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO employees (emp_id, emp_name, email) VALUES (204, 'Employee 4', 'employee4@example.com') ON DUPLICATE KEY UPDATE emp_name = 'Employee 4', email = 'employee4@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO employees (emp_id, emp_name, email) VALUES (205, 'Employee 5', 'employee5@example.com') ON DUPLICATE KEY UPDATE emp_name = 'Employee 5', email = 'employee5@example.com';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (1, 'Alice', 'Broken product', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (1, 1, 'Replaced the product', 'Bob', '2022-05-15') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, resolution_text = EXCLUDED.resolution_text, resolved_by = EXCLUDED.resolved_by, resolution_date = EXCLUDED.resolution_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (1, 'Product Quality') ON CONFLICT (category_id) DO UPDATE SET category_name = EXCLUDED.category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (1, 1, 1) ON CONFLICT (mapping_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, category_id = EXCLUDED.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (2, 'Bob', 'Delayed delivery', 'Under Investigation') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (2, 2, 'Compensated the customer', 'Emma', '2022-05-16') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, resolution_text = EXCLUDED.resolution_text, resolved_by = EXCLUDED.resolved_by, resolution_date = EXCLUDED.resolution_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (2, 'Delivery Issues') ON CONFLICT (category_id) DO UPDATE SET category_name = EXCLUDED.category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (2, 2, 2) ON CONFLICT (mapping_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, category_id = EXCLUDED.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (3, 'Charlie', 'Incorrect billing', 'Resolved') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (3, 3, 'Adjusted the billing amount', 'David', '2022-05-17') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, resolution_text = EXCLUDED.resolution_text, resolved_by = EXCLUDED.resolved_by, resolution_date = EXCLUDED.resolution_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (3, 'Billing Discrepancies') ON CONFLICT (category_id) DO UPDATE SET category_name = EXCLUDED.category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (3, 3, 3) ON CONFLICT (mapping_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, category_id = EXCLUDED.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (4, 'David', 'Poor customer service', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (4, 4, 'Improved customer service training', 'Eve', '2022-05-18') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, resolution_text = EXCLUDED.resolution_text, resolved_by = EXCLUDED.resolved_by, resolution_date = EXCLUDED.resolution_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (4, 'Service Experience') ON CONFLICT (category_id) DO UPDATE SET category_name = EXCLUDED.category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (4, 4, 4) ON CONFLICT (mapping_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, category_id = EXCLUDED.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (5, 'Eve', 'Defective product', 'Resolved') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (5, 5, 'Replaced the defective product', 'Frank', '2022-05-19') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, resolution_text = EXCLUDED.resolution_text, resolved_by = EXCLUDED.resolved_by, resolution_date = EXCLUDED.resolution_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (5, 'Product Defects') ON CONFLICT (category_id) DO UPDATE SET category_name = EXCLUDED.category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (5, 5, 5) ON CONFLICT (mapping_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, category_id = EXCLUDED.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (1, 'John Doe', 'Slow internet connection', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'John Smith', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (1, 1, 'Resolved by resetting the router', 'Tech Support', '2022-01-15') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (1, 'Internet Connectivity') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Network Issues';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (1, 1, 1) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (2, 'Alice Johnson', 'Billing discrepancy', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Alice Smith', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (2, 2, 'Resolved by adjusting the bill', 'Finance Department', '2022-01-20') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (2, 'Billing Disputes') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Billing Issues';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (2, 2, 2) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (3, 'Emma Brown', 'Product quality issue', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Emma White', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (3, 3, 'Resolved by providing a replacement', 'Quality Control', '2022-01-25') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (3, 'Product Quality') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Quality Concerns';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (3, 3, 3) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (4, 'Mike Davis', 'Service outage', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Mike Wilson', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (4, 4, 'Resolved by restoring service', 'Service Operations', '2022-01-30') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (4, 'Service Disruptions') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Service Interruptions';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (4, 4, 4) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (5, 'Sarah Wilson', 'Late delivery', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Sarah Johnson', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (5, 5, 'Resolved by expedited shipping', 'Logistics Department', '2022-02-05') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (5, 'Delivery Issues') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Shipping Delays';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (5, 5, 5) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO CustomerComplaints (complaint_id, customer_name, complaint_text, status) VALUES (6, 'Chris Roberts', 'Faulty product received', 'Open') ON CONFLICT (complaint_id) DO UPDATE SET customer_name = 'Chris Smith', status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintResolution (resolution_id, complaint_id, resolution_text, resolved_by, resolution_date) VALUES (6, 6, 'Resolved by sending a replacement', 'Quality Control', '2022-02-10') ON CONFLICT (resolution_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintCategories (category_id, category_name) VALUES (6, 'Product Defects') ON CONFLICT (category_id) DO UPDATE SET category_name = 'Defective Products';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplaintMapping (mapping_id, complaint_id, category_id) VALUES (6, 6, 6) ON CONFLICT (mapping_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (1, 101, 'Issue with product delivery', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 101, complaint_text = 'Issue with product delivery', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (2, 102, 'Billing discrepancy', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 102, complaint_text = 'Billing discrepancy', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (3, 103, 'Faulty product received', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 103, complaint_text = 'Faulty product received', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (4, 104, 'Poor customer service', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 104, complaint_text = 'Poor customer service', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (5, 105, 'Wrong item shipped', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 105, complaint_text = 'Wrong item shipped', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (6, 106, 'Late delivery', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 106, complaint_text = 'Late delivery', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (7, 107, 'Unresponsive support team', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 107, complaint_text = 'Unresponsive support team', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (8, 108, 'Defective product', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 108, complaint_text = 'Defective product', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (9, 109, 'Incorrect billing', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 109, complaint_text = 'Incorrect billing', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (10, 110, 'Damaged shipment', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 110, complaint_text = 'Damaged shipment', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (11, 111, 'Installation issues', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 111, complaint_text = 'Installation issues', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (12, 112, 'Product not as described', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 112, complaint_text = 'Product not as described', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (13, 113, 'Poor quality', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 113, complaint_text = 'Poor quality', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (14, 114, 'Delayed response', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 114, complaint_text = 'Delayed response', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (15, 115, 'Missing parts', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 115, complaint_text = 'Missing parts', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (16, 116, 'Shipping error', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 116, complaint_text = 'Shipping error', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (17, 117, 'Technical difficulties', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 117, complaint_text = 'Technical difficulties', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (18, 118, 'Wrong color', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 118, complaint_text = 'Wrong color', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (19, 119, 'Late response', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 119, complaint_text = 'Late response', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nUPSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (20, 120, 'Damaged product', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = 120, complaint_text = 'Damaged product', status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (1, 101, 'Slow internet', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, customer_email) VALUES (101, 'John Doe', 'john.doe@example.com') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, customer_email = EXCLUDED.customer_email;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO resolutions (resolution_id, complaint_id, date_resolved, resolved_by) VALUES (1, 1, CURRENT_TIMESTAMP, 'Jane Smith') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, date_resolved = EXCLUDED.date_resolved, resolved_by = EXCLUDED.resolved_by;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO employees (emp_id, emp_name, emp_department) VALUES (1, 'Alice Johnson', 'IT') ON CONFLICT (emp_id) DO UPDATE SET emp_name = EXCLUDED.emp_name, emp_department = EXCLUDED.emp_department;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO departments (department_id, department_name, department_manager) VALUES (1, 'IT', 'Bob Smith') ON CONFLICT (department_id) DO UPDATE SET department_name = EXCLUDED.department_name, department_manager = EXCLUDED.department_manager;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (2, 102, 'Billing issue', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, customer_email) VALUES (102, 'Jane Smith', 'jane.smith@example.com') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, customer_email = EXCLUDED.customer_email;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO resolutions (resolution_id, complaint_id, date_resolved, resolved_by) VALUES (2, 2, CURRENT_TIMESTAMP, 'John Doe') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, date_resolved = EXCLUDED.date_resolved, resolved_by = EXCLUDED.resolved_by;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO employees (emp_id, emp_name, emp_department) VALUES (2, 'Bob Smith', 'HR') ON CONFLICT (emp_id) DO UPDATE SET emp_name = EXCLUDED.emp_name, emp_department = EXCLUDED.emp_department;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO departments (department_id, department_name, department_manager) VALUES (2, 'HR', 'Alice Johnson') ON CONFLICT (department_id) DO UPDATE SET department_name = EXCLUDED.department_name, department_manager = EXCLUDED.department_manager;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (3, 103, 'Product not working', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, customer_email) VALUES (103, 'Alice Johnson', 'alice.johnson@example.com') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, customer_email = EXCLUDED.customer_email;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO resolutions (resolution_id, complaint_id, date_resolved, resolved_by) VALUES (3, 3, CURRENT_TIMESTAMP, 'Bob Smith') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, date_resolved = EXCLUDED.date_resolved, resolved_by = EXCLUDED.resolved_by;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO employees (emp_id, emp_name, emp_department) VALUES (3, 'Eve White', 'Finance') ON CONFLICT (emp_id) DO UPDATE SET emp_name = EXCLUDED.emp_name, emp_department = EXCLUDED.emp_department;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO departments (department_id, department_name, department_manager) VALUES (3, 'Finance', 'Jane Smith') ON CONFLICT (department_id) DO UPDATE SET department_name = EXCLUDED.department_name, department_manager = EXCLUDED.department_manager;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO complaints (complaint_id, customer_id, complaint_text, status) VALUES (4, 104, 'Late delivery', 'Pending') ON CONFLICT (complaint_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, complaint_text = EXCLUDED.complaint_text, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, customer_email) VALUES (104, 'Eve White', 'eve.white@example.com') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, customer_email = EXCLUDED.customer_email;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO resolutions (resolution_id, complaint_id, date_resolved, resolved_by) VALUES (4, 4, CURRENT_TIMESTAMP, 'Alice Johnson') ON CONFLICT (resolution_id) DO UPDATE SET complaint_id = EXCLUDED.complaint_id, date_resolved = EXCLUDED.date_resolved, resolved_by = EXCLUDED.resolved_by;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO employees (emp_id, emp_name, emp_department) VALUES (4, 'Tom Brown', 'IT') ON CONFLICT (emp_id) DO UPDATE SET emp_name = EXCLUDED.emp_name, emp_department = EXCLUDED.emp_department;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nINSERT INTO departments (department_id, department_name, department_manager) VALUES (4, 'IT', 'John Doe') ON CONFLICT (department_id) DO UPDATE SET department_name = EXCLUDED.department_name, department_manager = EXCLUDED.department_manager;"
]