[
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT complaint_id, customer_name FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE status='Pending'",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT complaint_id, customer_name FROM CustomerComplaints WHERE status='Pending'",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE resolved_date IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE customer_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints ORDER BY resolved_date DESC",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(complaint_id) FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(complaint_id) FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT MIN(complaint_id) FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM CustomerComplaints",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints OFFSET 5",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE complaint_id BETWEEN 10 AND 20",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE customer_name IN ('Alice', 'Bob', 'Charlie')",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE complaint_text ILIKE '%issue%'",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) FROM CustomerComplaints GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, AVG(complaint_id) FROM CustomerComplaints GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, status, COUNT(*) FROM CustomerComplaints GROUP BY customer_name, status",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE resolved_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE customer_name LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(resolved_date) AS latest_resolved_date FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_complaints FROM CustomerComplaints WHERE resolved_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(complaint_id) AS total_complaints FROM CustomerComplaints GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, AVG(LENGTH(complaint_text)) AS avg_complaint_length FROM CustomerComplaints GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text, resolved_date FROM CustomerComplaints WHERE resolved_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, MAX(resolved_date) AS latest_resolved_date FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolved_complaints FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, MIN(resolved_date) AS first_resolved_date FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(LENGTH(complaint_text)) AS avg_complaint_length FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_complaints FROM CustomerComplaints WHERE status='Pending' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolved_complaints FROM CustomerComplaints WHERE status='Resolved' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, MIN(resolved_date) AS first_resolved_date FROM CustomerComplaints WHERE status='Resolved' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, MAX(resolved_date) AS latest_resolved_date FROM CustomerComplaints WHERE status='Resolved' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, AVG(LENGTH(complaint_text)) AS avg_complaint_length FROM CustomerComplaints WHERE status='Resolved' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolved_complaints FROM CustomerComplaints WHERE status='Resolved' AND resolved_date >= '2022-01-01' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n  complaint_id SERIAL PRIMARY KEY,\n  customer_name VARCHAR(50),\n  complaint_text TEXT,\n  status VARCHAR(20) DEFAULT 'Pending',\n  resolved_date DATE\n)\n\n### STATEMENT\n\nSELECT customer_name, MIN(resolved_date) AS first_resolved_date FROM CustomerComplaints WHERE status='Resolved' AND resolved_date >= '2022-01-01' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT complaint_text, status FROM complaints WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(timestamp) FROM complaints GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT complaint_text, status FROM complaints ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE complaint_id = 'some_uuid';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT resolution_text, resolver_id FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions WHERE resolution_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT complaint_text, status FROM complaints WHERE status = 'Open' AND timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) FROM complaints GROUP BY customer_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id, timestamp FROM complaints WHERE status = 'Open' ORDER BY timestamp ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(timestamp) - MIN(timestamp) AS time_difference FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT status) FROM complaints GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(timestamp) AS avg_time FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) FROM complaints WHERE status = 'Open' GROUP BY customer_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT complaint_text, resolution_text FROM complaints JOIN resolutions ON complaints.complaint_id = resolutions.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(EXTRACT(EPOCH FROM timestamp)) AS avg_timestamp FROM complaints GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_complaints, AVG(CHAR_LENGTH(complaint_text)) AS avg_length FROM complaints GROUP BY customer_id ORDER BY total_complaints DESC, avg_length DESC;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.complaint_text, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.complaint_id, c.complaint_text, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id GROUP BY c.complaint_id, c.complaint_text;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, r.resolver_id FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.complaint_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.status, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE r.resolution_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.complaint_text, r.resolver_id, r.resolution_text FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.customer_id = '123e4567-e89b-12d3-a456-426614174000' AND c.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.timestamp >= '2022-01-01' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE r.resolution_timestamp >= '2022-01-01' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.customer_id = '123e4567-e89b-12d3-a456-426614174000' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(r.resolution_id) AS resolution_count FROM complaints c LEFT JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.customer_id = '123e4567-e89b-12d3-a456-426614174000' AND c.status = 'Open' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, AVG(r.resolution_timestamp - c.timestamp) AS avg_resolution_time FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, AVG(r.resolution_timestamp - c.timestamp) AS avg_resolution_time FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.customer_id = '123e4567-e89b-12d3-a456-426614174000' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, AVG(r.resolution_timestamp - c.timestamp) AS avg_resolution_time FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id WHERE c.timestamp >= '2022-01-01' GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, MIN(r.resolution_timestamp - c.timestamp) AS min_resolution_time FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n    complaint_id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    complaint_text TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'Open',\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resolutions (\n    resolution_id UUID PRIMARY KEY,\n    complaint_id UUID NOT NULL,\n    resolver_id UUID NOT NULL,\n    resolution_text TEXT NOT NULL,\n    resolution_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, MAX(r.resolution_timestamp - c.timestamp) AS max_resolution_time FROM complaints c INNER JOIN resolutions r ON c.complaint_id = r.complaint_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_complaints;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id FROM customer_complaints;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text FROM customer_complaints;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM complaints_history;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, resolved_by_id FROM complaints_history;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT resolved_date, resolution_details FROM complaints_history;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, emp_name FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, email FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id, complaint_text FROM customer_complaints WHERE status = 'resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text, resolved_date FROM customer_complaints JOIN complaints_history ON customer_complaints.complaint_id = complaints_history.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, emp_name, email FROM employees WHERE emp_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text, resolved_by_id, resolved_date FROM customer_complaints JOIN complaints_history ON customer_complaints.complaint_id = complaints_history.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id, complaint_text, status FROM customer_complaints WHERE status = 'open';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, emp_name FROM employees WHERE emp_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, emp_name FROM employees WHERE email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id, complaint_text, status FROM customer_complaints WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text, resolved_by_id, resolved_date, resolution_details FROM customer_complaints JOIN complaints_history ON customer_complaints.complaint_id = complaints_history.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_complaints ORDER BY complaint_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM employees WHERE emp_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_id, emp_name, email FROM employees ORDER BY emp_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_complaints JOIN complaints_history ON customer_complaints.complaint_id = complaints_history.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(complaint_id) FROM customer_complaints GROUP BY customer_id HAVING COUNT(complaint_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, email FROM employees WHERE emp_name LIKE '%A%' AND email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_text, status FROM customer_complaints WHERE status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM complaints_history WHERE resolved_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_complaints WHERE complaint_text LIKE '%refund%' OR complaint_text LIKE '%exchange%';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, COUNT(complaint_id) AS resolved_complaints FROM employees JOIN complaints_history ON employees.emp_id = complaints_history.resolved_by_id GROUP BY emp_name;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(complaint_id) AS total_complaints FROM customer_complaints GROUP BY customer_id ORDER BY total_complaints DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, email FROM employees WHERE emp_id IN (SELECT DISTINCT resolved_by_id FROM complaints_history);",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(complaint_id) AS total_complaints, AVG(LENGTH(complaint_text)) AS avg_complaint_length FROM customer_complaints GROUP BY customer_id HAVING total_complaints > 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_complaints WHERE status NOT IN ('Resolved', 'Closed');",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, COUNT(complaint_id) AS total_resolved_complaints FROM employees JOIN complaints_history ON employees.emp_id = complaints_history.resolved_by_id WHERE resolved_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY emp_name;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, email FROM employees WHERE emp_name LIKE '%S%' OR email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(complaint_id) AS total_complaints FROM customer_complaints WHERE complaint_text LIKE '%poor service%' GROUP BY customer_id HAVING total_complaints > 0;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, resolution_details FROM complaints_history WHERE resolution_details IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, email FROM employees WHERE emp_id NOT IN (SELECT resolved_by_id FROM complaints_history);",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, COUNT(complaint_id) AS total_resolved_complaints FROM employees JOIN complaints_history ON employees.emp_id = complaints_history.resolved_by_id WHERE resolved_date < '2022-01-01' GROUP BY emp_name;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, complaint_text, status FROM customer_complaints WHERE LENGTH(complaint_text) > 100;",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT DISTINCT emp_name FROM employees WHERE emp_name IN (SELECT emp_name FROM employees GROUP BY emp_name HAVING COUNT(emp_id) > 1);",
  "### TABLEDATA\n\nCREATE TABLE customer_complaints (\n\tcomplaint_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50)\n);\n\n\nCREATE TABLE complaints_history (\n\tcomplaint_id INT,\n\tresolved_by_id INT,\n\tresolved_date DATE,\n\tresolution_details TEXT,\n\tFOREIGN KEY (complaint_id) REFERENCES customer_complaints(complaint_id)\n);\n\n\nCREATE TABLE employees (\n\temp_id INT PRIMARY KEY,\n\temp_name VARCHAR(50),\n\temail VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(complaint_id) AS total_complaints FROM customer_complaints WHERE customer_id NOT IN (SELECT customer_id FROM customer_complaints WHERE status = 'Resolved') GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text FROM CustomerComplaints WHERE status='Open';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT resolution_id, resolution_text, resolved_by, resolution_date FROM ComplaintResolution;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT resolution_text, resolved_by FROM ComplaintResolution WHERE resolution_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM ComplaintCategories;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, category_id FROM ComplaintMapping WHERE category_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, category_id FROM ComplaintMapping WHERE complaint_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text, status FROM CustomerComplaints WHERE status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text, status FROM CustomerComplaints WHERE status='Closed';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, complaint_text FROM CustomerComplaints WHERE customer_name='Alice';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE customer_name='Bob';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, category_id FROM ComplaintMapping WHERE category_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, category_id FROM ComplaintMapping WHERE category_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text, status FROM CustomerComplaints WHERE status='Open';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text FROM CustomerComplaints WHERE status='Resolved';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text FROM CustomerComplaints WHERE customer_name='Charlie';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT resolution_id, resolution_text, resolved_by, resolution_date FROM ComplaintResolution WHERE resolved_by='Admin';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_name, complaint_text, status FROM CustomerComplaints WHERE customer_name='David';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerComplaints WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE complaint_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, resolution_text, resolved_by FROM CustomerComplaints JOIN ComplaintResolution ON CustomerComplaints.complaint_id = ComplaintResolution.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT CustomerComplaints.customer_name, ComplaintResolution.resolution_text, ComplaintCategories.category_name FROM CustomerComplaints JOIN ComplaintResolution ON CustomerComplaints.complaint_id = ComplaintResolution.complaint_id JOIN ComplaintMapping ON CustomerComplaints.complaint_id = ComplaintMapping.complaint_id JOIN ComplaintCategories ON ComplaintMapping.category_id = ComplaintCategories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE LENGTH(complaint_text) > 100;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_complaints FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_complaints FROM CustomerComplaints GROUP BY customer_name HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(LENGTH(complaint_text)) AS avg_text_length FROM CustomerComplaints GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, resolution_text FROM CustomerComplaints JOIN ComplaintResolution ON CustomerComplaints.complaint_id = ComplaintResolution.complaint_id WHERE ComplaintResolution.resolution_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM CustomerComplaints;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, category_name FROM CustomerComplaints JOIN ComplaintMapping ON CustomerComplaints.complaint_id = ComplaintMapping.complaint_id JOIN ComplaintCategories ON ComplaintMapping.category_id = ComplaintCategories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE status = 'Open' ORDER BY complaint_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE complaint_id IN (SELECT complaint_id FROM ComplaintResolution WHERE resolved_by = 'John Doe');",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, complaint_text FROM CustomerComplaints WHERE complaint_id NOT IN (SELECT complaint_id FROM ComplaintResolution);",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolutions FROM CustomerComplaints JOIN ComplaintResolution ON CustomerComplaints.complaint_id = ComplaintResolution.complaint_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(LENGTH(complaint_text)) AS max_text_length FROM CustomerComplaints GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(LENGTH(complaint_text)) AS avg_text_length FROM CustomerComplaints GROUP BY customer_name HAVING AVG(LENGTH(complaint_text)) > 150;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_categories FROM CustomerComplaints JOIN ComplaintMapping ON CustomerComplaints.complaint_id = ComplaintMapping.complaint_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(*) AS total_complaints FROM ComplaintCategories JOIN ComplaintMapping ON ComplaintCategories.category_id = ComplaintMapping.category_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerComplaints (\n    complaint_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    complaint_text TEXT,\n    status VARCHAR(20)\n);\n\nCREATE TABLE ComplaintResolution (\n    resolution_id INT PRIMARY KEY,\n    complaint_id INT,\n    resolution_text TEXT,\n    resolved_by VARCHAR(50),\n    resolution_date DATE,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id)\n);\n\nCREATE TABLE ComplaintCategories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(50)\n);\n\nCREATE TABLE ComplaintMapping (\n    mapping_id INT PRIMARY KEY,\n    complaint_id INT,\n    category_id INT,\n    FOREIGN KEY (complaint_id) REFERENCES CustomerComplaints(complaint_id),\n    FOREIGN KEY (category_id) REFERENCES ComplaintCategories(category_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolutions FROM CustomerComplaints LEFT JOIN ComplaintResolution ON CustomerComplaints.complaint_id = ComplaintResolution.complaint_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, customer_id, complaint_text, status FROM complaints;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaint_id, date_resolved, resolved_by FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, emp_department FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT department_name, department_manager FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, cm.complaint_text FROM customers c JOIN complaints cm ON c.customer_id = cm.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT cm.complaint_id, cm.status, r.date_resolved, r.resolved_by FROM complaints cm LEFT JOIN resolutions r ON cm.complaint_id = r.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT e.emp_name, e.emp_department, d.department_name FROM employees e JOIN departments d ON e.emp_department = d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, d.department_name FROM customers c JOIN employees e ON c.customer_name = e.emp_name JOIN departments d ON e.emp_department = d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT cm.complaint_id, c.customer_name, d.department_name FROM complaints cm JOIN customers c ON cm.customer_id = c.customer_id JOIN employees e ON c.customer_name = e.emp_name JOIN departments d ON e.emp_department = d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions WHERE date_resolved > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions WHERE resolved_by = 'John';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, COUNT(cm.complaint_id) AS total_complaints FROM customers c LEFT JOIN complaints cm ON c.customer_id = cm.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT d.department_name, COUNT(e.emp_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_name = e.emp_department GROUP BY d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT d.department_name, AVG(CAST(cm.complaint_id AS FLOAT)) AS avg_complaint_id FROM departments d LEFT JOIN employees e ON d.department_name = e.emp_department LEFT JOIN customers c ON e.emp_name = c.customer_name LEFT JOIN complaints cm ON c.customer_id = cm.customer_id GROUP BY d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT d.department_name, MAX(e.emp_id) AS max_emp_id FROM departments d LEFT JOIN employees e ON d.department_name = e.emp_department GROUP BY d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM complaints WHERE status = 'resolved';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id IN (SELECT customer_id FROM complaints WHERE status = 'pending');",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaints.complaint_id, complaints.complaint_text, customers.customer_name FROM complaints JOIN customers ON complaints.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, emp_department FROM employees WHERE emp_department = 'Customer Service';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, department_name FROM customers JOIN employees ON customers.customer_name = employees.emp_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaints.complaint_id, complaints.complaint_text, resolutions.date_resolved, resolutions.resolved_by FROM complaints JOIN resolutions ON complaints.complaint_id = resolutions.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, department_name FROM customers JOIN employees ON customers.customer_name = employees.emp_name WHERE employees.emp_department = 'Customer Service';",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, department_name FROM customers LEFT JOIN employees ON customers.customer_name = employees.emp_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, department_name FROM employees LEFT JOIN customers ON employees.emp_name = customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT department_name, emp_name FROM departments RIGHT JOIN employees ON departments.department_manager = employees.emp_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT department_name, customer_name FROM departments RIGHT JOIN customers ON departments.department_manager = customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, customer_name FROM employees CROSS JOIN customers;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT emp_name, COUNT(complaint_id) AS total_complaints FROM employees LEFT JOIN complaints ON employees.emp_name = complaints.customer_id GROUP BY emp_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT e.emp_name, d.department_name FROM employees e JOIN departments d ON e.emp_department = d.department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(complaint_id) AS total_complaints FROM customers LEFT JOIN complaints ON customers.customer_id = complaints.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT department_name, COUNT(complaint_id) AS total_complaints FROM departments LEFT JOIN employees ON departments.department_manager = employees.emp_name LEFT JOIN complaints ON employees.emp_name = complaints.customer_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, resolution_id FROM customers INNER JOIN complaints ON customers.customer_id = complaints.customer_id INNER JOIN resolutions ON complaints.complaint_id = resolutions.complaint_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(resolutions.resolved_by) AS avg_resolution_time FROM customers INNER JOIN complaints ON customers.customer_id = complaints.customer_id INNER JOIN resolutions ON complaints.complaint_id = resolutions.complaint_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT department_name, customer_name, complaints.complaint_text FROM departments INNER JOIN employees ON departments.department_manager = employees.emp_name INNER JOIN customers ON departments.department_manager = customers.customer_name INNER JOIN complaints ON employees.emp_name = complaints.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE complaints (\n\tcomplaint_id SERIAL PRIMARY KEY,\n\tcustomer_id INT NOT NULL,\n\tcomplaint_text TEXT,\n\tstatus VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE customers (\n\tcustomer_id SERIAL PRIMARY KEY,\n\tcustomer_name VARCHAR(100) NOT NULL,\n\tcustomer_email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE resolutions (\n\tresolution_id SERIAL PRIMARY KEY,\n\tcomplaint_id INT NOT NULL,\n\tdate_resolved TIMESTAMP,\n\tresolved_by VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE employees (\n\temp_id SERIAL PRIMARY KEY,\n\temp_name VARCHAR(100) NOT NULL,\n\temp_department VARCHAR(100)\n);\n\nCREATE TABLE departments (\n\tdepartment_id SERIAL PRIMARY KEY,\n\tdepartment_name VARCHAR(100) NOT NULL,\n\tdepartment_manager VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT complaints.complaint_id, complaints.complaint_text, resolutions.date_resolved, employees.emp_name AS resolved_by FROM complaints JOIN resolutions ON complaints.complaint_id = resolutions.complaint_id JOIN employees ON resolutions.resolved_by = employees.emp_name;"
]