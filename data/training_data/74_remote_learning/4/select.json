[
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, progress_percentage FROM StudentProgress WHERE course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM StudentProgress WHERE progress_percentage >= 80.0;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, progress_percentage FROM StudentProgress WHERE course_id = 201;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM StudentProgress;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(progress_percentage) FROM StudentProgress WHERE course_id = 301;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM StudentProgress;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(progress_percentage) FROM StudentProgress WHERE course_id = 401;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(progress_percentage) FROM StudentProgress WHERE student_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name, progress_percentage FROM StudentProgress WHERE course_id = 501;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name FROM StudentProgress WHERE progress_percentage < 50.0;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE student_id = 3 AND course_id = 102;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentProgress WHERE progress_percentage BETWEEN 60.0 AND 70.0;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(progress_percentage) FROM StudentProgress WHERE course_id = 302 AND student_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT course_id) FROM StudentProgress;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM StudentProgress WHERE progress_percentage > 90.0;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, course_id, course_name, progress_percentage FROM StudentProgress WHERE student_id < 5;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM StudentProgress WHERE course_id = 402;",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(progress_percentage) FROM StudentProgress WHERE course_name = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(progress_percentage) FROM StudentProgress WHERE course_name = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, progress_percentage FROM StudentProgress WHERE progress_percentage > 80",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE progress_percentage < 50",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, progress_percentage FROM StudentProgress WHERE course_id = 101",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, progress_percentage FROM StudentProgress WHERE course_name = 'Mathematics'",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM StudentProgress",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT course_id) AS total_courses FROM StudentProgress",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(progress_percentage) AS average_progress FROM StudentProgress",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(progress_percentage) AS highest_progress FROM StudentProgress",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(progress_percentage) AS lowest_progress FROM StudentProgress",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, course_id, course_name, progress_percentage FROM StudentProgress ORDER BY progress_percentage DESC",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE course_name LIKE 'English%'",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, progress_percentage FROM StudentProgress WHERE course_name IN ('Science', 'History')",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, progress_percentage FROM StudentProgress WHERE course_name = 'Computer Science' AND progress_percentage < 70",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS total_courses FROM StudentProgress GROUP BY student_name HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, SUM(progress_percentage) AS total_progress FROM StudentProgress GROUP BY student_name HAVING SUM(progress_percentage) > 300",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, AVG(progress_percentage) AS average_progress FROM StudentProgress GROUP BY student_name HAVING AVG(progress_percentage) > 80",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE student_id BETWEEN 101 AND 200",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE student_name LIKE '%son%'",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM StudentProgress WHERE course_name = 'Physics' OR course_name = 'Chemistry'",
  "### TABLEDATA\n\nCREATE TABLE StudentProgress (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    course_id INT NOT NULL,\n    course_name VARCHAR(50) NOT NULL,\n    progress_percentage FLOAT NOT NULL\n)\n\n### STATEMENT\n\nSELECT student_name, progress_percentage FROM StudentProgress WHERE course_id IN (101, 102)",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, age, grade FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE age > 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, age FROM students WHERE age < 25;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT subject, score FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT subject, score FROM grades WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT subject, score FROM grades WHERE score > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT s.name, g.subject FROM students AS s JOIN grades AS g ON s.student_id = g.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT s.name, g.subject, g.score FROM students AS s JOIN grades AS g ON s.student_id = g.student_id WHERE s.age < 30;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT s.name, g.subject, g.score FROM students AS s JOIN grades AS g ON s.student_id = g.student_id WHERE g.score > 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT s.name, s.age, g.subject, g.score FROM students AS s JOIN grades AS g ON s.student_id = g.student_id WHERE g.score > 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT AVG(score) AS average_score FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT grade, COUNT(*) AS count FROM students GROUP BY grade;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT grade, AVG(age) AS average_age FROM students GROUP BY grade;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT MAX(score) AS max_score, MIN(score) AS min_score FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT MAX(age) AS max_age, MIN(age) AS min_age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name, age FROM students WHERE age > 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, grade, score FROM students INNER JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT AVG(score) FROM grades GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, MAX(score) FROM students INNER JOIN grades ON students.student_id = grades.student_id GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name FROM students WHERE age BETWEEN 18 AND 25;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT subject, AVG(score) FROM grades GROUP BY subject;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE age < 18 ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, grade, score FROM students LEFT JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM students INNER JOIN grades ON students.grade = grades.grade;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name, MAX(score) FROM students INNER JOIN grades ON students.student_id = grades.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, age, grade FROM students LEFT JOIN grades ON students.student_id = grades.student_id WHERE grade != 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name, count(*) FROM students INNER JOIN grades ON students.student_id = grades.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, grade FROM students WHERE age >= 20 AND grade = 'B';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, name, age FROM students WHERE age IN (21, 22, 23);",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT subject, MAX(score), count(*) FROM grades GROUP BY subject;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT grade FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT name, AVG(score) FROM students INNER JOIN grades ON students.student_id = grades.student_id GROUP BY name HAVING AVG(score) > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  age INT,\n  grade VARCHAR(10)\n);\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  subject VARCHAR(50),\n  score INT,\n  student_id INT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT count(*), grade FROM students GROUP BY grade HAVING count(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_id, credits FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_id, grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students, Grades WHERE Students.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name, grade FROM Courses, Grades WHERE Courses.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Grades.grade FROM Students, Courses, Grades WHERE Students.student_id = Grades.student_id AND Courses.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.instructor_name, Grades.grade FROM Students, Courses, Grades WHERE Students.student_id = Grades.student_id AND Courses.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.instructor_name, Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT MAX(credits) FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT AVG(credits) FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) FROM Grades GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(credits) FROM Students JOIN Courses ON Students.class_id = Courses.course_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM Students WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE c.credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, instructor_name FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE g.grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE s.class_id = 101 AND c.instructor_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(credits) AS avg_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id GROUP BY student_name HAVING avg_credits > 2.5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT course_id) AS num_courses, AVG(credits) AS avg_credits FROM Grades JOIN Courses ON Grades.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(course_id) AS num_courses FROM Students s JOIN Grades g ON s.student_id = g.student_id GROUP BY student_name HAVING num_courses > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(credits) AS min_credits, MAX(credits) AS max_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(CAST(credits AS FLOAT)) AS avg_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(credits) AS total_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id GROUP BY student_name HAVING total_credits > 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM Students WHERE student_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE grade IN ('A', 'B');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, instructor_name FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE c.instructor_name <> 'Jones';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM Students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE s.student_id BETWEEN 1001 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(credits) AS avg_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE enrollment_date >= '2022-01-01' GROUP BY student_name HAVING avg_credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE student_name IN ('Alice', 'Bob');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students s LEFT JOIN Grades g ON s.student_id = g.student_id LEFT JOIN Courses c ON g.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, instructor_name, grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE c.credits >= 4 AND g.grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    instructor_name VARCHAR,\n    credits INT\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(credits) AS total_credits FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id GROUP BY student_name HAVING total_credits < 15;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, birthdate FROM students WHERE student_grade = 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT course_name, course_credit FROM courses WHERE course_credit > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM student_courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM student_courses WHERE grade >= 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT s.student_name, c.course_name FROM students s INNER JOIN student_courses sc ON s.student_id = sc.student_id INNER JOIN courses c ON sc.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT sp.student_id, sp.exam_date, sp.exam_score, sp.exam_subject FROM student_performance sp INNER JOIN students s ON sp.student_id = s.student_id WHERE s.student_grade > 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY student_grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM courses ORDER BY course_credit;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM student_courses ORDER BY enrollment_date;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM student_performance ORDER BY exam_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT MAX(student_grade) AS highest_grade FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT AVG(course_credit) AS avg_credit FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT MIN(exam_score) AS lowest_score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT DISTINCT course_credit FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_score FROM students s, courses c, student_performance sp WHERE s.student_id = sp.student_id AND c.course_id = sp.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS total_courses FROM students s INNER JOIN student_courses sc ON s.student_id = sc.student_id GROUP BY s.student_name HAVING total_courses > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM students WHERE student_grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT * FROM students JOIN student_courses ON students.student_id = student_courses.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE course_credit >= 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, exam_subject FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE exam_score < 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, course_name FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE student_grade > 90 AND course_credit >= 4;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_score FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id JOIN student_performance ON students.student_id = student_performance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, exam_subject, exam_date FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE exam_score > 80 AND exam_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE student_grade < 60 AND exam_score < 50;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_subject FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE exam_score > 70 AND course_credit >= 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE exam_score >= 90 AND course_credit <= 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE student_grade > 85 AND exam_score > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_date FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE exam_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, course_name FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE student_grade < 70 AND course_credit >= 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_date FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE exam_date < '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE exam_score < 60 AND course_credit >= 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE student_grade >= 70 AND exam_score >= 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, exam_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id WHERE student_grade < 65 AND exam_score < 55;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_grade INT,\n    birthdate DATE\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_credit INT\n);\n\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade INT,\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    exam_score INT,\n    exam_subject VARCHAR(255),\n    PRIMARY KEY (student_id, subject)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM students JOIN student_courses ON students.student_id = student_courses.student_id JOIN courses ON student_courses.course_id = courses.course_id WHERE student_grade >= 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT id, name, grade FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT name, age FROM students WHERE age > 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor, credits FROM courses WHERE credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM enrollment;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM enrollment WHERE enrollment_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignment_name, due_date FROM assignments WHERE due_date < '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, assignment_id, score FROM grades WHERE score > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, e.enrollment_date FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, a.assignment_name, g.score FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.id JOIN assignments a ON g.assignment_id = a.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, c.course_name, g.score AS assignment_score FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, COUNT(g.assignment_id) AS total_assignments FROM students s JOIN grades g ON s.id = g.student_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT c.instructor, AVG(g.score) AS avg_score FROM courses c JOIN grades g ON c.id = g.course_id GROUP BY c.instructor;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT c.course_name, COUNT(e.student_id) AS total_students FROM courses c JOIN enrollment e ON c.id = e.course_id GROUP BY c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(g.assignment_id) AS total_assignments, AVG(g.score) AS avg_score FROM students s JOIN grades g ON s.id = g.student_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, a.assignment_name, AVG(g.score) AS avg_score FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.id JOIN assignments a ON g.assignment_id = a.assignment_id GROUP BY s.name, c.course_name, a.assignment_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, MIN(g.score) AS min_score, MAX(g.score) AS max_score FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT name, age, grade FROM students WHERE age > 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM courses WHERE credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor FROM courses WHERE instructor LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM enrollment WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignment_name, due_date FROM assignments WHERE assignment_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, g.score FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, AVG(g.score) as average_score FROM students s JOIN grades g ON s.id = g.student_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(e.course_id) as enrollments FROM students s JOIN enrollment e ON s.id = e.student_id GROUP BY s.name HAVING enrollments > 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT c.course_name, SUM(g.score) as total_score FROM courses c JOIN grades g ON c.id = g.course_id GROUP BY c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(a.assignment_id) as num_assignments FROM students s JOIN grades g ON s.id = g.student_id JOIN assignments a ON g.assignment_id = a.assignment_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(g.assignment_id) as completed_assignments FROM students s LEFT JOIN grades g ON s.id = g.student_id GROUP BY s.name HAVING completed_assignments < 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, MAX(g.score) as max_score, MIN(g.score) as min_score FROM students s JOIN grades g ON s.id = g.student_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, COUNT(*) as num_assignments FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN assignments a ON c.id = a.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, AVG(g.score) as average_score FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, MAX(g.score) as max_score FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, MIN(g.score) as min_score FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, AVG(g.score) as average_score, COUNT(a.assignment_id) as num_assignments FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id JOIN assignments a ON g.assignment_id = a.assignment_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade VARCHAR(10)\n);\n\n\nCREATE TABLE courses (\n    id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    credits INT\n);\n\n\nCREATE TABLE enrollment (\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    grade VARCHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(255),\n    due_date DATE\n);\n\n\nCREATE TABLE grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    score FLOAT,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, SUM(g.score) as total_score, MAX(a.due_date) as latest_due_date FROM students s JOIN enrollment e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id JOIN grades g ON s.id = g.student_id AND c.id = g.course_id JOIN assignments a ON g.assignment_id = a.assignment_id GROUP BY s.name, c.course_name;"
]