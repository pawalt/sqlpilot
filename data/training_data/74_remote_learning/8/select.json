[
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_date, event_description FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type, event_description FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_type = 'Conference';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_type, COUNT(*) FROM virtual_events GROUP BY event_type;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events WHERE event_type = 'Workshop';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM virtual_events WHERE event_date >= '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_description FROM virtual_events WHERE event_name LIKE '%Meeting%';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type FROM virtual_events WHERE event_type IN ('Conference', 'Webinar');",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_description FROM virtual_events WHERE event_date < '2022-08-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type, event_date FROM virtual_events ORDER BY event_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM virtual_events WHERE event_type = 'Conference';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events WHERE event_type = 'Webinar' ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM virtual_events WHERE event_type = 'Seminar';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT DISTINCT event_type FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name FROM virtual_events WHERE event_description LIKE '%workshop%';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_name LIKE 'Tech%' AND event_date > '2022-10-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_type FROM virtual_events WHERE event_id IN (1, 5, 10);",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events WHERE event_type = 'Workshop' AND event_date BETWEEN '2022-05-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type, COUNT(*) AS total_events FROM virtual_events GROUP BY event_name, event_type ORDER BY total_events DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events WHERE event_type = 'Conference' AND LENGTH(event_description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type FROM virtual_events WHERE event_date > '2022-03-15' AND event_date < '2022-04-15';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_type, COUNT(*) AS total_events FROM virtual_events GROUP BY event_type;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, DATE_FORMAT(event_date, '%Y-%m-%d') AS formatted_date FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM virtual_events WHERE event_date = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_type, event_date FROM virtual_events WHERE event_name NOT LIKE '%Cancelled%';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_description FROM virtual_events WHERE event_name = 'Tech Summit' UNION SELECT event_name, event_description FROM virtual_events WHERE event_name = 'Marketing Expo';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE,\n  event_description TEXT,\n  event_type VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM (SELECT * FROM virtual_events) AS subquery WHERE event_type = 'Seminar';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_location FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, speaker_name FROM Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_id, workshop_name, workshop_date FROM Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, workshop_name FROM Event, Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, speaker_name FROM Event, Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name, speaker_name FROM Event, Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event WHERE event_date = '2023-05-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date FROM Workshop WHERE workshop_date > '2023-06-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM Event WHERE event_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, speaker_name FROM Workshop WHERE workshop_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM Event WHERE event_date BETWEEN '2023-07-01' AND '2023-08-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, speaker_name FROM Workshop WHERE workshop_date < '2023-09-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name, speaker_name FROM Event, Workshop WHERE Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, speaker_name FROM Event, Workshop WHERE Event.event_id = 10 AND Workshop.workshop_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, speaker_name FROM Event, Workshop WHERE Event.event_date < Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, workshop_name, workshop_date FROM Event, Workshop WHERE Event.event_id = 7 AND Workshop.workshop_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM Event WHERE event_location LIKE '%New York%';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, speaker_name, workshop_date FROM Workshop WHERE workshop_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_id, event_date FROM Event WHERE event_location = 'London' AND event_date > '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_id, speaker_name FROM Workshop WHERE workshop_name LIKE '%Programming%' AND workshop_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event JOIN Workshop ON Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name, workshop_date FROM Event INNER JOIN Workshop ON Event.event_date = Workshop.workshop_date WHERE Workshop.speaker_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name, workshop_date FROM Event LEFT JOIN Workshop ON Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name, workshop_date FROM Event RIGHT JOIN Workshop ON Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Event FULL JOIN Workshop ON Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS attendees FROM Event JOIN Workshop ON Event.event_date = Workshop.workshop_date GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(Workshop.workshop_id) AS total_workshops FROM Event JOIN Workshop ON Event.event_date = Workshop.workshop_date GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS attendees FROM Workshop JOIN Event ON Workshop.workshop_date = Event.event_date GROUP BY workshop_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name, AVG(workshop_id) AS avg_workshop_id FROM Workshop JOIN Event ON Workshop.workshop_date = Event.event_date GROUP BY workshop_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT event_location FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT speaker_name FROM Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name AS Name, event_date AS Date, event_location AS Location FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT workshop_name AS Name, speaker_name AS Speaker, workshop_date AS Date FROM Workshop;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name AS Event, speaker_name AS Speaker, workshop_date AS Date FROM Event, Workshop WHERE Event.event_date = Workshop.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE Workshop (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    speaker_name VARCHAR(255),\n    workshop_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_workshops FROM Event JOIN Workshop ON Event.event_date = Workshop.workshop_date GROUP BY event_name HAVING COUNT(*) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name FROM virtual_events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM virtual_events WHERE event_location = 'Online';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name FROM workshops WHERE workshop_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_date, workshop_instructor FROM workshops WHERE workshop_instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM participants;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email FROM participants;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_email FROM participants WHERE participant_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_id FROM participants WHERE event_id = 12345;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events JOIN participants ON virtual_events.event_id = participants.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_instructor, event_name FROM workshops JOIN virtual_events ON workshops.workshop_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events LEFT JOIN participants ON virtual_events.event_id = participants.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_name FROM participants LEFT JOIN virtual_events ON participants.event_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshops RIGHT JOIN virtual_events ON workshops.workshop_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, event_name FROM workshops RIGHT JOIN virtual_events ON workshops.workshop_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events INNER JOIN participants ON virtual_events.event_id = participants.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_name FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_location FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date, workshop_instructor FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email FROM participants;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, workshop_name, workshop_instructor FROM virtual_events INNER JOIN workshops ON virtual_events.event_date = workshops.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email, event_name, event_date FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, workshop_name, workshop_instructor FROM participants INNER JOIN workshops ON participants.event_id = workshops.workshop_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, workshop_name, workshop_instructor FROM participants INNER JOIN workshops ON participants.event_id = workshops.workshop_id INNER JOIN virtual_events ON workshops.workshop_date = virtual_events.event_date;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS no_of_participants FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS no_of_participants FROM participants INNER JOIN workshops ON participants.event_id = workshops.workshop_id GROUP BY workshop_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(participant_id) AS avg_participant_id FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_name, workshop_name FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id INNER JOIN workshops ON virtual_events.event_date = workshops.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS no_of_participants FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id WHERE participant_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_name FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id WHERE event_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, participant_name FROM virtual_events INNER JOIN participants ON virtual_events.event_id = participants.event_id WHERE participant_email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_instructor, participant_name FROM workshops INNER JOIN participants ON workshops.workshop_id = participants.event_id WHERE workshop_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, workshop_name, workshop_instructor FROM virtual_events INNER JOIN workshops ON virtual_events.event_date = workshops.workshop_date WHERE event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, event_name, workshop_name FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id INNER JOIN workshops ON virtual_events.event_date = workshops.workshop_date WHERE participant_email NOT LIKE '%example.com' AND event_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, workshop_name, workshop_instructor FROM participants INNER JOIN workshops ON participants.event_id = workshops.workshop_id INNER JOIN virtual_events ON workshops.workshop_date = virtual_events.event_date WHERE workshop_date BETWEEN '2022-07-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS no_of_participants FROM participants INNER JOIN virtual_events ON participants.event_id = virtual_events.event_id GROUP BY event_name ORDER BY no_of_participants DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_date DATE,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    participant_email VARCHAR(255),\n    event_id INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS no_of_participants FROM participants INNER JOIN workshops ON participants.event_id = workshops.workshop_id GROUP BY workshop_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date, workshop_description FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email FROM participants WHERE participant_phone IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT * FROM registrations WHERE registration_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date, workshop_description FROM workshops ORDER BY workshop_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email FROM participants WHERE participant_email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name FROM workshops WHERE workshop_date = '2021-10-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_phone FROM participants WHERE participant_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_date < '2022-01-01' AND event_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_events FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT MAX(workshop_date) AS latest_workshop_date FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT AVG(participant_id) AS average_participant_id FROM participants;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(registration_id) AS total_registrations FROM events INNER JOIN registrations ON events.event_id = registrations.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, workshop_name FROM events JOIN workshops ON events.event_date = workshops.workshop_date;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT participant_name FROM participants;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, COUNT(participant_id) AS num_participants FROM events LEFT JOIN registrations ON events.event_id = registrations.event_id GROUP BY event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, participant_name FROM events JOIN registrations ON events.event_id = registrations.event_id JOIN participants ON registrations.participant_id = participants.participant_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_description FROM events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_date FROM workshops WHERE workshop_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, participant_email FROM participants WHERE participant_phone IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT p.participant_name, e.event_name FROM participants p INNER JOIN registrations r ON p.participant_id = r.participant_id INNER JOIN events e ON r.event_id = e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_events FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT AVG(event_id) AS average_event_id FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT MAX(event_date) AS latest_event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS total_registrations FROM workshops INNER JOIN registrations ON workshops.workshop_id = registrations.event_id GROUP BY workshop_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, participant_name FROM events LEFT JOIN registrations ON events.event_id = registrations.event_id LEFT JOIN participants ON registrations.participant_id = participants.participant_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS total_registrations FROM workshops JOIN registrations ON workshops.workshop_id = registrations.event_id GROUP BY workshop_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_id, workshop_name, COUNT(*) AS total_registrations FROM workshops JOIN registrations ON workshops.workshop_id = registrations.event_id GROUP BY workshop_id, workshop_name ORDER BY total_registrations DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT participant_name, COUNT(*) AS total_registrations FROM participants JOIN registrations ON participants.participant_id = registrations.participant_id GROUP BY participant_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, DATE_FORMAT(event_date, '%Y-%m-%d') AS formatted_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, DATE_ADD(workshop_date, INTERVAL 1 MONTH) AS next_month_date FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, DATEDIFF(event_date, CURRENT_DATE) AS days_until_event FROM events WHERE event_date > CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, DATE_ADD(event_date, INTERVAL 2 WEEK) AS two_week_later_date FROM events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT event_name, YEAR(event_date) AS event_year FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE workshops (\n  workshop_id INT PRIMARY KEY,\n  workshop_name VARCHAR(255) NOT NULL,\n  workshop_date DATE NOT NULL,\n  workshop_description TEXT\n);\n\nCREATE TABLE participants (\n  participant_id INT PRIMARY KEY,\n  participant_name VARCHAR(255) NOT NULL,\n  participant_email VARCHAR(255) UNIQUE NOT NULL,\n  participant_phone VARCHAR(15)\n);\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  event_id INT,\n  participant_id INT,\n  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(event_id),\n  CONSTRAINT fk_participant FOREIGN KEY (participant_id) REFERENCES participants(participant_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT participant_email FROM registrations JOIN participants ON registrations.participant_id = participants.participant_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, registration_date FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_description FROM workshops;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshop_attendees;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_id, workshop_id FROM workshop_attendees;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM event_feedback;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT feedback_text, rating FROM event_feedback;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_id, attendee_id FROM event_feedback;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, ea.attendee_name FROM virtual_events e JOIN event_attendees ea ON e.event_id = ea.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT w.workshop_name, wa.attendance_date FROM workshops w JOIN workshop_attendees wa ON w.workshop_id = wa.workshop_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT ef.feedback_text, ef.rating FROM event_feedback ef JOIN event_attendees ea ON ef.attendee_id = ea.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT ve.event_name, ea.attendee_name FROM virtual_events ve, event_attendees ea WHERE ve.event_id = ea.event_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT ws.workshop_name, wa.attendance_date FROM workshops ws, workshop_attendees wa WHERE ws.workshop_id = wa.workshop_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT ef.feedback_text, ef.rating FROM event_feedback ef, event_attendees ea WHERE ef.attendee_id = ea.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events WHERE event_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM event_attendees WHERE registration_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshops WHERE workshop_instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshop_attendees WHERE attendance_date BETWEEN '2022-06-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM virtual_events;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM virtual_events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM virtual_events WHERE event_location LIKE '%Online%';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name FROM event_attendees JOIN virtual_events ON event_attendees.event_id = virtual_events.event_id WHERE virtual_events.event_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, workshop_instructor FROM workshops WHERE workshop_instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM workshop_attendees WHERE attendance_date = '2022-05-20';",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, workshop_name FROM event_attendees JOIN workshop_attendees ON event_attendees.attendee_id = workshop_attendees.attendee_id JOIN workshops ON workshop_attendees.workshop_id = workshops.workshop_id;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT AVG(rating) FROM event_feedback WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_attendees FROM virtual_events JOIN event_attendees ON virtual_events.event_id = event_attendees.event_id GROUP BY event_name ORDER BY total_attendees DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, COUNT(*) AS num_attendees FROM workshops JOIN workshop_attendees ON workshops.workshop_id = workshop_attendees.workshop_id GROUP BY workshop_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(rating) AS avg_rating FROM virtual_events JOIN event_feedback ON virtual_events.event_id = event_feedback.event_id GROUP BY event_name HAVING AVG(rating) > 4;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name, feedback_text FROM virtual_events JOIN event_feedback ON virtual_events.event_id = event_feedback.event_id JOIN event_attendees ON event_feedback.attendee_id = event_attendees.attendee_id WHERE event_feedback.rating < 3;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT attendee_name FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(rating) AS total_rating FROM virtual_events JOIN event_feedback ON virtual_events.event_id = event_feedback.event_id GROUP BY event_name ORDER BY total_rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT workshop_name, MAX(attendance_date) AS latest_attendance FROM workshops JOIN workshop_attendees ON workshops.workshop_id = workshop_attendees.workshop_id GROUP BY workshop_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(DISTINCT attendee_name) AS num_attendees FROM virtual_events JOIN event_attendees ON virtual_events.event_id = event_attendees.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(rating) AS avg_rating FROM virtual_events LEFT JOIN event_feedback ON virtual_events.event_id = event_feedback.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, COUNT(distinct attendee_name) AS num_attendees FROM virtual_events JOIN event_attendees ON virtual_events.event_id = event_attendees.event_id GROUP BY event_name, event_date;",
  "### TABLEDATA\n\nCREATE TABLE virtual_events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    event_id INT,\n    registration_date DATE,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id)\n);\n\nCREATE TABLE workshops (\n    workshop_id INT PRIMARY KEY,\n    workshop_name VARCHAR(255),\n    workshop_description TEXT,\n    workshop_instructor VARCHAR(255)\n);\n\nCREATE TABLE workshop_attendees (\n    attendee_id INT,\n    workshop_id INT,\n    attendance_date DATE,\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id),\n    FOREIGN KEY (workshop_id) REFERENCES workshops(workshop_id)\n);\n\nCREATE TABLE event_feedback (\n    feedback_id INT PRIMARY KEY,\n    event_id INT,\n    attendee_id INT,\n    feedback_text TEXT,\n    rating INT,\n    FOREIGN KEY (event_id) REFERENCES virtual_events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES event_attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, workshop_name, feedback_text FROM event_attendees JOIN workshop_attendees ON event_attendees.attendee_id = workshop_attendees.attendee_id JOIN workshops ON workshop_attendees.workshop_id = workshops.workshop_id JOIN event_feedback ON event_attendees.attendee_id = event_feedback.attendee_id;"
]