<t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>REVOKE SELECT ON security_table FROM user1</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>revoke select on security_table from user1</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>REVOKE INSERT ON security_table FROM user2</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>revoke insert on security_table from user2</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>REVOKE UPDATE ON security_table FROM user3</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>revoke update on security_table from user3</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON users FROM public</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on users from public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON users FROM public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on users from public</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT ON users FROM public</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select on users from public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT ON users FROM public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select on users from public</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT, UPDATE ON permissions FROM public</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert, update on permissions from public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT, UPDATE ON permissions FROM public</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert, update on permissions from public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT ON users FROM user1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select on users from user1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT, UPDATE ON users FROM user2</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert, update on users from user2</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE ALL PRIVILEGES ON users FROM user3</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke all privileges on users from user3</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE INSERT ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke insert on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE DELETE ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke delete on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE UPDATE (username, password) ON TABLE users FROM role_name;</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke update (username, password) on table users from role_name;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE users FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table users from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE roles FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table roles from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>revoke all privileges on table permissions from public;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>REVOKE ALL PRIVILEGES ON TABLE permissions FROM PUBLIC;</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>revoke all privileges on table permissions from public;</stat>