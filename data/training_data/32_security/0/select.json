[
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id FROM users WHERE username = 'jane_smith' OR username = 'alex123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%domain.com' AND username LIKE 'user%' ORDER BY email ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id = 5 AND email = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users WHERE username ILIKE 'j%' ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT email FROM users WHERE username = 'test_user' AND email = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' AND password = 'admin@123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username FROM users WHERE email LIKE '%example.com' AND password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, email FROM users WHERE username = 'user1' OR username = 'user2' ORDER BY id ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE id < 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'test%' AND email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT username) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username = 'John' AND email LIKE '%@domain.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, email FROM users WHERE username IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'M%' OR email LIKE '%yahoo.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email NOT LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username FROM users WHERE id % 2 = 0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT count(*) FROM users WHERE email IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT count(*) AS num_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT count(id) AS num_users FROM users GROUP BY email HAVING count(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, MAX(id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) AS avg_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(id), MAX(id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, username, email FROM users LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT username) AS num_distinct_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users INNER JOIN other_table ON users.id = other_table.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_sessions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT session_id, user_id FROM user_sessions WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT session_token FROM user_sessions WHERE session_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, expiration_time FROM user_sessions WHERE expiration_time > '2022-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users INNER JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users LEFT JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users RIGHT JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.user_id, user_sessions.session_id FROM users FULL JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_sessions WHERE user_id NOT IN (2, 4, 6);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(expiration_time) FROM user_sessions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE password_hash = '12345678';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_sessions WHERE session_token = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE '%john%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, session_token FROM user_sessions WHERE expiration_time > NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, user_sessions.session_token FROM users JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users WHERE password_hash IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (SELECT user_id FROM user_sessions WHERE expiration_time < NOW());",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users ORDER BY username DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(session_id) FROM user_sessions GROUP BY user_id HAVING COUNT(session_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(expiration_time) FROM user_sessions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(session_token) FROM user_sessions WHERE session_token LIKE '%token%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, session_token FROM users, user_sessions WHERE users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' AND password_hash = 'hashedPassword';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'user1' OR username = 'user2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(session_id) AS total_sessions FROM user_sessions GROUP BY user_id ORDER BY total_sessions DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(UNIX_TIMESTAMP(expiration_time)) AS avg_expiration_time FROM user_sessions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, expiration_time FROM users INNER JOIN user_sessions ON users.user_id = user_sessions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(session_id) AS total_sessions FROM user_sessions WHERE expiration_time > NOW() GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'a%' ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM user_tokens;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, token FROM user_tokens WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM password_resets;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, reset_code FROM password_resets WHERE reset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, reset_code FROM password_resets WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.user_id, users.username, user_tokens.token FROM users JOIN user_tokens ON users.user_id = user_tokens.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.username, password_resets.reset_code FROM users LEFT JOIN password_resets ON users.user_id = password_resets.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.username, user_tokens.token FROM users RIGHT JOIN user_tokens ON users.user_id = user_tokens.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, t.token FROM users u, user_tokens t WHERE u.user_id = t.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT SUM(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, COUNT(token_id) FROM user_tokens GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username, COUNT(reset_id) FROM users JOIN password_resets ON users.user_id = password_resets.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE 'j%';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.user_id, user_tokens.token FROM users JOIN user_tokens ON users.user_id = user_tokens.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.username, password_resets.reset_code FROM users JOIN password_resets ON users.user_id = password_resets.user_id WHERE users.username = 'alice';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS token_count FROM user_tokens GROUP BY user_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM user_tokens WHERE created_at >= '2022-01-01' AND created_at < '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (SELECT user_id FROM user_tokens WHERE token = '123abc');",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT users.username, COUNT(*) AS reset_count FROM users LEFT JOIN password_resets ON users.user_id = password_resets.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username, COUNT(reset_id) AS reset_count FROM users LEFT JOIN password_resets ON users.user_id = password_resets.user_id GROUP BY username HAVING reset_count > 0;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, MAX(created_at) AS latest_reset FROM password_resets GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username FROM users UNION SELECT user_id, username FROM user_tokens;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username, reset_code FROM users CROSS JOIN password_resets;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, ut.token FROM users u, user_tokens ut WHERE u.user_id = ut.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM users JOIN user_tokens USING(user_id);",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username, token FROM users NATURAL JOIN user_tokens;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.user_id, ur.reset_code FROM users u, password_resets ur WHERE u.user_id = ur.user_id AND ur.created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nSELECT username, MAX(created_at) AS latest_token FROM users JOIN user_tokens ON users.user_id = user_tokens.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE password_hash = '123456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM user_roles WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_accounts;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT account_name FROM user_accounts WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_sessions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT session_id, user_id FROM user_sessions WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.account_name FROM users u JOIN user_accounts a ON u.user_id = a.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles r ON u.user_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, s.login_time FROM users u JOIN user_sessions s ON u.user_id = s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles WHERE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_accounts WHERE account_name LIKE '%Bank%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_sessions WHERE login_time > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.account_name, s.login_time FROM users u JOIN user_accounts a ON u.user_id = a.user_id JOIN user_sessions s ON u.user_id = s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, a.account_name FROM users u INNER JOIN user_accounts a ON u.user_id = a.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u INNER JOIN user_roles r ON u.user_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, s.login_time FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(a.account_id) AS num_accounts FROM users u LEFT JOIN user_accounts a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MAX(s.login_time) AS last_login FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(s.login_time) AS avg_login_time FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, s.login_time FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id WHERE s.login_time > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT r.role_name) AS num_roles FROM users u INNER JOIN user_roles r ON u.user_id = r.role_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(DATEDIFF(NOW(), s.login_time)) AS days_since_last_login FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.account_name FROM users u LEFT JOIN user_accounts a ON u.user_id = a.user_id WHERE a.account_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, SUM(DATEDIFF(NOW(), s.login_time)) AS total_days_logged_in FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u INNER JOIN user_roles r ON u.user_id = r.role_id WHERE r.role_name IN ('admin', 'manager');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(s.session_id) AS num_sessions FROM users u LEFT JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MAX(s.login_time) AS last_login FROM users u LEFT JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username HAVING last_login < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(s.login_time) AS avg_login_time FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id WHERE EXTRACT(MONTH FROM s.login_time) = 1 GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, CONCAT(u.username, '@example.com') AS email_alias FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MIN(s.login_time) AS first_login FROM users u INNER JOIN user_sessions s ON u.user_id = s.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(u.user_id) AS num_users, COUNT(DISTINCT r.role_id) AS num_roles FROM users u INNER JOIN user_roles r ON u.user_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sessions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT session_id, login_time FROM sessions WHERE user_id = 1 AND logout_time IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT token_type FROM tokens WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT token_value, expiry_time FROM tokens WHERE token_type = 'access';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_name FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT password_hash FROM users WHERE email = 'example@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sessions WHERE logout_time IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT session_id, user_id FROM sessions WHERE logout_time IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT token_id, user_id FROM tokens WHERE expiry_time < NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id = (SELECT user_id FROM sessions WHERE session_id = '12345');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT role_name FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id FROM user_roles GROUP BY user_id HAVING COUNT(role_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS active_sessions FROM sessions WHERE logout_time IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_name, COUNT(user_id) AS total_users FROM user_roles GROUP BY role_name ORDER BY total_users DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE id > 5 AND id < 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, COUNT(role_name) AS role_count FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, session_id FROM users JOIN sessions ON users.id = sessions.user_id WHERE login_time > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT role_name) AS unique_roles_count FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, token_type, expiry_time FROM users JOIN tokens ON users.id = tokens.user_id WHERE expiry_time > NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name, login_time FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id JOIN sessions ON users.id = sessions.user_id WHERE login_time BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE id IN (SELECT user_id FROM tokens WHERE token_type = 'JWT');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name IN ('Admin', 'Editor');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.role_id WHERE u.id = 1 AND r.role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, t.token_type FROM users u JOIN tokens t ON u.id = t.user_id WHERE t.expiry_time > NOW() ORDER BY t.expiry_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, COUNT(token_id) AS token_count FROM users JOIN tokens ON users.id = tokens.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, s.login_time, s.logout_time FROM users u JOIN sessions s ON u.id = s.user_id WHERE s.logout_time IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, t.token_type FROM users u LEFT JOIN tokens t ON u.id = t.user_id WHERE t.token_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, MAX(expiry_time) AS latest_expiry FROM tokens GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, AVG(DATEDIFF(logout_time, login_time)) AS average_session_duration FROM users JOIN sessions ON users.id = sessions.user_id WHERE logout_time IS NOT NULL GROUP BY username;"
]