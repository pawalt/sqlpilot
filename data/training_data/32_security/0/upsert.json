[
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user1', 'password1', 'user1@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword1', email = 'updatedUser1@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user2', 'password2', 'user2@example.com', 'user2@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword2', email = 'updatedUser2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user3', 'password3', 'user3@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword3', email = 'updatedUser3@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user4', 'password4', 'user4@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword4', email = 'updatedUser4@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user5', 'password5', 'user5@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword5', email = 'updatedUser5@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user6', 'password6', 'user6@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword6', email = 'updatedUser6@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user7', 'password7', 'user7@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword7', email = 'updatedUser7@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user8', 'password8', 'user8@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword8', email = 'updatedUser8@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user9', 'password9', 'user9@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword9', email = 'updatedUser9@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user10', 'password10', 'user10@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword10', email = 'updatedUser10@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user11', 'password11', 'user11@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword11', email = 'updatedUser11@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user12', 'password12', 'user12@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword12', email = 'updatedUser12@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user13', 'password13', 'user13@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword13', email = 'updatedUser13@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user14', 'password14', 'user14@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword14', email = 'updatedUser14@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user15', 'password15', 'user15@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword15', email = 'updatedUser15@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user16', 'password16', 'user16@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword16', email = 'updatedUser16@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user17', 'password17', 'user17@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword17', email = 'updatedUser17@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user18', 'password18', 'user18@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword18', email = 'updatedUser18@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user19', 'password19', 'user19@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword19', email = 'updatedUser19@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, password, email) VALUES ('user20', 'password20', 'user20@example.com') ON CONFLICT (username) DO UPDATE SET password = 'updatedPassword20', email = 'updatedUser20@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user1', 'password1', 'user1@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password1_updated', email = 'user1_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user2', 'password2', 'user2@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password2_updated', email = 'user2_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user3', 'password3', 'user3@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password3_updated', email = 'user3_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user4', 'password4', 'user4@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password4_updated', email = 'user4_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user5', 'password5', 'user5@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password5_updated', email = 'user5_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user6', 'password6', 'user6@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password6_updated', email = 'user6_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user7', 'password7', 'user7@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password7_updated', email = 'user7_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user8', 'password8', 'user8@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password8_updated', email = 'user8_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user9', 'password9', 'user9@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password9_updated', email = 'user9_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user10', 'password10', 'user10@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password10_updated', email = 'user10_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user11', 'password11', 'user11@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password11_updated', email = 'user11_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user12', 'password12', 'user12@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password12_updated', email = 'user12_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user13', 'password13', 'user13@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password13_updated', email = 'user13_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user14', 'password14', 'user14@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password14_updated', email = 'user14_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user15', 'password15', 'user15@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password15_updated', email = 'user15_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user16', 'password16', 'user16@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password16_updated', email = 'user16_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user17', 'password17', 'user17@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password17_updated', email = 'user17_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user18', 'password18', 'user18@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password18_updated', email = 'user18_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user19', 'password19', 'user19@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password19_updated', email = 'user19_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('user20', 'password20', 'user20@example.com') ON CONFLICT (username) DO UPDATE SET password = 'password20_updated', email = 'user20_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (1, 'user1', 'password1') ON CONFLICT (user_id) DO UPDATE SET username = 'user1', password_hash = 'password1';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (2, 'user2', 'password2') ON CONFLICT (user_id) DO UPDATE SET username = 'user2', password_hash = 'password2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (3, 'user3', 'password3') ON CONFLICT (user_id) DO UPDATE SET username = 'user3', password_hash = 'password3';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (4, 'user4', 'password4') ON CONFLICT (user_id) DO UPDATE SET username = 'user4', password_hash = 'password4';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (5, 'user5', 'password5') ON CONFLICT (user_id) DO UPDATE SET username = 'user5', password_hash = 'password5';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (6, 'user6', 'password6') ON CONFLICT (user_id) DO UPDATE SET username = 'user6', password_hash = 'password6';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (7, 'user7', 'password7') ON CONFLICT (user_id) DO UPDATE SET username = 'user7', password_hash = 'password7';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (8, 'user8', 'password8') ON CONFLICT (user_id) DO UPDATE SET username = 'user8', password_hash = 'password8';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (9, 'user9', 'password9') ON CONFLICT (user_id) DO UPDATE SET username = 'user9', password_hash = 'password9';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (10, 'user10', 'password10') ON CONFLICT (user_id) DO UPDATE SET username = 'user10', password_hash = 'password10';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('9e8d86a8-1c03-4f35-b97f-326d7d4521dd', 1, 'token1', '2023-01-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 1, session_token = 'token1', expiration_time = '2023-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('659d1da3-520e-44c4-8c10-a588b40ab400', 2, 'token2', '2023-02-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 2, session_token = 'token2', expiration_time = '2023-02-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('34a266d7-1e97-465a-a133-b3d59e732312', 3, 'token3', '2023-03-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 3, session_token = 'token3', expiration_time = '2023-03-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('a5550a30-bc1c-4bce-b2d7-8eb9c02dbe71', 4, 'token4', '2023-04-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 4, session_token = 'token4', expiration_time = '2023-04-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('121fdad4-d553-4d54-aa07-30c56ddc1d38', 5, 'token5', '2023-05-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 5, session_token = 'token5', expiration_time = '2023-05-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('7c14f621-3d29-40f3-9c92-9d4c52c8699f', 6, 'token6', '2023-06-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 6, session_token = 'token6', expiration_time = '2023-06-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('02b3d703-bf8c-4c64-9d15-3750f572419e', 7, 'token7', '2023-07-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 7, session_token = 'token7', expiration_time = '2023-07-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('9b7f07e0-e567-4218-aa47-d6b3fb56b558', 8, 'token8', '2023-08-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 8, session_token = 'token8', expiration_time = '2023-08-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('42f50e63-c9b4-4a2b-b0b8-08ce4ad7c8c6', 9, 'token9', '2023-09-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 9, session_token = 'token9', expiration_time = '2023-09-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token, expiration_time) VALUES ('53378104-8c57-434d-802e-ee25e35d8632', 10, 'token10', '2023-10-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 10, session_token = 'token10', expiration_time = '2023-10-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (1, 'john_doe', 'hash123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated', password_hash = 'updated_hash123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (2, 'jane_smith', 'hash456') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith_updated', password_hash = 'updated_hash456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (3, 'alice_wonderland', 'hash789') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_wonderland_updated', password_hash = 'updated_hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (4, 'bob_marley', 'hashabc') ON CONFLICT (user_id) DO UPDATE SET username = 'bob_marley_updated', password_hash = 'updated_hashabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (5, 'emily_snow', 'hashdef') ON CONFLICT (user_id) DO UPDATE SET username = 'emily_snow_updated', password_hash = 'updated_hashdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (6, 'sam_taylor', 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'sam_taylor_updated', password_hash = 'updated_hashxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (7, 'oliver_queen', 'hash789') ON CONFLICT (user_id) DO UPDATE SET username = 'oliver_queen_updated', password_hash = 'updated_hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (8, 'lucy_miller', 'hashabc') ON CONFLICT (user_id) DO UPDATE SET username = 'lucy_miller_updated', password_hash = 'updated_hashabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (9, 'henry_jones', 'hashdef') ON CONFLICT (user_id) DO UPDATE SET username = 'henry_jones_updated', password_hash = 'updated_hashdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (10, 'sara_connor', 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_connor_updated', password_hash = 'updated_hashxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (11, 'michael_scott', 'hash123') ON CONFLICT (user_id) DO UPDATE SET username = 'michael_scott_updated', password_hash = 'updated_hash123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (12, 'jim_halpert', 'hash456') ON CONFLICT (user_id) DO UPDATE SET username = 'jim_halpert_updated', password_hash = 'updated_hash456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (13, 'pam_beesly', 'hash789') ON CONFLICT (user_id) DO UPDATE SET username = 'pam_beesly_updated', password_hash = 'updated_hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (14, 'dwight_schrute', 'hashabc') ON CONFLICT (user_id) DO UPDATE SET username = 'dwight_schrute_updated', password_hash = 'updated_hashabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (15, 'andy_bernard', 'hashdef') ON CONFLICT (user_id) DO UPDATE SET username = 'andy_bernard_updated', password_hash = 'updated_hashdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (16, 'kevin_malone', 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'kevin_malone_updated', password_hash = 'updated_hashxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (17, 'oscar_martinez', 'hash789') ON CONFLICT (user_id) DO UPDATE SET username = 'oscar_martinez_updated', password_hash = 'updated_hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (18, 'angela_martin', 'hashabc') ON CONFLICT (user_id) DO UPDATE SET username = 'angela_martin_updated', password_hash = 'updated_hashabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (19, 'creed_bratton', 'hashdef') ON CONFLICT (user_id) DO UPDATE SET username = 'creed_bratton_updated', password_hash = 'updated_hashdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    expiration_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES (20, 'toby_flenderson', 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'toby_flenderson_updated', password_hash = 'updated_hashxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash) VALUES (1, 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash) VALUES (2, 'jane_smith', 'pass456!') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO user_tokens (token_id, user_id, token, created_at) VALUES (1, 1, 'token123', current_timestamp) ON CONFLICT (token_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, created_at = excluded.created_at;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO user_tokens (token_id, user_id, token, created_at) VALUES (2, 2, 'token456', current_timestamp) ON CONFLICT (token_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, created_at = excluded.created_at;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO password_resets (reset_id, user_id, reset_code, created_at) VALUES (1, 1, 'abc123', current_timestamp) ON CONFLICT (reset_id) DO UPDATE SET user_id = excluded.user_id, reset_code = excluded.reset_code, created_at = excluded.created_at;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nUPSERT INTO password_resets (reset_id, user_id, reset_code, created_at) VALUES (2, 2, 'def456', current_timestamp) ON CONFLICT (reset_id) DO UPDATE SET user_id = excluded.user_id, reset_code = excluded.reset_code, created_at = excluded.created_at;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);\n\n\nCREATE TABLE user_tokens (token_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), token VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP);\n\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);\n\n### STATEMENT\n\nCREATE TABLE password_resets (reset_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), reset_code VARCHAR(10) NOT NULL, created_at TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (1, 'john_doe', 'hash123', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', password_hash = 'updated_hash123', email = 'updated_john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'updated_admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (1, 'Main Account', 1) ON CONFLICT (account_id) DO UPDATE SET account_name = 'Updated Main Account', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('b3dc9f59-aa3e-4fd4-837c-94a5e6b5a3b7', 1, '2022-05-25 10:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 1, login_time = '2022-05-25 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (2, 'jane_smith', 'hash456', 'jane.smith@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', password_hash = 'updated_hash456', email = 'updated_jane.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (2, 'Secondary Account', 2) ON CONFLICT (account_id) DO UPDATE SET account_name = 'Updated Secondary Account', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('996faa58-5509-4429-8280-e6f49f3b0d09', 2, '2022-05-26 09:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 2, login_time = '2022-05-26 09:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (3, 'alice_johnson', 'hash789', 'alice.johnson@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_johnson', password_hash = 'updated_hash789', email = 'updated_alice.johnson@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (3, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (3, 'Extra Account', 3) ON CONFLICT (account_id) DO UPDATE SET account_name = 'Updated Extra Account', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('2f33c561-67aa-4b46-bfb4-964ac69fdbf6', 3, '2022-05-27 08:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 3, login_time = '2022-05-27 08:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (4, 'david_williams', 'hashABC', 'david.williams@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'david_williams', password_hash = 'updated_hashABC', email = 'updated_david.williams@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (4, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (4, 'Additional Account', 4) ON CONFLICT (account_id) DO UPDATE SET account_name = 'Updated Additional Account', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('81af1f96-f6b5-4e6a-9866-27557a6e2e0f', 4, '2022-05-28 07:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 4, login_time = '2022-05-28 07:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (1, 'john_doe', 'hash123', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password_hash = excluded.password_hash, email = excluded.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (2, 'jane_smith', 'hash456', 'jane.smith@example.com') ON CONFLICT (user_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, email) VALUES (3, 'sam_jones', 'hash789', 'sam.jones@example.com') ON CONFLICT (user_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (1, 'Admin Account', 1) ON CONFLICT (account_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_accounts (account_id, account_name, user_id) VALUES (2, 'User Account', 2) ON CONFLICT (account_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('e29d13e7-af19-4b53-b453-e213335848af', 1, '2022-01-01 08:00:00') ON CONFLICT (session_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash CHAR(64) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE user_accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(50) UNIQUE NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT,\n    login_time TIMESTAMP NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time) VALUES ('f2e07993-77d8-42eb-9a68-20ae69d3ec2b', 2, '2022-01-02 10:00:00') ON CONFLICT (session_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (1, 'john_doe', 'password123', 'john_doe@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (2, 'jane_smith', 'pass321word', 'jane_smith@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (3, 'alice_wonderland', 'secret456', 'alice.wonderland@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (4, 'bob_dylan', 'hidden789', 'bob.dylan@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'guest') ON CONFLICT (role_id) DO UPDATE SET role_name = EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (session_id, user_id, login_time, logout_time) VALUES ('123e4567-e89b-12d3-a456-426614174000', 1, '2022-01-01 12:00:00', '2022-01-01 14:00:00') ON CONFLICT (session_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (session_id, user_id, login_time) VALUES ('223e4567-e89b-12d3-a456-426614174000', 2, '2022-01-02 10:00:00') ON CONFLICT (session_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('323e4567-e89b-12d3-a456-426614174000', 1, 'access', 'abc123token', '2022-01-15 18:00:00') ON CONFLICT (token_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('423e4567-e89b-12d3-a456-426614174000', 2, 'refresh', 'refresh234token', '2022-01-20 12:00:00') ON CONFLICT (token_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('523e4567-e89b-12d3-a456-426614174000', 3, 'access', 'xyz789token', '2022-01-25 16:00:00') ON CONFLICT (token_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (id, username, password_hash, email) VALUES (1, 'john_doe', 'hashed_password_1', 'john.doe@example.com') ON CONFLICT (id) DO UPDATE SET username = 'john_doe', password_hash = 'hashed_password_1', email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, login_time, logout_time) VALUES ('123e4567-e89b-12d3-a456-426614174000', 1, '2022-01-01 10:00:00', '2022-01-01 12:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 1, login_time = '2022-01-01 10:00:00', logout_time = '2022-01-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('123e4567-e89b-12d3-a456-426614174001', 1, 'access_token', 'token_value_1', '2022-01-02 00:00:00') ON CONFLICT (token_id) DO UPDATE SET user_id = 1, token_type = 'access_token', token_value = 'token_value_1', expiry_time = '2022-01-02 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (id, username, password_hash, email) VALUES (2, 'jane_doe', 'hashed_password_2', 'jane.doe@example.com') ON CONFLICT (id) DO UPDATE SET username = 'jane_doe', password_hash = 'hashed_password_2', email = 'jane.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, login_time, logout_time) VALUES ('123e4567-e89b-12d3-a456-426614174002', 2, '2022-01-01 10:00:00', '2022-01-01 12:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 2, login_time = '2022-01-01 10:00:00', logout_time = '2022-01-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('123e4567-e89b-12d3-a456-426614174003', 2, 'refresh_token', 'token_value_2', '2022-01-02 00:00:00') ON CONFLICT (token_id) DO UPDATE SET user_id = 2, token_type = 'refresh_token', token_value = 'token_value_2', expiry_time = '2022-01-02 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (id, username, password_hash, email) VALUES (3, 'alice_smith', 'hashed_password_3', 'alice.smith@example.com') ON CONFLICT (id) DO UPDATE SET username = 'alice_smith', password_hash = 'hashed_password_3', email = 'alice.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (3, 'manager') ON CONFLICT (role_id) DO UPDATE SET role_name = 'manager';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, login_time, logout_time) VALUES ('123e4567-e89b-12d3-a456-426614174004', 3, '2022-01-01 10:00:00', '2022-01-01 12:00:00') ON CONFLICT (session_id) DO UPDATE SET user_id = 3, login_time = '2022-01-01 10:00:00', logout_time = '2022-01-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash TEXT NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    login_time TIMESTAMP NOT NULL,\n    logout_time TIMESTAMP\n);\n\nCREATE TABLE tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT NOT NULL,\n    token_type VARCHAR(50) NOT NULL,\n    token_value VARCHAR(100) NOT NULL,\n    expiry_time TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO tokens (token_id, user_id, token_type, token_value, expiry_time) VALUES ('123e4567-e89b-12d3-a456-426614174005', 3, 'access_token', 'token_value_3', '2022-01-02 00:00:00') ON CONFLICT (token_id) DO UPDATE SET user_id = 3, token_type = 'access_token', token_value = 'token_value_3', expiry_time = '2022-01-02 00:00:00';"
]