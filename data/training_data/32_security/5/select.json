[
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords WHERE username = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE password_hash IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords WHERE id > 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, password_hash FROM passwords WHERE id < 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id BETWEEN 3 AND 8;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username, password_hash FROM passwords WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords WHERE username IN ('Alice', 'Bob');",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords OFFSET 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT MIN(id) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT SUM(id) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, COUNT(*) FROM passwords GROUP BY id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) FROM passwords GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE username LIKE 'john%';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords WHERE password_hash IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM passwords WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT MIN(id) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM passwords WHERE id > 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, COUNT(*) AS count FROM passwords GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, CASE WHEN id < 100 THEN 'Low' ELSE 'High' END AS id_category FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, SUBSTRING(username, 1, 2) AS initials FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username, LENGTH(password_hash) AS hash_length FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username, LEFT(password_hash, 5) AS first_bytes FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id = (SELECT MAX(id) FROM passwords);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS count FROM passwords GROUP BY username HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT username, MD5(password_hash) AS hashed_password FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username, to_hex(password_hash) AS hex_hash FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nSELECT id, username, inet_client_addr() AS client_address FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, full_name FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT email FROM users WHERE full_name LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password_hash FROM passwords WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM users WHERE full_name = 'Alice Smith';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE password_hash IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id FROM passwords WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name FROM users WHERE email = 'alice@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE user_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE email LIKE '%@yahoo.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) AS average_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM passwords WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.*, u.full_name FROM passwords p INNER JOIN users u ON p.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(LENGTH(password_hash)) AS avg_password_length FROM passwords GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.full_name, COUNT(*) AS password_count FROM passwords p INNER JOIN users u ON p.user_id = u.user_id GROUP BY u.full_name;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(LENGTH(password_hash)) AS max_password_length FROM passwords GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(LENGTH(password_hash)) AS min_password_length FROM passwords GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.full_name, COUNT(email) AS email_count FROM users u LEFT JOIN passwords p ON u.user_id = p.user_id GROUP BY u.full_name;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE LENGTH(password_hash) >= 10 GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(LENGTH(password_hash)) AS avg_password_length FROM passwords WHERE LENGTH(password_hash) >= 10 GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE username = 'admin' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE user_id IN (SELECT user_id FROM users WHERE full_name LIKE 'J%') GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE user_id NOT IN (SELECT user_id FROM users WHERE email LIKE '%example.com') GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE user_id IN (SELECT user_id FROM users WHERE full_name LIKE 'A%') GROUP BY user_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE user_id NOT IN (SELECT user_id FROM users WHERE email LIKE '%example.com') GROUP BY user_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords WHERE user_id IN (SELECT user_id FROM users WHERE email LIKE '%example.com') GROUP BY user_id HAVING COUNT(*) > 0;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.full_name, COUNT(*) AS password_count FROM passwords p INNER JOIN users u ON p.user_id = u.user_id GROUP BY u.full_name HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS password_count FROM passwords GROUP BY user_id ORDER BY password_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.full_name, COUNT(*) AS password_count FROM passwords p INNER JOIN users u ON p.user_id = u.user_id GROUP BY u.full_name ORDER BY password_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT password_hash FROM passwords;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, password_hash FROM passwords WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users INNER JOIN user_roles ON users.user_id = user_roles.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users LEFT JOIN user_roles ON users.user_id = user_roles.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users RIGHT JOIN user_roles ON users.user_id = user_roles.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users FULL JOIN user_roles ON users.user_id = user_roles.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users INNER JOIN user_roles ON users.user_id = user_roles.user_id WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users LEFT JOIN user_roles ON users.user_id = user_roles.user_id WHERE role IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT id, username, role FROM users RIGHT JOIN user_roles ON users.user_id = user_roles.user_id WHERE user_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password_hash FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u JOIN user_roles r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u LEFT JOIN user_roles r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u RIGHT JOIN user_roles r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u INNER JOIN user_roles r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u FULL JOIN user_roles r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role FROM users u CROSS JOIN user_roles r;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password_hash FROM passwords WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'a%';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT role FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT role) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = (SELECT MAX(user_id) FROM users);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT permission_name FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_credentials;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, password_hash FROM user_credentials;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name FROM users JOIN user_roles ON users.user_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_permissions.permission_name FROM users JOIN user_permissions ON users.user_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash, user_roles.role_name FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id JOIN user_roles ON users.user_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash, user_permissions.permission_name FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id JOIN user_permissions ON users.user_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name, user_permissions.permission_name FROM users JOIN user_roles ON users.user_id = user_roles.role_id JOIN user_permissions ON users.user_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_credentials WHERE credential_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'JohnDoe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles WHERE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, users.username, user_roles.role_name FROM users JOIN user_roles ON users.user_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash, user_roles.role_name FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id JOIN user_roles ON user_roles.role_id = user_credentials.credential_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, password FROM users WHERE username = 'example_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE '%test%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_roles.role_name, COUNT(*) FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id JOIN user_roles ON user_roles.role_id = user_credentials.credential_id GROUP BY user_roles.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users LEFT JOIN user_credentials ON users.user_id = user_credentials.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name FROM users RIGHT JOIN user_roles ON users.user_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users INNER JOIN user_credentials ON users.user_id = user_credentials.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name FROM users LEFT JOIN user_roles ON users.user_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id > 10 AND user_id < 20;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name FROM users JOIN user_roles ON users.user_id = user_roles.role_id WHERE user_roles.role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id WHERE users.username = 'admin_user' AND user_credentials.password_hash = 'hashed_password';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_roles.role_name, COUNT(*) FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id JOIN user_roles ON user_roles.role_id = user_credentials.credential_id GROUP BY user_roles.role_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id ORDER BY users.username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_credentials.password_hash FROM users JOIN user_credentials ON users.user_id = user_credentials.user_id ORDER BY user_credentials.password_hash DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT users.username, user_roles.role_name FROM users JOIN user_roles ON users.user_id = user_roles.role_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM passwords",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT id, username FROM passwords",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT name, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT name FROM users WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM roles",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM roles",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_passwords",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT user_id, password_id FROM user_passwords",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u JOIN passwords p ON u.user_id = p.id",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password, r.role_name FROM users u JOIN user_passwords up ON u.user_id = up.user_id JOIN passwords p ON up.password_id = p.id JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.*, r.* FROM users u, roles r",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT username FROM passwords WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users WHERE user_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT * FROM roles WHERE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT user_id FROM user_roles WHERE role_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u JOIN user_passwords up ON u.user_id = up.user_id JOIN passwords p ON up.password_id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u JOIN user_passwords up ON u.user_id = up.user_id JOIN passwords p ON up.password_id = p.id WHERE u.user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id WHERE r.role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u LEFT JOIN user_passwords up ON u.user_id = up.user_id LEFT JOIN passwords p ON up.password_id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u LEFT JOIN user_roles ur ON u.user_id = ur.user_id LEFT JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u LEFT JOIN user_passwords up ON u.user_id = up.user_id LEFT JOIN passwords p ON up.password_id = p.id WHERE u.user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u LEFT JOIN user_roles ur ON u.user_id = ur.user_id LEFT JOIN roles r ON ur.role_id = r.role_id WHERE r.role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u RIGHT JOIN user_passwords up ON u.user_id = up.user_id RIGHT JOIN passwords p ON up.password_id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u RIGHT JOIN user_roles ur ON u.user_id = ur.user_id RIGHT JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u RIGHT JOIN user_passwords up ON u.user_id = up.user_id RIGHT JOIN passwords p ON up.password_id = p.id WHERE u.user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u RIGHT JOIN user_roles ur ON u.user_id = ur.user_id RIGHT JOIN roles r ON ur.role_id = r.role_id WHERE r.role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, p.password FROM users u FULL JOIN user_passwords up ON u.user_id = up.user_id FULL JOIN passwords p ON up.password_id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nSELECT u.name, r.role_name FROM users u FULL JOIN user_roles ur ON u.user_id = ur.user_id FULL JOIN roles r ON ur.role_id = r.role_id;"
]