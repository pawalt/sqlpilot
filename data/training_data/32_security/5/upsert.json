[
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (1, 'user1', 'hash1') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (2, 'user2', 'hash2') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (3, 'user3', 'hash3') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (4, 'user4', 'hash4') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (5, 'user5', 'hash5') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (6, 'user6', 'hash6') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (7, 'user7', 'hash7') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (8, 'user8', 'hash8') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (9, 'user9', 'hash9') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (10, 'user10', 'hash10') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (11, 'user11', 'hash11') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (12, 'user12', 'hash12') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (13, 'user13', 'hash13') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (14, 'user14', 'hash14') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (15, 'user15', 'hash15') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (16, 'user16', 'hash16') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (17, 'user17', 'hash17') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (18, 'user18', 'hash18') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (19, 'user19', 'hash19') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (20, 'user20', 'hash20') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (1, 'john.doe', E'\\x0102030405')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (2, 'jane.smith', E'\\x06070809')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (3, 'alice.jones', E'\\x0A0B0C0D')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (4, 'bob.jenkins', E'\\x0E0F1011')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (5, 'sara.brown', E'\\x12131415')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (6, 'mike.adams', E'\\x16171819')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (7, 'lisa.miller', E'\\x1A1B1C1D')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (8, 'kevin.smith', E'\\x1E1F2021')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (9, 'emily.davis', E'\\x22232425')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (10, 'peter.wilson', E'\\x26272829')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (11, 'hannah.baker', E'\\x2A2B2C2D')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (12, 'patrick.green', E'\\x2E2F3031')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (13, 'maria.white', E'\\x32333435')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (14, 'david.smith', E'\\x36373839')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (15, 'olivia.jones', E'\\x3A3B3C3D')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (16, 'samuel.brown', E'\\x3E3F4041')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (17, 'sophia.miller', E'\\x42434445')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (18, 'max.johnson', E'\\x46474849')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (19, 'ella.davis', E'\\x4A4B4C4D')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password_hash BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO passwords (id, username, password_hash) VALUES (20, 'jacob.wilson', E'\\x4E4F5051')",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (1, 'user1', '\\x68617368656470617373776f72642031') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (2, 'user2', '\\x68617368656470617373776f72642032') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (3, 'user3', '\\x68617368656470617373776f72642033') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (4, 'user4', '\\x68617368656470617373776f72642034') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (5, 'user5', '\\x68617368656470617373776f72642035') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (6, 'user6', '\\x68617368656470617373776f72642036') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (7, 'user7', '\\x68617368656470617373776f72642037') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXC...",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (1, 'john_doe', 'hashed_password_1') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated', password_hash = 'updated_hashed_password_1';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (2, 'jane_smith', 'hashed_password_2') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith_updated', password_hash = 'updated_hashed_password_2';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (3, 'alice_miller', 'hashed_password_3') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_miller_updated', password_hash = 'updated_hashed_password_3';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (4, 'peter_wilson', 'hashed_password_4') ON CONFLICT (user_id) DO UPDATE SET username = 'peter_wilson_updated', password_hash = 'updated_hashed_password_4';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (5, 'sara_jones', 'hashed_password_5') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_jones_updated', password_hash = 'updated_hashed_password_5';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (6, 'alex_wood', 'hashed_password_6') ON CONFLICT (user_id) DO UPDATE SET username = 'alex_wood_updated', password_hash = 'updated_hashed_password_6';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (7, 'linda_brown', 'hashed_password_7') ON CONFLICT (user_id) DO UPDATE SET username = 'linda_brown_updated', password_hash = 'updated_hashed_password_7';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (8, 'michael_hill', 'hashed_password_8') ON CONFLICT (user_id) DO UPDATE SET username = 'michael_hill_updated', password_hash = 'updated_hashed_password_8';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (9, 'sophia_adams', 'hashed_password_9') ON CONFLICT (user_id) DO UPDATE SET username = 'sophia_adams_updated', password_hash = 'updated_hashed_password_9';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (10, 'mark_evans', 'hashed_password_10') ON CONFLICT (user_id) DO UPDATE SET username = 'mark_evans_updated', password_hash = 'updated_hashed_password_10';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (11, 'emily_parker', 'hashed_password_11') ON CONFLICT (user_id) DO UPDATE SET username = 'emily_parker_updated', password_hash = 'updated_hashed_password_11';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (12, 'jason_smith', 'hashed_password_12') ON CONFLICT (user_id) DO UPDATE SET username = 'jason_smith_updated', password_hash = 'updated_hashed_password_12';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (13, 'olivia_brown', 'hashed_password_13') ON CONFLICT (user_id) DO UPDATE SET username = 'olivia_brown_updated', password_hash = 'updated_hashed_password_13';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (14, 'ethan_wilson', 'hashed_password_14') ON CONFLICT (user_id) DO UPDATE SET username = 'ethan_wilson_updated', password_hash = 'updated_hashed_password_14';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (15, 'ava_white', 'hashed_password_15') ON CONFLICT (user_id) DO UPDATE SET username = 'ava_white_updated', password_hash = 'updated_hashed_password_15';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (16, 'william_young', 'hashed_password_16') ON CONFLICT (user_id) DO UPDATE SET username = 'william_young_updated', password_hash = 'updated_hashed_password_16';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (17, 'chloe_carter', 'hashed_password_17') ON CONFLICT (user_id) DO UPDATE SET username = 'chloe_carter_updated', password_hash = 'updated_hashed_password_17';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (18, 'benjamin_hall', 'hashed_password_18') ON CONFLICT (user_id) DO UPDATE SET username = 'benjamin_hall_updated', password_hash = 'updated_hashed_password_18';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (19, 'madison_rogers', 'hashed_password_19') ON CONFLICT (user_id) DO UPDATE SET username = 'madison_rogers_updated', password_hash = 'updated_hashed_password_19';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, username, password_hash) VALUES (20, 'logan_king', 'hashed_password_20') ON CONFLICT (user_id) DO UPDATE SET username = 'logan_king_updated', password_hash = 'updated_hashed_password_20';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (1, 'user1', 'hash1') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (2, 'user2', 'hash2') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (1, 'user1', 'user1@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (2, 'user2', 'user2@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (3, 'user3', 'hash3') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (4, 'user4', 'hash4') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (3, 'user3', 'user3@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (4, 'user4', 'user4@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (3, 'user') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (4, 'editor') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (5, 'user5', 'hash5') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (6, 'user6', 'hash6') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (5, 'user5', 'user5@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (6, 'user6', 'user6@example.com') ON DUPLICATE KEY UPDATE username=VALUES(username), email=VALUES(email);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (5, 'editor') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (6, 'admin') ON DUPLICATE KEY UPDATE role=VALUES(role);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (7, 'user7', 'hash7') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (8, 'user8', 'hash8') ON DUPLICATE KEY UPDATE username=VALUES(username), password_hash=VALUES(password_hash);",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (1, 'john_doe', 'hash123') ON DUPLICATE KEY UPDATE password_hash = 'updated_hash123';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john_doe@example.com') ON DUPLICATE KEY UPDATE email = 'updated_john_doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role = 'updated_admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (2, 'jane_smith', 'hash456') ON DUPLICATE KEY UPDATE password_hash = 'updated_hash456';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (2, 'jane_smith', 'jane_smith@example.com') ON DUPLICATE KEY UPDATE email = 'updated_jane_smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (3, 'alice', 'hash789') ON DUPLICATE KEY UPDATE password_hash = 'updated_hash789';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (3, 'alice', 'alice@example.com') ON DUPLICATE KEY UPDATE email = 'updated_alice@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (3, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (4, 'bob', 'hashABC') ON DUPLICATE KEY UPDATE password_hash = 'updated_hashABC';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (4, 'bob', 'bob@example.com') ON DUPLICATE KEY UPDATE email = 'updated_bob@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (4, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (5, 'carol', 'hashDEF') ON DUPLICATE KEY UPDATE password_hash = 'updated_hashDEF';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (5, 'carol', 'carol@example.com') ON DUPLICATE KEY UPDATE email = 'updated_carol@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (5, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (6, 'david', 'hashGHI') ON DUPLICATE KEY UPDATE password_hash = 'updated_hashGHI';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (6, 'david', 'david@example.com') ON DUPLICATE KEY UPDATE email = 'updated_david@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (6, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password_hash) VALUES (7, 'emma', 'hashJKL') ON DUPLICATE KEY UPDATE password_hash = 'updated_hashJKL';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (7, 'emma', 'emma@example.com') ON DUPLICATE KEY UPDATE email = 'updated_emma@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role) VALUES (7, 'user') ON DUPLICATE KEY UPDATE role = 'updated_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (1, 'read') ON DUPLICATE KEY UPDATE permission_name = 'read';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (1, 1, 'hash123') ON DUPLICATE KEY UPDATE user_id = 1, password_hash = 'hash123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'password456') ON DUPLICATE KEY UPDATE username = 'jane_smith', password = 'password456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (2, 'write') ON DUPLICATE KEY UPDATE permission_name = 'write';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (2, 2, 'hash456') ON DUPLICATE KEY UPDATE user_id = 2, password_hash = 'hash456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'james_smith', 'pass123') ON DUPLICATE KEY UPDATE username = 'james_smith', password = 'pass123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (3, 'user') ON DUPLICATE KEY UPDATE role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (3, 'execute') ON DUPLICATE KEY UPDATE permission_name = 'execute';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (3, 3, 'hash789') ON DUPLICATE KEY UPDATE user_id = 3, password_hash = 'hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'alice_jones', 'pass456') ON DUPLICATE KEY UPDATE username = 'alice_jones', password = 'pass456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (4, 'user') ON DUPLICATE KEY UPDATE role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (4, 'update') ON DUPLICATE KEY UPDATE permission_name = 'update';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (4, 4, 'hash012') ON DUPLICATE KEY UPDATE user_id = 4, password_hash = 'hash012';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'alex_clark', 'pass789') ON DUPLICATE KEY UPDATE username = 'alex_clark', password = 'pass789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (5, 'user') ON DUPLICATE KEY UPDATE role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (5, 'delete') ON DUPLICATE KEY UPDATE permission_name = 'delete';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (5, 5, 'hash567') ON DUPLICATE KEY UPDATE user_id = 5, password_hash = 'hash567';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'pass123') ON CONFLICT (user_id) DO UPDATE SET username=excluded.username, password=excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name=excluded.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (1, 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name=excluded.permission_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (1, 1, 'hash123') ON CONFLICT (user_id) DO UPDATE SET user_id=excluded.user_id, password_hash=excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'pass456') ON CONFLICT (user_id) DO UPDATE SET username=excluded.username, password=excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name=excluded.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (2, 'write') ON CONFLICT (permission_id) DO UPDATE SET permission_name=excluded.permission_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (2, 2, 'hash456') ON CONFLICT (user_id) DO UPDATE SET user_id=excluded.user_id, password_hash=excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alice_white', 'pass789') ON CONFLICT (user_id) DO UPDATE SET username=excluded.username, password=excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (3, 'guest') ON CONFLICT (role_id) DO UPDATE SET role_name=excluded.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (3, 'execute') ON CONFLICT (permission_id) DO UPDATE SET permission_name=excluded.permission_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (3, 3, 'hash789') ON CONFLICT (user_id) DO UPDATE SET user_id=excluded.user_id, password_hash=excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'mark_brown', 'passabc') ON CONFLICT (user_id) DO UPDATE SET username=excluded.username, password=excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (4, 'editor') ON CONFLICT (role_id) DO UPDATE SET role_name=excluded.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (4, 'delete') ON CONFLICT (permission_id) DO UPDATE SET permission_name=excluded.permission_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (4, 4, 'hashdef') ON CONFLICT (user_id) DO UPDATE SET user_id=excluded.user_id, password_hash=excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'emma_grey', 'passxyz') ON CONFLICT (user_id) DO UPDATE SET username=excluded.username, password=excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (5, 'viewer') ON CONFLICT (role_id) DO UPDATE SET role_name=excluded.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (5, 'update') ON CONFLICT (permission_id) DO UPDATE SET permission_name=excluded.permission_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_credentials (\n    credential_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(150) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (credential_id, user_id, password_hash) VALUES (5, 5, 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET user_id=excluded.user_id, password_hash=excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (1, 'user1', 'password1') ON DUPLICATE KEY UPDATE username = 'user1', password = 'password1';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE name = 'John Doe', email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'Admin') ON DUPLICATE KEY UPDATE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE user_id = 1, role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE user_id = 1, password_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (2, 'user2', 'password2') ON DUPLICATE KEY UPDATE username = 'user2', password = 'password2';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (2, 'Jane Smith', 'jane.smith@example.com') ON DUPLICATE KEY UPDATE name = 'Jane Smith', email = 'jane.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'User') ON DUPLICATE KEY UPDATE role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE user_id = 2, role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE user_id = 2, password_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (3, 'user3', 'password3') ON DUPLICATE KEY UPDATE username = 'user3', password = 'password3';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com') ON DUPLICATE KEY UPDATE name = 'Alice Johnson', email = 'alice.johnson@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'User') ON DUPLICATE KEY UPDATE role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE user_id = 3, role_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE user_id = 3, password_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (4, 'user4', 'password4') ON DUPLICATE KEY UPDATE username = 'user4', password = 'password4';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (4, 'Bob Williams', 'bob.williams@example.com') ON DUPLICATE KEY UPDATE name = 'Bob Williams', email = 'bob.williams@example.com';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (4, 'User') ON DUPLICATE KEY UPDATE role_name = 'User';",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE user_id = 4, role_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE user_id = 4, password_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (1, 'john_doe', 'bXYxMjM0NTY=') ON DUPLICATE KEY UPDATE username='john_doe', password='cXdlcnR5MTIzNDU2'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (id, username, password) VALUES (2, 'jane_smith', 'bXYxMjM0NTY=') ON DUPLICATE KEY UPDATE username='jane_smith', password='cXdlcnR5MTIzNDU2'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, name, email) VALUES (2, 'Jane Smith', 'jane.smith@example.com') ON DUPLICATE KEY UPDATE name='Jane Smith', email='jane.smith@example.com'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'Admin') ON DUPLICATE KEY UPDATE role_name='Admin'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'User') ON DUPLICATE KEY UPDATE role_name='User'",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE role_id=1",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE role_id=2",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE password_id=1",
  "### TABLEDATA\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARBINARY(100) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n\nCREATE TABLE user_passwords (\n    user_id INT,\n    password_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (password_id) REFERENCES passwords(id)\n);\n\n### STATEMENT\n\nINSERT INTO user_passwords (user_id, password_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE password_id=2"
]