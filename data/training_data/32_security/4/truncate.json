[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users RESTART IDENTITY;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users RESTART IDENTITY;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE role_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_permissions; TRUNCATE TABLE role_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE role_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_permissions; TRUNCATE TABLE role_permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nTRUNCATE TABLE permissions CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE permissions;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nTRUNCATE TABLE permissions;"
]