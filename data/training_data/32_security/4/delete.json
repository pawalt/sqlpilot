[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE username = 'JohnDoe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 5 AND username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id IN (SELECT user_id FROM users WHERE username = 'admin' AND password = 'admin123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = (SELECT MAX(user_id) FROM users);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM user_permissions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM role_permissions WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM user_permissions WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM user_permissions WHERE user_id = 101 AND permission_level = 2;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM user_permissions WHERE permission_level = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nDELETE FROM role_permissions WHERE role_id = 201 AND permission = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 101 AND username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 201 AND role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nDELETE FROM user_roles WHERE user_id = 101 AND role_id = 201;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM user_roles WHERE user_id = 3 AND role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM permissions WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM user_roles WHERE user_id = 123 AND role_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM roles WHERE role_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nDELETE FROM permissions WHERE permission_id = 987;"
]