[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, password FROM users WHERE username = 'jane_smith';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id > 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'a%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id < 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id FROM users WHERE username IN ('alice', 'bob', 'charlie');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE password IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, LENGTH(username) AS username_length FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' AND password = 'admin123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE '%smith%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE '%john%' OR username LIKE '%jane%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id > 10 AND user_id < 20;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total FROM users GROUP BY user_id HAVING total > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, password FROM users WHERE username = 'admin' UNION SELECT user_id, username, password FROM users WHERE username = 'root';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = (SELECT MAX(user_id) FROM users);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id IN (SELECT user_id FROM users WHERE username = 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE LENGTH(username) > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username REGEXP '^[a-zA-Z0-9_]+$';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username IN ('john_doe', 'jane_smith');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, password FROM users ORDER BY username DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, password FROM users WHERE user_id = username;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT * FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT * FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT role_id, permission FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT role_id, permission FROM role_permissions WHERE role_id = 1",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE permission_level > 5",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT role_id, permission FROM role_permissions WHERE permission LIKE '%read%'",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id FROM user_permissions WHERE user_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT role_id, permission FROM role_permissions WHERE role_id IN (1, 2)",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT MAX(permission_level) FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT MIN(permission_level) FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level + 1 FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT permission, UPPER(permission) FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT DISTINCT permission_level FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT AVG(permission_level) FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT SUM(permission_level) FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions ORDER BY permission_level DESC",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE permission_level > 5",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE user_id IN (SELECT user_id FROM user_permissions WHERE permission_level = 10)",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE user_id BETWEEN 1 AND 100",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE user_id = 50 AND permission_level = 10",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions ORDER BY user_id ASC",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions ORDER BY permission_level DESC",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE user_id = (SELECT MAX(user_id) FROM user_permissions)",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id, permission_level FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(permission_level) AS total_permissions FROM user_permissions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(permission_level) AS total_permissions FROM user_permissions GROUP BY user_id HAVING COUNT(permission_level) > 2",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id AS ID, permission_level AS PermissionLevel FROM user_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions UNION SELECT role_id, permission FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions INNER JOIN role_permissions ON user_id = role_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions LEFT JOIN role_permissions ON user_id = role_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions RIGHT JOIN role_permissions ON user_id = role_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions FULL JOIN role_permissions ON user_id = role_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions INNER JOIN role_permissions ON user_id = role_id WHERE permission = 'read'",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(permission_level) AS average_permissions FROM user_permissions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nSELECT user_id, permission_level FROM user_permissions WHERE permission_level IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE user_id = 1 AND role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u LEFT JOIN user_roles ur ON u.user_id = ur.user_id LEFT JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT MIN(role_id) FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT(username) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_roles WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM user_roles GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT u.user_id, ur.role_id FROM users u INNER JOIN user_roles ur ON u.user_id = ur.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT SUM(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 1 AND username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users INNER JOIN roles ON users.user_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users INNER JOIN user_roles ON users.user_id = user_roles.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_roles FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, COUNT(user_roles.role_id) AS total_user_roles FROM users LEFT JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, COUNT(user_roles.role_id) AS total_user_roles FROM users LEFT JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY users.user_id HAVING COUNT(user_roles.role_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, username FROM users WHERE EXISTS (SELECT 1 FROM user_roles WHERE users.user_id = user_roles.user_id);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, username FROM users WHERE NOT EXISTS (SELECT 1 FROM user_roles WHERE users.user_id = user_roles.user_id);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE '%e%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT users.user_id, MAX(user_roles.role_id) AS max_role_id FROM users JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name <> 'User';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_name FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT permission_name FROM permissions WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users JOIN user_roles ON users.id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE users.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM roles ORDER BY role_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(role_id) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(permission_id) FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(permission_id) FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(role_id) FROM user_roles GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM permissions OFFSET 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM user_roles GROUP BY user_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users UNION SELECT * FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, p.permission_name FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.role_id JOIN permissions p ON r.role_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name, p.permission_name FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.role_id JOIN permissions p ON r.role_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.role_id) FROM users u JOIN user_roles ur ON u.id = ur.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.role_id) FROM users u JOIN user_roles ur ON u.id = ur.user_id GROUP BY u.username HAVING COUNT(ur.role_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM roles WHERE role_name LIKE 'Admin%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE '%doe%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username ILIKE '%DOE%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.role_id) FROM users u JOIN user_roles ur ON u.id = ur.user_id GROUP BY u.username ORDER BY COUNT(ur.role_id) DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.role_id WHERE u.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM roles",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT role_id, role_name FROM roles",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM user_roles",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM permissions",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT permission_id, permission_name FROM permissions",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT role_id, permission_id FROM role_permissions",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT roles.role_name, permissions.permission_name FROM roles JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name, permissions.permission_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE username = 'alice_smith'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT permission_name FROM roles JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT username, permission_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email = 'test@example.com'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT username, permission_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id WHERE username = 'bob_davis'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_name, permission_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id JOIN role_permissions ON roles.role_id = role_permissions.role_id JOIN permissions ON role_permissions.permission_id = permissions.permission_id"
]