[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'p@ssw0rd');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alex_brown', 'securepass');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'sara_jackson', 'pass1234');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'mike_wilson', 'mypassword');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'anna_miller', 'qwertyui');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'chris_evans', 'password456');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (8, 'laura_adams', 'ilovecats');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (9, 'sam_roberts', 'password321');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (10, 'emily_hill', 'cheeseburger');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (11, 'peter_brown', 'letmein123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (12, 'julia_smith', 'password789');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (13, 'david_jones', 'securepass123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (14, 'rachel_hall', 'mypassword456');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (15, 'matt_carter', 'qwerty123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (16, 'olivia_white', 'password007');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (17, 'luke_king', 'ilovenature');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (18, 'sophie_turner', 'password654');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (19, 'jack_morris', 'ilovepizza');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (20, 'natalie_clark', 'passpass');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'securepass');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'peter_parker', 'spiderman1');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'mary_jane', 'lovespiderman');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'bruce_wayne', 'imbatman');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'clark_kent', 'superman2');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'tony_stark', 'ironman33');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (8, 'wanda_maximoff', 'scarletwitch');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (9, 'thor_odinson', 'mjolnirpower');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (10, 'natasha_romanoff', 'blackwidow007');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (11, 'steve_rogers', 'firstavenger');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (12, 'bruce_banner', 'hulksmash');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (13, 'scott_lang', 'antman99');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (14, 'stephen_strange', 'sorcerersupreme');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (15, 'peter_quill', 'starlord12');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (16, 'gamora_', 'deadliestwoman');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (17, 'rocket_raccoon', 'grootisgreat');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (18, 'groot', 'iamgroot');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (19, 'nebula', 'siblingrivalry');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (20, 'drax_the_destroyer', 'nothinggoesoverhead');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (1, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (2, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (3, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (4, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (5, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (6, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (7, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (8, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (9, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (10, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (1, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (2, 'write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (3, 'delete');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (4, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (5, 'write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (6, 'delete');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (7, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (8, 'write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (9, 'delete');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (10, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (1, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (2, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (3, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (4, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (5, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (1, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (2, 'write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (3, 'execute');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (4, 'read_write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (5, 'admin');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (6, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (7, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (8, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (9, 1);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (user_id, permission_level) VALUES (10, 2);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (6, 'read');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (7, 'write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (8, 'execute');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (9, 'read_write');",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission) VALUES (10, 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'alice', 'pass123')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'bob', 'pass456')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'charlie', 'pass789')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'david', 'passabc')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'elena', 'passdef')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'frank', 'passefg')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'grace', 'passhij')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (8, 'henry', 'passklm')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (9, 'isabel', 'passnop')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (10, 'jason', 'passqrs')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (11, 'karen', 'passtuv')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (12, 'lucas', 'passwxy')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (13, 'mary', 'passzab')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (14, 'nathan', 'pass123')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (15, 'olivia', 'pass456')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (16, 'peter', 'pass789')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (17, 'queen', 'passabc')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (18, 'rachel', 'passdef')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (19, 'steve', 'passefg')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (20, 'tina', 'passhij')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'securepwd456');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'user');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alice_harris', 'paSsW0rd!');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'tom_wilson', 'sTr0ngPwd!');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'manager');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (4, 'guest');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 4);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'sam_adams', 'P@ssw0rd!');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'emily_green', 'sEcUr3Pwd!');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (5, 'developer');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (6, 'tester');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('john_doe', 'password123')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('jane_smith', 'securepwd456')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('alex_green', 'strongpass789')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('sara_jones', 'mypassword1')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('admin', 'admin123')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user1', 'userpass1')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user2', 'userpass2')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user3', 'userpass3')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user4', 'userpass4')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('admin')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('user')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('guest')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('manager')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 2)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 3)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (5, 1)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('read')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('write')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('john_doe', 'jdpass123')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('jane_smith', 'jspass456')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('alice_wonderland', 'awpass789')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('admin')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('editor')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('viewer')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('create')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('read')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('update')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 2)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 3)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 1)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 3)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 1)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 2)",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('delete')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_name) VALUES ('administer')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (2, 'jane_smith', 'jane.smith@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (3, 'alice_jones', 'alice.jones@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (4, 'bob_smith', 'bob.smith@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (5, 'sara_adams', 'sara.adams@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (6, 'mike_wilson', 'mike.wilson@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (7, 'lisa_brown', 'lisa.brown@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (8, 'kevin_clark', 'kevin.clark@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (9, 'emily_davis', 'emily.davis@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (10, 'alex_miller', 'alex.miller@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (11, 'oliver_thomas', 'oliver.thomas@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (12, 'natalie_white', 'natalie.white@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (13, 'eric_hall', 'eric.hall@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (14, 'jennifer_wood', 'jennifer.wood@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (15, 'peter_jackson', 'peter.jackson@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (16, 'sophia_harris', 'sophia.harris@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (17, 'matthew_turner', 'matthew.turner@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (18, 'linda_morris', 'linda.morris@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (19, 'jason_lee', 'jason.lee@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (20, 'amanda_parker', 'amanda.parker@example.com')",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name) VALUES (1, 'write_access');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission_id) VALUES (1, 1);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (2, 'jane_smith', 'jane.smith@example.com');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'user');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name) VALUES (2, 'read_access');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission_id) VALUES (2, 2);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (3, 'alice_wonderland', 'alice.wonderland@example.com');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'editor');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name) VALUES (3, 'delete_access');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission_id) VALUES (3, 3);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email) VALUES (4, 'bob_jones', 'bob.jones@example.com');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (4, 'guest');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name) VALUES (4, 'view_access');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nINSERT INTO role_permissions (role_id, permission_id) VALUES (4, 4);"
]