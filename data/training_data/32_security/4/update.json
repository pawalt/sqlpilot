[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username='john_doe' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password='newpassword' WHERE username='jane_smith';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username='alice_jones', password='securepwd' WHERE user_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username='new_username' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password='new_password' WHERE username='john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username='jane_doe', password='new_password' WHERE user_id=2;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_level = 1 WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE role_permissions SET permission = 'READ' WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_level = 2 WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_level = 2 WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_level = 3 WHERE user_id IN (2, 3, 4);",
  "### TABLEDATA\n\nCREATE TABLE user_permissions (\\n    user_id INT PRIMARY KEY,\\n    permission_level INT\\n);\n\nCREATE TABLE role_permissions (\\n    role_id INT PRIMARY KEY,\\n    permission VARCHAR(50)\\n);\n\n### STATEMENT\n\nUPDATE role_permissions SET permission = 'READ_WRITE' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE users SET username='new_username' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name='admin' WHERE role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id=2 WHERE user_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'new_password' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'new_username' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'new_role_name' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE permissions SET permission_name = 'new_permission_name' WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword' WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE roles (\n    role_id SERIAL PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE user_roles (\n    user_id INT REFERENCES users(id) ON DELETE CASCADE,\n    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n\nCREATE TABLE permissions (\n    permission_id SERIAL PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE users SET username='new_username' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE roles SET role_name='new_role_name' WHERE role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE permissions SET permission_name='new_permission_name' WHERE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE users SET email='newemail@example.com' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE roles SET role_name='Admin' WHERE role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL UNIQUE \n);\n\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n\nCREATE TABLE permissions ( \n    permission_id INT PRIMARY KEY, \n    permission_name VARCHAR(50) NOT NULL \n);\n\n\nCREATE TABLE role_permissions ( \n    role_id INT, \n    permission_id INT, \n    PRIMARY KEY (role_id, permission_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id), \n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) \n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id=2 WHERE user_id=3;"
]