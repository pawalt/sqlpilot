[
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'Policy 1', 'Description for Policy 1', 'Type A', '2022-01-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('223e4567-e89b-12d3-a456-426614174001', 'Policy 2', 'Description for Policy 2', 'Type B', '2022-02-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('323e4567-e89b-12d3-a456-426614174002', 'Policy 3', 'Description for Policy 3', 'Type C', '2022-03-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('423e4567-e89b-12d3-a456-426614174003', 'Policy 4', 'Description for Policy 4', 'Type D', '2022-04-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('523e4567-e89b-12d3-a456-426614174004', 'Policy 5', 'Description for Policy 5', 'Type E', '2022-05-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('623e4567-e89b-12d3-a456-426614174005', 'Policy 6', 'Description for Policy 6', 'Type F', '2022-06-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('723e4567-e89b-12d3-a456-426614174006', 'Policy 7', 'Description for Policy 7', 'Type G', '2022-07-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('823e4567-e89b-12d3-a456-426614174007', 'Policy 8', 'Description for Policy 8', 'Type H', '2022-08-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('923e4567-e89b-12d3-a456-426614174008', 'Policy 9', 'Description for Policy 9', 'Type I', '2022-09-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('a23e4567-e89b-12d3-a456-426614174009', 'Policy 10', 'Description for Policy 10', 'Type J', '2022-10-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('b23e4567-e89b-12d3-a456-426614174010', 'Policy 11', 'Description for Policy 11', 'Type K', '2022-11-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('c23e4567-e89b-12d3-a456-426614174011', 'Policy 12', 'Description for Policy 12', 'Type L', '2022-12-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('d23e4567-e89b-12d3-a456-426614174012', 'Policy 13', 'Description for Policy 13', 'Type M', '2023-01-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('e23e4567-e89b-12d3-a456-426614174013', 'Policy 14', 'Description for Policy 14', 'Type N', '2023-02-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('f23e4567-e89b-12d3-a456-426614174014', 'Policy 15', 'Description for Policy 15', 'Type O', '2023-03-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('023e4567-e89b-12d3-a456-426614174015', 'Policy 16', 'Description for Policy 16', 'Type P', '2023-04-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('123e4567-e89b-12d3-a456-426614174016', 'Policy 17', 'Description for Policy 17', 'Type Q', '2023-05-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('223e4567-e89b-12d3-a456-426614174017', 'Policy 18', 'Description for Policy 18', 'Type R', '2023-06-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('323e4567-e89b-12d3-a456-426614174018', 'Policy 19', 'Description for Policy 19', 'Type S', '2023-07-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('423e4567-e89b-12d3-a456-426614174019', 'Policy 20', 'Description for Policy 20', 'Type T', '2023-08-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('1', 'Policy 1', 'Description for Policy 1', 'Type A', '2022-01-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('2', 'Policy 2', 'Description for Policy 2', 'Type B', '2022-02-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('3', 'Policy 3', 'Description for Policy 3', 'Type C', '2022-03-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('4', 'Policy 4', 'Description for Policy 4', 'Type A', '2022-04-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('5', 'Policy 5', 'Description for Policy 5', 'Type B', '2022-05-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('6', 'Policy 6', 'Description for Policy 6', 'Type C', '2022-06-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('7', 'Policy 7', 'Description for Policy 7', 'Type A', '2022-07-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('8', 'Policy 8', 'Description for Policy 8', 'Type B', '2022-08-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('9', 'Policy 9', 'Description for Policy 9', 'Type C', '2022-09-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('10', 'Policy 10', 'Description for Policy 10', 'Type A', '2022-10-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('11', 'Policy 11', 'Description for Policy 11', 'Type B', '2022-11-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('12', 'Policy 12', 'Description for Policy 12', 'Type C', '2022-12-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('13', 'Policy 13', 'Description for Policy 13', 'Type A', '2023-01-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('14', 'Policy 14', 'Description for Policy 14', 'Type B', '2023-02-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('15', 'Policy 15', 'Description for Policy 15', 'Type C', '2023-03-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('16', 'Policy 16', 'Description for Policy 16', 'Type A', '2023-04-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('17', 'Policy 17', 'Description for Policy 17', 'Type B', '2023-05-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('18', 'Policy 18', 'Description for Policy 18', 'Type C', '2023-06-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('19', 'Policy 19', 'Description for Policy 19', 'Type A', '2023-07-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nUPSERT INTO security_policies (id, policy_name, policy_description, policy_type, created_at) VALUES ('20', 'Policy 20', 'Description for Policy 20', 'Type B', '2023-08-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (1, 'Policy 1', 'Description for Policy 1', '2022-01-01 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 1 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (2, 'Policy 2', 'Description for Policy 2', '2022-01-02 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 2 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (3, 'Policy 3', 'Description for Policy 3', '2022-01-03 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 3 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (4, 'Policy 4', 'Description for Policy 4', '2022-01-04 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 4 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (5, 'Policy 5', 'Description for Policy 5', '2022-01-05 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 5 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (6, 'Policy 6', 'Description for Policy 6', '2022-01-06 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 6 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (7, 'Policy 7', 'Description for Policy 7', '2022-01-07 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 7 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (8, 'Policy 8', 'Description for Policy 8', '2022-01-08 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 8 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (9, 'Policy 9', 'Description for Policy 9', '2022-01-09 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 9 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (10, 'Policy 10', 'Description for Policy 10', '2022-01-10 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 10 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (11, 'Policy 11', 'Description for Policy 11', '2022-01-11 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 11 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (12, 'Policy 12', 'Description for Policy 12', '2022-01-12 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 12 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (13, 'Policy 13', 'Description for Policy 13', '2022-01-13 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 13 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (14, 'Policy 14', 'Description for Policy 14', '2022-01-14 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 14 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (15, 'Policy 15', 'Description for Policy 15', '2022-01-15 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 15 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (16, 'Policy 16', 'Description for Policy 16', '2022-01-16 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 16 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (17, 'Policy 17', 'Description for Policy 17', '2022-01-17 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 17 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (18, 'Policy 18', 'Description for Policy 18', '2022-01-18 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 18 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (19, 'Policy 19', 'Description for Policy 19', '2022-01-19 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 19 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (20, 'Policy 20', 'Description for Policy 20', '2022-01-20 00:00:00') ON DUPLICATE KEY UPDATE policy_name='Policy 20 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (1, 'Policy 1', 'Description for Policy 1', '2022-06-01') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 1 Updated';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (2, 'Policy 2', 'Description for Policy 2', '2022-06-02') ON CONFLICT (policy_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (3, 'Policy 3', 'Description for Policy 3', '2022-06-03') ON CONFLICT (policy_id) DO UPDATE SET policy_description = 'Updated Description for Policy 3';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (4, 'Policy 4', 'Description for Policy 4', '2022-06-04') ON CONFLICT (policy_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO security_policies (policy_id, policy_name, policy_description, created_at) VALUES (5, 'Policy 5', 'Description for Policy 5', '2022-06-05') ON CONFLICT (policy_id) DO UPDATE SET created_at = '2022-06-06';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO compliance_monitoring (monitoring_id, policy_id, monitoring_date, monitoring_result) VALUES (1, 1, '2022-06-01', 'Passed') ON CONFLICT (monitoring_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO compliance_monitoring (monitoring_id, policy_id, monitoring_date, monitoring_result) VALUES (2, 2, '2022-06-02', 'Failed') ON CONFLICT (monitoring_id) DO UPDATE SET monitoring_result = 'Passed';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO compliance_monitoring (monitoring_id, policy_id, monitoring_date, monitoring_result) VALUES (3, 3, '2022-06-03', 'Passed') ON CONFLICT (monitoring_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO compliance_monitoring (monitoring_id, policy_id, monitoring_date, monitoring_result) VALUES (4, 4, '2022-06-04', 'Failed') ON CONFLICT (monitoring_id) DO UPDATE SET monitoring_result = 'Passed';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO compliance_monitoring (monitoring_id, policy_id, monitoring_date, monitoring_result) VALUES (5, 5, '2022-06-05', 'Failed') ON CONFLICT (monitoring_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (1, 'Policy 1', 'Description for Policy 1', '2022-01-01 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 1 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (1, 'Rule 1', 'Description for Rule 1', '2022-01-01 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 1 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (1, 1, 1, '2022-01-01 12:00:00') ON DUPLICATE KEY UPDATE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (2, 'Policy 2', 'Description for Policy 2', '2022-01-02 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 2 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (2, 'Rule 2', 'Description for Rule 2', '2022-01-02 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 2 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (2, 2, 2, '2022-01-02 12:00:00') ON DUPLICATE KEY UPDATE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (3, 'Policy 3', 'Description for Policy 3', '2022-01-03 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 3 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (3, 'Rule 3', 'Description for Rule 3', '2022-01-03 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 3 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (3, 3, 3, '2022-01-03 12:00:00') ON DUPLICATE KEY UPDATE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (4, 'Policy 4', 'Description for Policy 4', '2022-01-04 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 4 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (4, 'Rule 4', 'Description for Rule 4', '2022-01-04 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 4 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (4, 4, 4, '2022-01-04 12:00:00') ON DUPLICATE KEY UPDATE user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (5, 'Policy 5', 'Description for Policy 5', '2022-01-05 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 5 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (5, 'Rule 5', 'Description for Rule 5', '2022-01-05 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 5 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (5, 5, 5, '2022-01-05 12:00:00') ON DUPLICATE KEY UPDATE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (6, 'Policy 6', 'Description for Policy 6', '2022-01-06 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 6 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (6, 'Rule 6', 'Description for Rule 6', '2022-01-06 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 6 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (6, 6, 6, '2022-01-06 12:00:00') ON DUPLICATE KEY UPDATE user_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (7, 'Policy 7', 'Description for Policy 7', '2022-01-07 12:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 7 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (7, 'Rule 7', 'Description for Rule 7', '2022-01-07 12:00:00') ON DUPLICATE KEY UPDATE rule_name = 'Rule 7 updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (7, 7, 7, '2022-01-07 12:00:00') ON DUPLICATE KEY UPDATE user_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (1, 'Policy 1', 'Description for Policy 1', '2022-01-01 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 1 Updated', policy_description = 'Updated Description for Policy 1';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (1, 'Rule 1', 'Description for Rule 1', '2022-01-01 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 1 Updated', rule_description = 'Updated Description for Rule 1';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (1, 1, 1001, '2022-01-01 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 1, user_id = 1001, assigned_at = '2022-01-01 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (2, 'Policy 2', 'Description for Policy 2', '2022-01-02 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 2 Updated', policy_description = 'Updated Description for Policy 2';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (2, 'Rule 2', 'Description for Rule 2', '2022-01-02 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 2 Updated', rule_description = 'Updated Description for Rule 2';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (2, 2, 1002, '2022-01-02 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 2, user_id = 1002, assigned_at = '2022-01-02 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (3, 'Policy 3', 'Description for Policy 3', '2022-01-03 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 3 Updated', policy_description = 'Updated Description for Policy 3';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (3, 'Rule 3', 'Description for Rule 3', '2022-01-03 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 3 Updated', rule_description = 'Updated Description for Rule 3';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (3, 3, 1003, '2022-01-03 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 3, user_id = 1003, assigned_at = '2022-01-03 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (4, 'Policy 4', 'Description for Policy 4', '2022-01-04 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 4 Updated', policy_description = 'Updated Description for Policy 4';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (4, 'Rule 4', 'Description for Rule 4', '2022-01-04 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 4 Updated', rule_description = 'Updated Description for Rule 4';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (4, 4, 1004, '2022-01-04 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 4, user_id = 1004, assigned_at = '2022-01-04 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (5, 'Policy 5', 'Description for Policy 5', '2022-01-05 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 5 Updated', policy_description = 'Updated Description for Policy 5';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (5, 'Rule 5', 'Description for Rule 5', '2022-01-05 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 5 Updated', rule_description = 'Updated Description for Rule 5';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (5, 5, 1005, '2022-01-05 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 5, user_id = 1005, assigned_at = '2022-01-05 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (6, 'Policy 6', 'Description for Policy 6', '2022-01-06 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 6 Updated', policy_description = 'Updated Description for Policy 6';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (6, 'Rule 6', 'Description for Rule 6', '2022-01-06 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 6 Updated', rule_description = 'Updated Description for Rule 6';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (6, 6, 1006, '2022-01-06 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 6, user_id = 1006, assigned_at = '2022-01-06 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, created_at) VALUES (7, 'Policy 7', 'Description for Policy 7', '2022-01-07 10:00:00') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Policy 7 Updated', policy_description = 'Updated Description for Policy 7';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO ComplianceRules (rule_id, rule_name, rule_description, created_at) VALUES (7, 'Rule 7', 'Description for Rule 7', '2022-01-07 10:00:00') ON CONFLICT (rule_id) DO UPDATE SET rule_name = 'Rule 7 Updated', rule_description = 'Updated Description for Rule 7';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO PolicyAssignments (assignment_id, policy_id, user_id, assigned_at) VALUES (7, 7, 1007, '2022-01-07 10:00:00') ON CONFLICT (assignment_id) DO UPDATE SET policy_id = 7, user_id = 1007, assigned_at = '2022-01-07 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (1, 'Policy 1', 'Description 1', 'Type 1') ON CONFLICT (policy_id) DO UPDATE SET policy_name = EXCLUDED.policy_name, policy_description = EXCLUDED.policy_description, policy_type = EXCLUDED.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (1, 1, '2022-01-01', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, date_checked = EXCLUDED.date_checked, pass_fail = EXCLUDED.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (1, 1, 'Config 1', 'Value 1') ON CONFLICT (config_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, config_name = EXCLUDED.config_name, config_value = EXCLUDED.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (1, 'User 1', 'user1@example.com', 'Admin') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (2, 'Policy 2', 'Description 2', 'Type 2') ON CONFLICT (policy_id) DO UPDATE SET policy_name = EXCLUDED.policy_name, policy_description = EXCLUDED.policy_description, policy_type = EXCLUDED.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (2, 2, '2022-01-02', FALSE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, date_checked = EXCLUDED.date_checked, pass_fail = EXCLUDED.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (2, 2, 'Config 2', 'Value 2') ON CONFLICT (config_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, config_name = EXCLUDED.config_name, config_value = EXCLUDED.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (2, 'User 2', 'user2@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (3, 'Policy 3', 'Description 3', 'Type 3') ON CONFLICT (policy_id) DO UPDATE SET policy_name = EXCLUDED.policy_name, policy_description = EXCLUDED.policy_description, policy_type = EXCLUDED.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (3, 3, '2022-01-03', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, date_checked = EXCLUDED.date_checked, pass_fail = EXCLUDED.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (3, 3, 'Config 3', 'Value 3') ON CONFLICT (config_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, config_name = EXCLUDED.config_name, config_value = EXCLUDED.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (3, 'User 3', 'user3@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (4, 'Policy 4', 'Description 4', 'Type 4') ON CONFLICT (policy_id) DO UPDATE SET policy_name = EXCLUDED.policy_name, policy_description = EXCLUDED.policy_description, policy_type = EXCLUDED.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (4, 4, '2022-01-04', FALSE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, date_checked = EXCLUDED.date_checked, pass_fail = EXCLUDED.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (4, 4, 'Config 4', 'Value 4') ON CONFLICT (config_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, config_name = EXCLUDED.config_name, config_value = EXCLUDED.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (4, 'User 4', 'user4@example.com', 'Admin') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (5, 'Policy 5', 'Description 5', 'Type 5') ON CONFLICT (policy_id) DO UPDATE SET policy_name = EXCLUDED.policy_name, policy_description = EXCLUDED.policy_description, policy_type = EXCLUDED.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (5, 5, '2022-01-05', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, date_checked = EXCLUDED.date_checked, pass_fail = EXCLUDED.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (5, 5, 'Config 5', 'Value 5') ON CONFLICT (config_id) DO UPDATE SET policy_id = EXCLUDED.policy_id, config_name = EXCLUDED.config_name, config_value = EXCLUDED.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (5, 'User 5', 'user5@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (1, 'Policy 1', 'Description for Policy 1', 'Type 1') ON CONFLICT (policy_id) DO UPDATE SET policy_name = excluded.policy_name, policy_description = excluded.policy_description, policy_type = excluded.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (1, 1, '2022-01-01', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = excluded.policy_id, date_checked = excluded.date_checked, pass_fail = excluded.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (1, 1, 'Config 1', 'Value for Config 1') ON CONFLICT (config_id) DO UPDATE SET policy_id = excluded.policy_id, config_name = excluded.config_name, config_value = excluded.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (1, 'User1', 'user1@example.com', 'Admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (2, 'Policy 2', 'Description for Policy 2', 'Type 2') ON CONFLICT (policy_id) DO UPDATE SET policy_name = excluded.policy_name, policy_description = excluded.policy_description, policy_type = excluded.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (2, 2, '2022-01-02', FALSE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = excluded.policy_id, date_checked = excluded.date_checked, pass_fail = excluded.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (2, 2, 'Config 2', 'Value for Config 2') ON CONFLICT (config_id) DO UPDATE SET policy_id = excluded.policy_id, config_name = excluded.config_name, config_value = excluded.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (2, 'User2', 'user2@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (3, 'Policy 3', 'Description for Policy 3', 'Type 3') ON CONFLICT (policy_id) DO UPDATE SET policy_name = excluded.policy_name, policy_description = excluded.policy_description, policy_type = excluded.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (3, 3, '2022-01-03', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = excluded.policy_id, date_checked = excluded.date_checked, pass_fail = excluded.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (3, 3, 'Config 3', 'Value for Config 3') ON CONFLICT (config_id) DO UPDATE SET policy_id = excluded.policy_id, config_name = excluded.config_name, config_value = excluded.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (3, 'User3', 'user3@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (4, 'Policy 4', 'Description for Policy 4', 'Type 4') ON CONFLICT (policy_id) DO UPDATE SET policy_name = excluded.policy_name, policy_description = excluded.policy_description, policy_type = excluded.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (4, 4, '2022-01-04', FALSE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = excluded.policy_id, date_checked = excluded.date_checked, pass_fail = excluded.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (4, 4, 'Config 4', 'Value for Config 4') ON CONFLICT (config_id) DO UPDATE SET policy_id = excluded.policy_id, config_name = excluded.config_name, config_value = excluded.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (4, 'User4', 'user4@example.com', 'User') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO security_policies (policy_id, policy_name, policy_description, policy_type) VALUES (5, 'Policy 5', 'Description for Policy 5', 'Type 5') ON CONFLICT (policy_id) DO UPDATE SET policy_name = excluded.policy_name, policy_description = excluded.policy_description, policy_type = excluded.policy_type;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO compliance_monitoring (monitoring_id, policy_id, date_checked, pass_fail) VALUES (5, 5, '2022-01-05', TRUE) ON CONFLICT (monitoring_id) DO UPDATE SET policy_id = excluded.policy_id, date_checked = excluded.date_checked, pass_fail = excluded.pass_fail;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO configurations (config_id, policy_id, config_name, config_value) VALUES (5, 5, 'Config 5', 'Value for Config 5') ON CONFLICT (config_id) DO UPDATE SET policy_id = excluded.policy_id, config_name = excluded.config_name, config_value = excluded.config_value;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, role) VALUES (5, 'User5', 'user5@example.com', 'Admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (1, 'Policy 1', 'Description for Policy 1', 'access', 'enabled', '2022-01-01 00:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 1 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (2, 'Policy 2', 'Description for Policy 2', 'data', 'enabled', '2022-01-02 00:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 2 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (3, 'Policy 3', 'Description for Policy 3', 'network', 'disabled', '2022-01-03 00:00:00') ON DUPLICATE KEY UPDATE policy_status = 'enabled';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (4, 'Policy 4', 'Description for Policy 4', 'access', 'disabled', '2022-01-04 00:00:00') ON DUPLICATE KEY UPDATE policy_description = 'Updated Description for Policy 4';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (5, 'Policy 5', 'Description for Policy 5', 'data', 'enabled', '2022-01-05 00:00:00') ON DUPLICATE KEY UPDATE policy_type = 'network';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (6, 'Policy 6', 'Description for Policy 6', 'network', 'disabled', '2022-01-06 00:00:00') ON DUPLICATE KEY UPDATE policy_status = 'enabled';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (7, 'Policy 7', 'Description for Policy 7', 'access', 'enabled', '2022-01-07 00:00:00') ON DUPLICATE KEY UPDATE policy_name = 'Policy 7 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (8, 'Policy 8', 'Description for Policy 8', 'data', 'disabled', '2022-01-08 00:00:00') ON DUPLICATE KEY UPDATE policy_type = 'network';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (9, 'Policy 9', 'Description for Policy 9', 'network', 'enabled', '2022-01-09 00:00:00') ON DUPLICATE KEY UPDATE policy_status = 'disabled';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (10, 'Policy 10', 'Description for Policy 10', 'access', 'enabled', '2022-01-10 00:00:00') ON DUPLICATE KEY UPDATE policy_description = 'Updated Description for Policy 10';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (1, 1, 'daily', '2022-01-01', 'pass') ON DUPLICATE KEY UPDATE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (2, 2, 'weekly', '2022-01-02', 'fail') ON DUPLICATE KEY UPDATE monitor_status = 'pass';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (3, 3, 'monthly', '2022-01-03', 'pass') ON DUPLICATE KEY UPDATE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (4, 4, 'daily', '2022-01-04', 'fail') ON DUPLICATE KEY UPDATE monitor_status = 'pass';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (5, 5, 'weekly', '2022-01-05', 'pass') ON DUPLICATE KEY UPDATE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (6, 6, 'monthly', '2022-01-06', 'fail') ON DUPLICATE KEY UPDATE monitor_status = 'pass';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (7, 7, 'daily', '2022-01-07', 'pass') ON DUPLICATE KEY UPDATE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (8, 8, 'weekly', '2022-01-08', 'fail') ON DUPLICATE KEY UPDATE monitor_status = 'pass';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (9, 9, 'monthly', '2022-01-09', 'pass') ON DUPLICATE KEY UPDATE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (10, 10, 'daily', '2022-01-10', 'fail') ON DUPLICATE KEY UPDATE monitor_status = 'pass';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (1, 'Setting 1', 'Value for Setting 1', 'boolean', '2022-01-01 00:00:00') ON DUPLICATE KEY UPDATE setting_value = 'Updated Value for Setting 1';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (2, 'Setting 2', 'Value for Setting 2', 'numeric', '2022-01-02 00:00:00') ON DUPLICATE KEY UPDATE setting_name = 'Setting 2 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (3, 'Setting 3', 'Value for Setting 3', 'string', '2022-01-03 00:00:00') ON DUPLICATE KEY UPDATE setting_type = 'boolean';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (4, 'Setting 4', 'Value for Setting 4', 'boolean', '2022-01-04 00:00:00') ON DUPLICATE KEY UPDATE setting_name = 'Setting 4 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (5, 'Setting 5', 'Value for Setting 5', 'numeric', '2022-01-05 00:00:00') ON DUPLICATE KEY UPDATE setting_value = 'Updated Value for Setting 5';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (6, 'Setting 6', 'Value for Setting 6', 'string', '2022-01-06 00:00:00') ON DUPLICATE KEY UPDATE setting_type = 'boolean';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (7, 'Setting 7', 'Value for Setting 7', 'boolean', '2022-01-07 00:00:00') ON DUPLICATE KEY UPDATE setting_name = 'Setting 7 Updated';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (8, 'Setting 8', 'Value for Setting 8', 'numeric', '2022-01-08 00:00:00') ON DUPLICATE KEY UPDATE setting_value = 'Updated Value for Setting 8';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (9, 'Setting 9', 'Value for Setting 9', 'string', '2022-01-09 00:00:00') ON DUPLICATE KEY UPDATE setting_type = 'boolean';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (10, 'Setting 10', 'Value for Setting 10', 'boolean', '2022-01-10 00:00:00') ON DUPLICATE KEY UPDATE setting_value = 'Updated Value for Setting 10';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (1, 'Access Control Policy', 'Controls access to resources', 'access', 'enabled', '2022-01-01 08:00:00') ON DUPLICATE KEY UPDATE policy_name = VALUES(policy_name), policy_description = VALUES(policy_description), policy_type = VALUES(policy_type), policy_status = VALUES(policy_status), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (1, 1, 'daily', '2022-01-01', 'pass') ON DUPLICATE KEY UPDATE policy_id = VALUES(policy_id), monitor_type = VALUES(monitor_type), monitor_date = VALUES(monitor_date), monitor_status = VALUES(monitor_status);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (1, 'SecurityLevel', 'High', 'string', '2022-01-01 08:00:00') ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value), setting_type = VALUES(setting_type), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO AuditingLogs (log_id, log_type, log_message, log_timestamp) VALUES (1, 'audit', 'User accessed the system', '2022-01-01 12:00:00') ON DUPLICATE KEY UPDATE log_type = VALUES(log_type), log_message = VALUES(log_message), log_timestamp = VALUES(log_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password_hash, role, last_login) VALUES (1, 'admin1', 'admin1@example.com', 'hash123', 'admin', '2022-01-01 08:00:00') ON DUPLICATE KEY UPDATE username = VALUES(username), email = VALUES(email), password_hash = VALUES(password_hash), role = VALUES(role), last_login = VALUES(last_login);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (2, 'Data Protection Policy', 'Ensures data confidentiality and integrity', 'data', 'enabled', '2022-01-02 08:00:00') ON DUPLICATE KEY UPDATE policy_name = VALUES(policy_name), policy_description = VALUES(policy_description), policy_type = VALUES(policy_type), policy_status = VALUES(policy_status), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (2, 2, 'weekly', '2022-01-02', 'fail') ON DUPLICATE KEY UPDATE policy_id = VALUES(policy_id), monitor_type = VALUES(monitor_type), monitor_date = VALUES(monitor_date), monitor_status = VALUES(monitor_status);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (2, 'TimeoutDuration', '300', 'numeric', '2022-01-02 08:00:00') ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value), setting_type = VALUES(setting_type), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO AuditingLogs (log_id, log_type, log_message, log_timestamp) VALUES (2, 'warning', 'Failed login attempt', '2022-01-02 12:00:00') ON DUPLICATE KEY UPDATE log_type = VALUES(log_type), log_message = VALUES(log_message), log_timestamp = VALUES(log_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password_hash, role, last_login) VALUES (2, 'user1', 'user1@example.com', 'hash456', 'user', '2022-01-02 08:00:00') ON DUPLICATE KEY UPDATE username = VALUES(username), email = VALUES(email), password_hash = VALUES(password_hash), role = VALUES(role), last_login = VALUES(last_login);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (3, 'Network Security Policy', 'Controls network traffic', 'network', 'disabled', '2022-01-03 08:00:00') ON DUPLICATE KEY UPDATE policy_name = VALUES(policy_name), policy_description = VALUES(policy_description), policy_type = VALUES(policy_type), policy_status = VALUES(policy_status), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (3, 3, 'monthly', '2022-01-03', 'pass') ON DUPLICATE KEY UPDATE policy_id = VALUES(policy_id), monitor_type = VALUES(monitor_type), monitor_date = VALUES(monitor_date), monitor_status = VALUES(monitor_status);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (3, 'LoggingEnabled', 'true', 'boolean', '2022-01-03 08:00:00') ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value), setting_type = VALUES(setting_type), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO AuditingLogs (log_id, log_type, log_message, log_timestamp) VALUES (3, 'error', 'Database connection error', '2022-01-03 12:00:00') ON DUPLICATE KEY UPDATE log_type = VALUES(log_type), log_message = VALUES(log_message), log_timestamp = VALUES(log_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password_hash, role, last_login) VALUES (3, 'admin2', 'admin2@example.com', 'hash789', 'admin', '2022-01-03 08:00:00') ON DUPLICATE KEY UPDATE username = VALUES(username), email = VALUES(email), password_hash = VALUES(password_hash), role = VALUES(role), last_login = VALUES(last_login);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (4, 'Access Management Policy', 'Manages user access rights', 'access', 'enabled', '2022-01-04 08:00:00') ON DUPLICATE KEY UPDATE policy_name = VALUES(policy_name), policy_description = VALUES(policy_description), policy_type = VALUES(policy_type), policy_status = VALUES(policy_status), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ComplianceMonitoring (monitor_id, policy_id, monitor_type, monitor_date, monitor_status) VALUES (4, 4, 'daily', '2022-01-04', 'fail') ON DUPLICATE KEY UPDATE policy_id = VALUES(policy_id), monitor_type = VALUES(monitor_type), monitor_date = VALUES(monitor_date), monitor_status = VALUES(monitor_status);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO ConfigurationSettings (settings_id, setting_name, setting_value, setting_type, created_at) VALUES (4, 'EncryptionEnabled', 'true', 'boolean', '2022-01-04 08:00:00') ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value), setting_type = VALUES(setting_type), created_at = VALUES(created_at);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO AuditingLogs (log_id, log_type, log_message, log_timestamp) VALUES (4, 'audit', 'System configuration changed', '2022-01-04 12:00:00') ON DUPLICATE KEY UPDATE log_type = VALUES(log_type), log_message = VALUES(log_message), log_timestamp = VALUES(log_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password_hash, role, last_login) VALUES (4, 'user2', 'user2@example.com', 'hash012', 'user', '2022-01-04 08:00:00') ON DUPLICATE KEY UPDATE username = VALUES(username), email = VALUES(email), password_hash = VALUES(password_hash), role = VALUES(role), last_login = VALUES(last_login);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO SecurityPolicies (policy_id, policy_name, policy_description, policy_type, policy_status, created_at) VALUES (5, 'Data Retention Policy', 'Defines data retention periods', 'data', 'disabled', '2022-01-05 08:00:00') ON DUPLICATE KEY UPDATE policy_name = VALUES(policy_name), policy_description = VALUES(policy_description), policy_type = VALUES(policy_type), policy_status = VALUES(policy_status), created_at = VALUES(created_at);"
]