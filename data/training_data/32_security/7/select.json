[
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE id = 'some_uuid';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, created_at FROM security_policies WHERE policy_type = 'permission';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_type FROM security_policies WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_type = 'access_control' ORDER BY created_at DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT policy_type FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_name LIKE '%admin%';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_description FROM security_policies WHERE policy_name = 'admin_policy';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '1' DAY;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(EPOCH FROM created_at)) FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM security_policies GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_type, COUNT(*) AS count FROM security_policies GROUP BY policy_type HAVING count > 2;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, EXTRACT(DOW FROM created_at) AS day_of_week FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_name = 'default_policy' AND policy_type = 'access_control';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies ORDER BY created_at DESC LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, LENGTH(policy_description) AS description_length FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name FROM security_policies WHERE LENGTH(policy_name) > 10;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_type FROM security_policies WHERE id IN ('uuid1', 'uuid2', 'uuid3');",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_name = 'policy1' OR policy_type = 'access_control';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_type = 'firewall';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT id, policy_name, created_at FROM security_policies WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE LENGTH(policy_description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_type = 'vpn' ORDER BY created_at DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS total_policies FROM security_policies GROUP BY policy_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT id, policy_name, policy_description FROM security_policies WHERE policy_description LIKE '%security%';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, created_at, EXTRACT(YEAR FROM created_at) AS year FROM security_policies ORDER BY year DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_type, COUNT(DISTINCT policy_name) AS unique_names FROM security_policies GROUP BY policy_type HAVING COUNT(DISTINCT policy_name) > 2;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT id, policy_name FROM security_policies WHERE LENGTH(policy_name) < 10 AND policy_type <> 'firewall';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(LENGTH(policy_name)) AS avg_name_length FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, created_at FROM security_policies WHERE EXTRACT(MONTH FROM created_at) = 6;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS total_policies FROM security_policies WHERE policy_type = 'firewall' GROUP BY policy_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT id, policy_name, policy_type FROM security_policies WHERE policy_name LIKE 'A%' AND POLICY_type <> 'VPN';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE policy_type IN ('firewall', 'vpn');",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, created_at FROM security_policies WHERE policy_type = 'vpn' AND EXTRACT(YEAR FROM created_at) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT id, policy_type, COUNT(*) AS policy_count FROM security_policies GROUP BY policy_type ORDER BY policy_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE LENGTH(policy_description) > 200 OR policy_type = 'vpn';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_name, EXTRACT(DAY FROM created_at) AS day FROM security_policies WHERE EXTRACT(MONTH FROM created_at) = 12;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n  id UUID PRIMARY KEY,\n  policy_name VARCHAR(255) NOT NULL,\n  policy_description TEXT,\n  policy_type VARCHAR(50),\n  created_at TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT policy_type, AVG(EXTRACT(YEAR FROM created_at)) AS avg_year FROM security_policies GROUP BY policy_type ORDER BY avg_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, monitoring_date FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, monitoring_result FROM security_policies, compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_name = 'Sample Policy';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, monitoring_date FROM security_policies INNER JOIN compliance_monitoring ON security_policies.policy_id = compliance_monitoring.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, MAX(monitoring_date) FROM compliance_monitoring GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT AVG(policy_id) FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, COUNT(*) FROM compliance_monitoring GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, monitoring_result FROM security_policies LEFT JOIN compliance_monitoring ON security_policies.policy_id = compliance_monitoring.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT policy_name FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM security_policies INNER JOIN compliance_monitoring ON security_policies.policy_id = compliance_monitoring.policy_id GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, monitoring_result FROM security_policies JOIN compliance_monitoring ON security_policies.policy_id = compliance_monitoring.policy_id WHERE monitoring_result = 'Failed';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name FROM security_policies UNION SELECT policy_id, monitoring_result FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id > 100;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE policy_id < 50;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, policy_description FROM security_policies WHERE created_at < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id IN (1, 5, 10);",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_description LIKE '%security%';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT s.policy_name, c.monitoring_date FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT s.policy_name, c.monitoring_date FROM security_policies s LEFT JOIN compliance_monitoring c ON s.policy_id = c.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT s.policy_name, c.monitoring_date FROM security_policies s RIGHT JOIN compliance_monitoring c ON s.policy_id = c.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT s.policy_name, c.monitoring_date FROM security_policies s JOIN compliance_monitoring c ON s.policy_id = c.policy_id WHERE c.monitoring_result = 'Fail';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, MAX(monitoring_date) FROM compliance_monitoring GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, COUNT(*) FROM compliance_monitoring GROUP BY policy_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, AVG(CAST(SUBSTR(monitoring_result, 1, 2) AS INT)) AS avg_result FROM compliance_monitoring GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, COUNT(*) FROM compliance_monitoring WHERE monitoring_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, SUM(CASE WHEN monitoring_result = 'Fail' THEN 1 ELSE 0 END) AS num_failures FROM compliance_monitoring GROUP BY policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM security_policies GROUP BY policy_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, MIN(monitoring_date), MAX(monitoring_date) FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, monitoring_date, monitoring_result FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id WHERE c.monitoring_date = (SELECT MAX(monitoring_date) FROM compliance_monitoring WHERE policy_id = s.policy_id);",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, monitoring_date, monitoring_result FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id WHERE c.monitoring_date = (SELECT MIN(monitoring_date) FROM compliance_monitoring WHERE policy_id = s.policy_id);",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, monitoring_date, monitoring_result FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id ORDER BY c.monitoring_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    monitoring_date DATE,\n    monitoring_result VARCHAR(10),\n    CONSTRAINT fk_policy FOREIGN KEY (policy_id) REFERENCES security_policies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, monitoring_date, monitoring_result FROM security_policies s INNER JOIN compliance_monitoring c ON s.policy_id = c.policy_id ORDER BY monitoring_result ASC, monitoring_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ComplianceRules;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT rule_name, rule_description FROM ComplianceRules;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PolicyAssignments;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, user_id, assigned_at FROM PolicyAssignments;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, created_at FROM SecurityPolicies WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT rule_id, rule_name, created_at FROM ComplianceRules WHERE rule_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT assignment_id, policy_id, user_id, assigned_at FROM PolicyAssignments WHERE assignment_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, created_at FROM SecurityPolicies WHERE policy_name = 'Example Policy';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT rule_id, rule_name, created_at FROM ComplianceRules WHERE rule_name = 'Example Rule';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PolicyAssignments WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PolicyAssignments WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies ORDER BY policy_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ComplianceRules ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ComplianceRules ORDER BY rule_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PolicyAssignments ORDER BY assigned_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PolicyAssignments ORDER BY user_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT count(*) FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT count(*) FROM ComplianceRules;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT count(*) FROM PolicyAssignments;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT policy_name FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT rule_name, rule_description FROM ComplianceRules WHERE rule_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, a.assigned_at FROM SecurityPolicies p INNER JOIN PolicyAssignments a ON p.policy_id = a.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, r.rule_name FROM SecurityPolicies p, ComplianceRules r, PolicyAssignments a WHERE p.policy_id = a.policy_id AND r.rule_id = a.rule_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT AVG(policy_id) FROM PolicyAssignments;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT policy_name FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT MAX(created_at) FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT MIN(created_at) FROM PolicyAssignments;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT AVG(DISTINCT rule_id) FROM ComplianceRules;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(a.user_id) FROM SecurityPolicies p LEFT JOIN PolicyAssignments a ON p.policy_id = a.policy_id GROUP BY p.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(a.user_id) FROM SecurityPolicies p RIGHT JOIN PolicyAssignments a ON p.policy_id = a.policy_id GROUP BY p.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(a.user_id) FROM SecurityPolicies p FULL JOIN PolicyAssignments a ON p.policy_id = a.policy_id GROUP BY p.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, r.rule_name FROM SecurityPolicies p, ComplianceRules r, PolicyAssignments a WHERE p.policy_id = a.policy_id OR r.rule_id = a.rule_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, r.rule_name FROM SecurityPolicies p, ComplianceRules r, PolicyAssignments a WHERE p.policy_id IN (1, 2, 3) AND r.rule_id NOT IN (4, 5);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, r.rule_name FROM SecurityPolicies p, ComplianceRules r, PolicyAssignments a WHERE p.policy_name LIKE 'A%' AND r.rule_name LIKE '%B%';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, r.rule_name FROM SecurityPolicies p, ComplianceRules r, PolicyAssignments a WHERE p.policy_name = 'Policy1' AND r.rule_name = 'Rule1';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(a.user_id) FROM SecurityPolicies p JOIN PolicyAssignments a ON p.policy_id = a.policy_id WHERE p.created_at > '2022-01-01' GROUP BY p.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE ComplianceRules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    rule_description TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE PolicyAssignments (\n    assignment_id INT PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    assigned_at TIMESTAMP,\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(a.user_id) FROM SecurityPolicies p JOIN PolicyAssignments a ON p.policy_id = a.policy_id WHERE p.created_at < '2021-01-01' GROUP BY p.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, date_checked FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_name, config_value FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_type FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, pass_fail FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_id, config_name FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description, policy_type FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, date_checked, pass_fail FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_id, config_name, config_value FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_type, policy_description FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, pass_fail, date_checked FROM compliance_monitoring;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_id, config_value, config_name FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, role, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_monitoring WHERE pass_fail = true;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM security_policies WHERE policy_type = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, role FROM users WHERE role = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM configurations WHERE config_value LIKE '%production%';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM security_policies;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, date_checked, pass_fail FROM compliance_monitoring WHERE date_checked >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_name, config_value FROM configurations WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role FROM users WHERE role IN ('Admin', 'Manager');",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description, policy_type FROM security_policies WHERE policy_type IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_monitoring WHERE policy_id = (SELECT policy_id FROM security_policies WHERE policy_name = 'Data Encryption');",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM configurations ORDER BY config_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT DISTINCT role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name, policy_type FROM security_policies WHERE policy_type LIKE '%Access%';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT monitoring_id, date_checked FROM compliance_monitoring WHERE pass_fail = false ORDER BY date_checked ASC;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE role = 'Analyst' OR role = 'Developer';",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT config_id, policy_id, config_name, config_value FROM configurations WHERE config_value IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE security_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(50),\n    policy_description TEXT,\n    policy_type VARCHAR(20)\n);\n\nCREATE TABLE compliance_monitoring (\n    monitoring_id INT PRIMARY KEY,\n    policy_id INT,\n    date_checked DATE,\n    pass_fail BOOLEAN,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE configurations (\n    config_id INT PRIMARY KEY,\n    policy_id INT,\n    config_name VARCHAR(50),\n    config_value TEXT,\n    CONSTRAINT fk_policy\n    FOREIGN KEY (policy_id)\n    REFERENCES security_policies (policy_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(50),\n    role VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT policy_id) FROM configurations;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_type, policy_status FROM SecurityPolicies;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ComplianceMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT monitor_type, monitor_status FROM ComplianceMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ConfigurationSettings;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT setting_name, setting_type FROM ConfigurationSettings;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM AuditingLogs;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT log_type, log_message FROM AuditingLogs;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email, role FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies WHERE policy_status = 'enabled';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ComplianceMonitoring WHERE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ConfigurationSettings WHERE setting_type = 'numeric';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM AuditingLogs WHERE log_type = 'error';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies WHERE policy_type = 'network';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ComplianceMonitoring WHERE monitor_type = 'daily';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ConfigurationSettings WHERE setting_name = 'Encryption';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM AuditingLogs WHERE log_timestamp > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users WHERE last_login < '2021-06-01';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM SecurityPolicies WHERE policy_status = 'enabled';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM SecurityPolicies WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ComplianceMonitoring WHERE monitor_type = 'daily' AND monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS num_monitors FROM SecurityPolicies JOIN ComplianceMonitoring ON SecurityPolicies.policy_id = ComplianceMonitoring.policy_id GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Users.username, Users.email, SecurityPolicies.policy_name FROM Users INNER JOIN SecurityPolicies ON Users.user_id = SecurityPolicies.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ConfigurationSettings WHERE setting_type = 'numeric' ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT log_type, COUNT(*) AS num_logs FROM AuditingLogs GROUP BY log_type;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users WHERE role = 'admin' AND last_login < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT SecurityPolicies.policy_id, SecurityPolicies.policy_name, ComplianceMonitoring.monitor_type FROM SecurityPolicies LEFT JOIN ComplianceMonitoring ON SecurityPolicies.policy_id = ComplianceMonitoring.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM AuditingLogs WHERE log_timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-03-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users WHERE user_id = (SELECT MAX(user_id) FROM Users);",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ConfigurationSettings WHERE setting_name LIKE '%security%' AND created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT setting_type FROM ConfigurationSettings;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Users ORDER BY last_login DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT policy_id, policy_name, policy_description, policy_type FROM SecurityPolicies WHERE policy_id IN (SELECT policy_id FROM ComplianceMonitoring WHERE monitor_status = 'fail');",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ComplianceMonitoring WHERE policy_id IN (SELECT policy_id FROM SecurityPolicies WHERE policy_status = 'disabled');",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Users.username, COUNT(*) AS num_policies FROM Users JOIN SecurityPolicies ON Users.user_id = SecurityPolicies.policy_id GROUP BY Users.username;",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT policy_name, monitor_type, monitor_date FROM SecurityPolicies JOIN ComplianceMonitoring ON SecurityPolicies.policy_id = ComplianceMonitoring.policy_id WHERE monitor_status = 'fail';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_admins FROM Users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE SecurityPolicies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_type ENUM('access', 'data', 'network'),\n    policy_status ENUM('enabled', 'disabled'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE ComplianceMonitoring (\n    monitor_id INT PRIMARY KEY,\n    policy_id INT,\n    monitor_type ENUM('daily', 'weekly', 'monthly'),\n    monitor_date DATE,\n    monitor_status ENUM('pass', 'fail'),\n    FOREIGN KEY (policy_id) REFERENCES SecurityPolicies(policy_id)\n)\n\nCREATE TABLE ConfigurationSettings (\n    settings_id INT PRIMARY KEY,\n    setting_name VARCHAR(255),\n    setting_value TEXT,\n    setting_type ENUM('boolean', 'numeric', 'string'),\n    created_at TIMESTAMP\n)\n\nCREATE TABLE AuditingLogs (\n    log_id INT PRIMARY KEY,\n    log_type ENUM('audit', 'error', 'warning'),\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n)\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(255),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM AuditingLogs WHERE log_timestamp BETWEEN '2022-02-01' AND '2022-02-28' AND log_type = 'error';"
]