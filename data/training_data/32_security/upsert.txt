<t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>UPSERT INTO security_table (id, username, password) VALUES (1, 'john.doe', 'password123')</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>upsert into security_table (id, username, password) values (1, 'john.doe', 'password123')</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>UPSERT INTO security_table (id, username, password) VALUES (2, 'jane.smith', 'securepass456')</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>upsert into security_table (id, username, password) values (2, 'jane.smith', 'securepass456')</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>UPSERT INTO security_table (id, username, password) VALUES (3, 'admin', 'admin@123')</stat><divider><t>CREATE TABLE security_table (id INT PRIMARY KEY, username TEXT NOT NULL, password TEXT NOT NULL)</t><stat>upsert into security_table (id, username, password) values (3, 'admin', 'admin@123')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (user_id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (user_id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'securepwd')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (user_id, username, password) values (2, 'jane_smith', 'securepwd')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'securepwd')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (user_id, username, password) values (2, 'jane_smith', 'securepwd')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>INSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123') ON CONFLICT (id) DO UPDATE SET username = 'john_doe', password = 'password123';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>insert into users (id, username, password) values (1, 'john_doe', 'password123') on conflict (id) do update set username = 'john_doe', password = 'password123';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>INSERT INTO users (id, username, password) VALUES (2, 'jane_smith', 'password456') ON CONFLICT (id) DO UPDATE SET username = 'jane_smith', password = 'password456';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>insert into users (id, username, password) values (2, 'jane_smith', 'password456') on conflict (id) do update set username = 'jane_smith', password = 'password456';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>INSERT INTO users (id, username, password) VALUES (3, 'alex_jones', 'password789') ON CONFLICT (id) DO UPDATE SET username = 'alex_jones', password = 'password789';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>insert into users (id, username, password) values (3, 'alex_jones', 'password789') on conflict (id) do update set username = 'alex_jones', password = 'password789';</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO users (id, username, password) VALUES (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into users (id, username, password) values (1, 'john_doe', 'password123')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO roles (role_id, role_name) VALUES (1, 'admin')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into roles (role_id, role_name) values (1, 'admin')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES (1, 'read')</stat><divider><t>CREATE TABLE user_roles (id INT, role_id INT, FOREIGN KEY (id) REFERENCES users (id), FOREIGN KEY (role_id) REFERENCES roles (role_id))

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>upsert into permissions (permission_id, permission_name) values (1, 'read')</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO users (user_id, username, password) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into users (user_id, username, password) values ('123e4567-e89b-12d3-a456-426614174000', 'john_doe', 'password123') on conflict (user_id) do update set username = 'john_smith', password = 'new_password';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO roles (role_id, role_name) VALUES ('223e4567-e89b-12d3-a456-426614174000', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'super_admin';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into roles (role_id, role_name) values ('223e4567-e89b-12d3-a456-426614174000', 'admin') on conflict (role_id) do update set role_name = 'super_admin';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>UPSERT INTO permissions (permission_id, permission_name) VALUES ('323e4567-e89b-12d3-a456-426614174000', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write';</stat><divider><t>CREATE TABLE role_permissions (
    role_id UUID,
    permission_id UUID,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_roles (
    user_id UUID,
    role_id UUID,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY,
    permission_name STRING
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY,
    role_name STRING
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username STRING,
    password STRING
);</t><stat>upsert into permissions (permission_id, permission_name) values ('323e4567-e89b-12d3-a456-426614174000', 'read') on conflict (permission_id) do update set permission_name = 'write';</stat>