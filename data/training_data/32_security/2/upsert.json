[
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('11111111-1111-1111-1111-111111111111', E'\\x0102030405060708')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('22222222-2222-2222-2222-222222222222', E'\\x1122334455667788')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('33333333-3333-3333-3333-333333333333', E'\\xaabbccddeeff0011')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('44444444-4444-4444-4444-444444444444', E'\\x9988776655443322')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('55555555-5555-5555-5555-555555555555', E'\\x00ff00ff00ff00ff')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('66666666-6666-6666-6666-666666666666', E'\\xdeadbeefdeadbeef')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('77777777-7777-7777-7777-777777777777', E'\\xcafecafecafecafe')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('88888888-8888-8888-8888-888888888888', E'\\xf00df00df00df00d')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('99999999-9999-9999-9999-999999999999', E'\\xdeadf00ddeadf00d')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', E'\\xfeedfacefeedface')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', E'\\x0123456789abcdef')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('cccccccc-cccc-cccc-cccc-cccccccccccc', E'\\xacefaceacefacea')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('dddddddd-dddd-dddd-dddd-dddddddddddd', E'\\xbadbadbadbadbad')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', E'\\xff0f0f0f0f0f0f0f')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('ffffffff-ffff-ffff-ffff-ffffffffffff', E'\\xdeadf00d1ee7c0de')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('11111111-1111-1111-1111-111111111111', E'\\x00ff00ff00ff00ff')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('22222222-2222-2222-2222-222222222222', E'\\x0102030405060708')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('33333333-3333-3333-3333-333333333333', E'\\x1122334455667788')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('44444444-4444-4444-4444-444444444444', E'\\xaabbccddeeff0011')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('11111111-1111-1111-1111-111111111111', E'\\x6162636465666768696A6B6C6D6E6F707172737475767778797A');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('22222222-2222-2222-2222-222222222222', E'\\x4142434445464748494A4B4C4D4E4F505152535455565758595A');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('33333333-3333-3333-3333-333333333333', E'\\x303132333435363738396162636465666768696A6B6C6D6E70616263646566676869');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('44444444-4444-4444-4444-444444444444', E'\\x546869732069732061206d756c7469616c696e6520737472696e67');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('55555555-5555-5555-5555-555555555555', E'\\x5468697320697320616E6F74686572206D756C7469616C696E6520737472696E67');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('66666666-6666-6666-6666-666666666666', E'\\x4E6577206B657920666F722074686520656E6372797074696F6E206B657973');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('77777777-7777-7777-7777-777777777777', E'\\x47656E65726174652061207765727365206D756C74696C696E6520737472696E67');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('88888888-8888-8888-8888-888888888888', E'\\x4775696465207468652070726F63657373206F662074686520646F63756D656E74');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('99999999-9999-9999-9999-999999999999', E'\\x54686973204973206120736563726574206B657920666F7220746865206B6579');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA', E'\\x5472656174696E672074686973206D65737361676520666F722075707365727420696E207175657279');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB', E'\\x436F6D706C657820737472696E6720666F72206120757073257365722073636F7265');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC', E'\\x57656C636F6D6520746F2074686520776F726C64206F662074686520496E7465726E6574');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD', E'\\x497420697320612070726F63657373206F6620616C6C207468652073616D65207479706573');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('EEEEEEEE-EEEE-EEEE-EEEE-EEEEEEEEEEEE', E'\\x5468697320697320616E206572726F7220746861742067656E6572617465732077686974657370616365');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF', E'\\x436F72726563746C79207772697465206120636865636B20746861742066726F6D206E6F77206F6E');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('11111111-1111-1111-1111-111111111112', E'\\x5468697320697320612074657374206D6573736167652E20497420697320667572746865722070616972727320');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('22222222-2222-2222-2222-222222222223', E'\\x55702153726C432052657669657720686572652E');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('33333333-3333-3333-3333-333333333334', E'\\x5468697320697320616E206578616D706C65206F6620757073657274207061697272732061726F756E642E');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (key_id, key_value) VALUES ('44444444-4444-4444-4444-444444444445', E'\\x486F70652069732061206E65772070726F6772616D6D696E6720476F70756C6172792066726F6D207468652056656E206572726F7220');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (1, 'key1', 'encryption_key_1') ON CONFLICT (id) DO UPDATE SET key_name = 'key1_updated', encryption_key = 'encryption_key_1_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (2, 'key2', 'encryption_key_2') ON CONFLICT (id) DO UPDATE SET key_name = 'key2_updated', encryption_key = 'encryption_key_2_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (3, 'key3', 'encryption_key_3') ON CONFLICT (id) DO UPDATE SET key_name = 'key3_updated', encryption_key = 'encryption_key_3_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (4, 'key4', 'encryption_key_4') ON CONFLICT (id) DO UPDATE SET key_name = 'key4_updated', encryption_key = 'encryption_key_4_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (5, 'key5', 'encryption_key_5') ON CONFLICT (id) DO UPDATE SET key_name = 'key5_updated', encryption_key = 'encryption_key_5_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (6, 'key6', 'encryption_key_6') ON CONFLICT (id) DO UPDATE SET key_name = 'key6_updated', encryption_key = 'encryption_key_6_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (7, 'key7', 'encryption_key_7') ON CONFLICT (id) DO UPDATE SET key_name = 'key7_updated', encryption_key = 'encryption_key_7_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (8, 'key8', 'encryption_key_8') ON CONFLICT (id) DO UPDATE SET key_name = 'key8_updated', encryption_key = 'encryption_key_8_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (9, 'key9', 'encryption_key_9') ON CONFLICT (id) DO UPDATE SET key_name = 'key9_updated', encryption_key = 'encryption_key_9_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (10, 'key10', 'encryption_key_10') ON CONFLICT (id) DO UPDATE SET key_name = 'key10_updated', encryption_key = 'encryption_key_10_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (11, 'key11', 'encryption_key_11') ON CONFLICT (id) DO UPDATE SET key_name = 'key11_updated', encryption_key = 'encryption_key_11_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (12, 'key12', 'encryption_key_12') ON CONFLICT (id) DO UPDATE SET key_name = 'key12_updated', encryption_key = 'encryption_key_12_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (13, 'key13', 'encryption_key_13') ON CONFLICT (id) DO UPDATE SET key_name = 'key13_updated', encryption_key = 'encryption_key_13_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (14, 'key14', 'encryption_key_14') ON CONFLICT (id) DO UPDATE SET key_name = 'key14_updated', encryption_key = 'encryption_key_14_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (15, 'key15', 'encryption_key_15') ON CONFLICT (id) DO UPDATE SET key_name = 'key15_updated', encryption_key = 'encryption_key_15_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (16, 'key16', 'encryption_key_16') ON CONFLICT (id) DO UPDATE SET key_name = 'key16_updated', encryption_key = 'encryption_key_16_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (17, 'key17', 'encryption_key_17') ON CONFLICT (id) DO UPDATE SET key_name = 'key17_updated', encryption_key = 'encryption_key_17_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (18, 'key18', 'encryption_key_18') ON CONFLICT (id) DO UPDATE SET key_name = 'key18_updated', encryption_key = 'encryption_key_18_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (19, 'key19', 'encryption_key_19') ON CONFLICT (id) DO UPDATE SET key_name = 'key19_updated', encryption_key = 'encryption_key_19_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (20, 'key20', 'encryption_key_20') ON CONFLICT (id) DO UPDATE SET key_name = 'key20_updated', encryption_key = 'encryption_key_20_updated';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (1, 'key1', 'encrypted_key1') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key1_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (2, 'key2', 'encrypted_key2') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key2_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (3, 'key3', 'encrypted_key3') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key3_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (1, 'Message 1', '2021-11-01 08:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-01 08:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (2, 'Message 2', '2021-11-02 09:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-02 09:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (3, 'Message 3', '2021-11-03 10:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-03 10:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (4, 'key4', 'encrypted_key4') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key4_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (5, 'key5', 'encrypted_key5') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key5_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (6, 'key6', 'encrypted_key6') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key6_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (4, 'Message 4', '2021-11-04 11:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-04 11:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (5, 'Message 5', '2021-11-05 12:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-05 12:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (6, 'Message 6', '2021-11-06 13:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-06 13:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (7, 'key7', 'encrypted_key7') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key7_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (8, 'key8', 'encrypted_key8') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key8_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (9, 'key9', 'encrypted_key9') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key9_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (7, 'Message 7', '2021-11-07 14:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-07 14:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (8, 'Message 8', '2021-11-08 15:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-08 15:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (9, 'Message 9', '2021-11-09 16:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-09 16:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (10, 'key10', 'encrypted_key10') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key10_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (11, 'key11', 'encrypted_key11') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key11_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, encryption_key) VALUES (12, 'key12', 'encrypted_key12') ON DUPLICATE KEY UPDATE encryption_key = 'encrypted_key12_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPSERT INTO communication_logs (log_id, message, timestamp) VALUES (10, 'Message 10', '2021-11-10 17:00:00') ON DUPLICATE KEY UPDATE timestamp = '2021-11-10 17:00:00_new';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (1, 'key1', 'value1');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (2, 'key2', 'value2');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (3, 'key3', 'value3');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (4, 'key4', 'value4');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (5, 'key5', 'value5');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (6, 'key6', 'value6');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (7, 'key7', 'value7');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (8, 'key8', 'value8');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (9, 'key9', 'value9');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (10, 'key10', 'value10');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (11, 'key11', 'value11');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (12, 'key12', 'value12');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (13, 'key13', 'value13');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (14, 'key14', 'value14');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (15, 'key15', 'value15');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (16, 'key16', 'value16');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (17, 'key17', 'value17');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (18, 'key18', 'value18');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (19, 'key19', 'value19');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (20, 'key20', 'value20');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (1, 'key1', 'value1')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (2, 'key2', 'value2')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (3, 'key3', 'value3')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (4, 'key4', 'value4')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (5, 'key5', 'value5')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (6, 'key6', 'value6')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (7, 'key7', 'value7')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (8, 'key8', 'value8')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (9, 'key9', 'value9')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (10, 'key10', 'value10')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (11, 'key11', 'value11')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (12, 'key12', 'value12')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (13, 'key13', 'value13')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (14, 'key14', 'value14')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (15, 'key15', 'value15')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (16, 'key16', 'value16')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (17, 'key17', 'value17')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (18, 'key18', 'value18')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (19, 'key19', 'value19')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO encryption_keys (id, key_name, key_value) VALUES (20, 'key20', 'value20')",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key1', 'ABCD1234'), ('key2', 'EFGH5678'), ('key3', 'IJKL9012') ON CONFLICT (key_name) DO UPDATE SET key_value = EXCLUDED.key_value;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash, encryption_key_id) VALUES ('user1', 'P@ssw0rd1', 1), ('user2', 'P@ssw0rd2', 2), ('user3', 'P@ssw0rd3', 3) ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO messages (sender_id, receiver_id, message_text, encryption_key_id) VALUES (1, 2, 'Hello user2', 1), (2, 1, 'Hi user1', 2), (3, 1, 'Hey user1', 3) ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log message 1', '2022-01-01 12:00:00'), ('Log message 2', '2022-01-02 12:00:00'), ('Log message 3', '2022-01-03 12:00:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key1', '1234567890') ON CONFLICT (key_name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key2', '0987654321') ON CONFLICT (key_name) DO UPDATE SET key_value = excluded.key_value;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash, encryption_key_id) VALUES ('user1', 'abcdef', 1) ON CONFLICT (username) DO UPDATE SET password_hash = excluded.password_hash, encryption_key_id = excluded.encryption_key_id;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash, encryption_key_id) VALUES ('user2', 'ghijkl', 2) ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO messages (sender_id, receiver_id, message_text, encryption_key_id) VALUES (1, 2, 'Hello', 1) ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO messages (sender_id, receiver_id, message_text, encryption_key_id) VALUES (2, 1, 'Hi', 2) ON CONFLICT DO UPDATE SET message_text = excluded.message_text;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 1', '2022-01-01 12:00:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 2', '2022-01-02 12:00:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 3', '2022-01-03 12:00:00') ON CONFLICT (log_message) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 4', '2022-01-04 12:00:00') ON CONFLICT (log_message) DO UPDATE SET timestamp = excluded.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key3', 'abcdef123456') ON CONFLICT (key_name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key4', 'ghijkl098765') ON CONFLICT (key_name) DO UPDATE SET key_value = excluded.key_value;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash, encryption_key_id) VALUES ('user3', 'password', 3) ON CONFLICT (username) DO UPDATE SET password_hash = excluded.password_hash, encryption_key_id = excluded.encryption_key_id;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO messages (sender_id, receiver_id, message_text, encryption_key_id) VALUES (3, 1, 'Hey', 3) ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO messages (sender_id, receiver_id, message_text, encryption_key_id) VALUES (2, 3, 'Hola', 4) ON CONFLICT DO UPDATE SET message_text = excluded.message_text;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 5', '2022-01-05 12:00:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 6', '2022-01-06 12:00:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 7', '2022-01-07 12:00:00') ON CONFLICT (log_message) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO logs (log_message, timestamp) VALUES ('Log entry 8', '2022-01-08 12:00:00') ON CONFLICT (log_message) DO UPDATE SET timestamp = excluded.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key5', 'qwerty123456') ON CONFLICT (key_name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key6', 'poiuytrewq098') ON CONFLICT (key_name) DO UPDATE SET key_value = excluded.key_value;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('Master Key', '\\x1234567890abcdef');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash) VALUES ('user1', 'hash1');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO communications (sender_id, receiver_id, message, encrypted) VALUES (1, 2, 'Hello', FALSE);",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO communication_logs (communication_id, log_text) VALUES (1, 'Log message 1');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO encryption_metadata (key_id, encryption_type, encryption_details) VALUES (1, 'AES', '{\"mode\": \"CBC\", \"key_size\": 256}');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = '\\xfedcba0987654321' WHERE key_name = 'Master Key';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE users SET password_hash = 'new_hash' WHERE username = 'user1';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE communications SET encrypted = TRUE WHERE communication_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE communication_logs SET log_text = 'Updated log message' WHERE log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE encryption_metadata SET encryption_type = 'RSA' WHERE metadata_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO encryption_keys (key_name, key_value) VALUES ('key1', E'\\x3334343536'), ('key2', E'\\x37383930');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password_hash) VALUES ('user1', 'hash1'), ('user2', 'hash2');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO communications (sender_id, receiver_id, message, encrypted) VALUES (1, 2, 'Hello there', TRUE), (2, 1, 'Hi, how are you?', FALSE);",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO communication_logs (communication_id, log_text) VALUES (1, 'Message sent successfully'), (2, 'Message received');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nINSERT INTO encryption_metadata (key_id, encryption_type, encryption_details) VALUES (1, 'AES-256', '{\"mode\": \"CBC\"}'), (2, 'RSA', '{\"keysize\": 2048}');"
]