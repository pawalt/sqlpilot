[
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = '\\x54657374' WHERE key_id = '12345678-1234-5678-1234-567812345678';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = '\\x48656C6C6F' WHERE key_id = '87654321-4321-8765-4321-876543218765';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = '\\x576F726C64' WHERE key_id = '98765432-1234-5678-9876-543298765432';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = decrypt(key_value,'secret_key') WHERE key_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = encrypt('new_value', 'secret_key') WHERE key_id = '234e5678-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = decrypt(encrypt('new_value','secret_key'),'secret_key') WHERE key_id = '345e6789-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_name='new_key_name' WHERE id=1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE communication_logs SET message='Updated message' WHERE log_id=1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE encryption_keys SET encryption_key='new_encryption_key' WHERE id=2;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_name = 'New Key Name' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE communication_logs SET message = 'Updated Message' WHERE log_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nUPDATE encryption_keys SET encryption_key = 'New Encryption Key' WHERE key_name = 'ImportantKey';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = 'new_value' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_name = 'new_name' WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = 'updated_value' WHERE key_name = 'key3';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = 'new_1' WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = 'new_2', key_name = 'key_2' WHERE id = 2",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_name = 'new_name', key_value = 'new_value' WHERE key_name = 'old_name'",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = E'\\x54657374696e6756656c7565' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password_hash = E'\\x537570657254657874' WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE messages SET message_text = 'This is an encrypted message' WHERE message_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = E'\\xDEADBEEF' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password_hash = E'\\xDEADBEEF' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPDATE messages SET message_text = 'New encrypted message' WHERE message_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_value = '\\x31323334353637383930' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE users SET password_hash = 'new_hash_value' WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE communications SET encrypted = TRUE WHERE communication_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE encryption_keys SET key_name = 'Master Key' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE users SET password_hash = 'newhash' WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nUPDATE communications SET message = 'Hello, how are you?' WHERE communication_id = 2;"
]