[
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_id = '123e4567-e89b-12d3-a456-426614174002';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_value = E'\\\n\\x6265\\x6265\\x6265';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    key_id UUID PRIMARY KEY,\n    key_value BYTEA\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_id = '123e4567-e89b-12d3-a456-426614174000' AND key_value = E'\\\n\\x6265\\x6265\\x6265';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM communication_logs WHERE log_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_name = 'key1';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM communication_logs WHERE timestamp < NOW() - INTERVAL 1 DAY;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys ( id INT PRIMARY KEY, key_name VARCHAR(50), encryption_key VARCHAR(100) );\n\nCREATE TABLE communication_logs ( log_id INT PRIMARY KEY, message TEXT, timestamp TIMESTAMP );\n\n### STATEMENT\n\nDELETE FROM communication_logs WHERE log_id IN (SELECT log_id FROM communication_logs WHERE message LIKE '%error%');",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_name = 'master';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_name = 'primary_key'",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id INT PRIMARY KEY,\n  key_name TEXT,\n  key_value TEXT\n)\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 2 AND key_name = 'secondary_key'",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM messages WHERE message_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n  id SERIAL PRIMARY KEY,\n  key_name VARCHAR(255) NOT NULL,\n  key_value BYTEA NOT NULL\n);\n\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(100) NOT NULL,\n  password_hash BYTEA NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE messages (\n  message_id SERIAL PRIMARY KEY,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  message_text TEXT NOT NULL,\n  encryption_key_id INT NOT NULL,\n  FOREIGN KEY (sender_id) REFERENCES users(user_id),\n  FOREIGN KEY (receiver_id) REFERENCES users(user_id),\n  FOREIGN KEY (encryption_key_id) REFERENCES encryption_keys(id)\n);\n\n\nCREATE TABLE logs (\n  log_id SERIAL PRIMARY KEY,\n  log_message TEXT NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nDELETE FROM messages WHERE sender_id = 1 AND receiver_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM communications WHERE communication_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM communications WHERE sender_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE encryption_keys (\n    id SERIAL PRIMARY KEY,\n    key_name TEXT NOT NULL,\n    key_value BYTEA NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    sender_id INT REFERENCES users(user_id),\n    receiver_id INT REFERENCES users(user_id),\n    message TEXT NOT NULL,\n    encrypted BOOLEAN DEFAULT FALSE\n);\n\nCREATE TABLE communication_logs (\n    log_id SERIAL PRIMARY KEY,\n    communication_id INT REFERENCES communications(communication_id),\n    log_text TEXT NOT NULL,\n    log_timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE encryption_metadata (\n    metadata_id SERIAL PRIMARY KEY,\n    key_id INT REFERENCES encryption_keys(id),\n    encryption_type TEXT NOT NULL,\n    encryption_details JSONB\n);\n\n### STATEMENT\n\nDELETE FROM encryption_keys WHERE key_name = 'master_key';"
]