[
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (1, 'Paris', 'France', 'The city of love')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (2, 'Tokyo', 'Japan', 'A bustling metropolis')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (3, 'New York', 'USA', 'The Big Apple')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (4, 'London', 'UK', 'Historic and vibrant city')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (5, 'Dubai', 'UAE', 'City of luxury and futuristic architecture')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (6, 'Sydney', 'Australia', 'Beautiful harbour city')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (7, 'Rome', 'Italy', 'The Eternal City')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (8, 'Barcelona', 'Spain', 'Gaudi's masterpieces')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (9, 'Rio de Janeiro', 'Brazil', 'Carnival and beaches')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (10, 'Hong Kong', 'China', 'City of skyscrapers and markets')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (11, 'Cape Town', 'South Africa', 'Stunning natural landscapes')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (12, 'Amsterdam', 'Netherlands', 'Canals and culture')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (13, 'Bali', 'Indonesia', 'Island paradise')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (14, 'Machu Picchu', 'Peru', 'Ancient Incan ruins')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (15, 'Istanbul', 'Turkey', 'East meets West')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (16, 'Venice', 'Italy', 'City of canals and gondolas')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (17, 'Santorini', 'Greece', 'Stunning views and white buildings')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (18, 'Prague', 'Czech Republic', 'Fairytale city')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (19, 'Kyoto', 'Japan', 'Traditional and serene')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, country, description) VALUES (20, 'Cairo', 'Egypt', 'Pyramids and ancient history')",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (1, 'Paris', 'France', 'City of Love') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (2, 'Tokyo', 'Japan', 'Vibrant city') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (3, 'New York', 'USA', 'The Big Apple') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (4, 'Rome', 'Italy', 'Eternal City') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (5, 'Sydney', 'Australia', 'Harbour City') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (6, 'Barcelona', 'Spain', 'Mediterranean culture') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (7, 'Bangkok', 'Thailand', 'Land of Smiles') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (8, 'Cape Town', 'South Africa', 'African beauty') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (9, 'Dubai', 'UAE', 'Modern marvel') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (10, 'Agra', 'India', 'Taj Mahal') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (11, 'Budapest', 'Hungary', 'Pearl of the Danube') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (12, 'Rio de Janeiro', 'Brazil', 'Cidade Maravilhosa') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (13, 'Singapore', 'Singapore', 'Garden City') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (14, 'Prague', 'Czech Republic', 'Golden City') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (15, 'Venice', 'Italy', 'City of Canals') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (16, 'Kyoto', 'Japan', 'Traditional beauty') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (17, 'Berlin', 'Germany', 'Cultural capital') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (18, 'Istanbul', 'Turkey', 'East meets West') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (19, 'Cairo', 'Egypt', 'Ancient wonders') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, country, description) VALUES (20, 'Seoul', 'South Korea', 'Dynamic city') ON CONFLICT (destination_id) DO UPDATE SET destination_name = EXCLUDED.destination_name, country = EXCLUDED.country, description = EXCLUDED.description",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (1, 'Destination 1', 'Location 1', 'Description 1') ON CONFLICT (id) DO UPDATE SET name = 'Destination 1', location = 'Location 1', description = 'Description 1';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (2, 'Destination 2', 'Location 2', 'Description 2') ON CONFLICT (id) DO UPDATE SET name = 'Destination 2', location = 'Location 2', description = 'Description 2';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (3, 'Destination 3', 'Location 3', 'Description 3') ON CONFLICT (id) DO UPDATE SET name = 'Destination 3', location = 'Location 3', description = 'Description 3';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (4, 'Destination 4', 'Location 4', 'Description 4') ON CONFLICT (id) DO UPDATE SET name = 'Destination 4', location = 'Location 4', description = 'Description 4';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (5, 'Destination 5', 'Location 5', 'Description 5') ON CONFLICT (id) DO UPDATE SET name = 'Destination 5', location = 'Location 5', description = 'Description 5';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (6, 'Destination 6', 'Location 6', 'Description 6') ON CONFLICT (id) DO UPDATE SET name = 'Destination 6', location = 'Location 6', description = 'Description 6';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (7, 'Destination 7', 'Location 7', 'Description 7') ON CONFLICT (id) DO UPDATE SET name = 'Destination 7', location = 'Location 7', description = 'Description 7';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (8, 'Destination 8', 'Location 8', 'Description 8') ON CONFLICT (id) DO UPDATE SET name = 'Destination 8', location = 'Location 8', description = 'Description 8';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (9, 'Destination 9', 'Location 9', 'Description 9') ON CONFLICT (id) DO UPDATE SET name = 'Destination 9', location = 'Location 9', description = 'Description 9';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (10, 'Destination 10', 'Location 10', 'Description 10') ON CONFLICT (id) DO UPDATE SET name = 'Destination 10', location = 'Location 10', description = 'Description 10';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (11, 'Destination 11', 'Location 11', 'Description 11') ON CONFLICT (id) DO UPDATE SET name = 'Destination 11', location = 'Location 11', description = 'Description 11';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (12, 'Destination 12', 'Location 12', 'Description 12') ON CONFLICT (id) DO UPDATE SET name = 'Destination 12', location = 'Location 12', description = 'Description 12';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (13, 'Destination 13', 'Location 13', 'Description 13') ON CONFLICT (id) DO UPDATE SET name = 'Destination 13', location = 'Location 13', description = 'Description 13';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (14, 'Destination 14', 'Location 14', 'Description 14') ON CONFLICT (id) DO UPDATE SET name = 'Destination 14', location = 'Location 14', description = 'Description 14';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (15, 'Destination 15', 'Location 15', 'Description 15') ON CONFLICT (id) DO UPDATE SET name = 'Destination 15', location = 'Location 15', description = 'Description 15';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (16, 'Destination 16', 'Location 16', 'Description 16') ON CONFLICT (id) DO UPDATE SET name = 'Destination 16', location = 'Location 16', description = 'Description 16';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (17, 'Destination 17', 'Location 17', 'Description 17') ON CONFLICT (id) DO UPDATE SET name = 'Destination 17', location = 'Location 17', description = 'Description 17';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (18, 'Destination 18', 'Location 18', 'Description 18') ON CONFLICT (id) DO UPDATE SET name = 'Destination 18', location = 'Location 18', description = 'Description 18';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (19, 'Destination 19', 'Location 19', 'Description 19') ON CONFLICT (id) DO UPDATE SET name = 'Destination 19', location = 'Location 19', description = 'Description 19';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (id, name, location, description) VALUES (20, 'Destination 20', 'Location 20', 'Description 20') ON CONFLICT (id) DO UPDATE SET name = 'Destination 20', location = 'Location 20', description = 'Description 20';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Paris', 'France', 'The capital city of France') ON CONFLICT (name) DO UPDATE SET location = 'Europe';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Tokyo', 'Japan', 'Vibrant city with rich culture') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Rome', 'Italy', 'Historic city with ancient ruins') ON CONFLICT (name) DO UPDATE SET description = 'Ancient city with famous landmarks';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('New York', 'USA', 'City that never sleeps') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('London', 'UK', 'Queen's city') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (1, 'Great experience!', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Amazing experience', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (2, 'Loved the culture', 4) ON CONFLICT (destination_id) DO UPDATE SET rating = 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (3, 'Incredible history', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Fascinating history', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (4, 'Exciting city', 4) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Thrilling city', rating = 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (5, 'Beautiful sights', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Breathtaking sights', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Sydney', 'Australia', 'Iconic landmarks and beaches') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Dubai', 'UAE', 'Modern city with luxury') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Singapore', 'Singapore', 'City-state with diverse culture') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Barcelona', 'Spain', 'Artistic city with Gaudi architecture') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO destinations (name, location, description) VALUES ('Moscow', 'Russia', 'Historic city with Red Square') ON CONFLICT (name) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (6, 'Impressive architecture', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Stunning architecture', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (7, 'Great food', 4) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Delicious food', rating = 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (8, 'Friendly people', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Welcoming people', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (9, 'Amazing nightlife', 4) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Vibrant nightlife', rating = 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (destination_id, feedback, rating) VALUES (10, 'Cultural diversity', 5) ON CONFLICT (destination_id) DO UPDATE SET feedback = 'Rich cultural diversity', rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'Paris', 'City of Lights', 'France', 4.5, '2021-11-01 10:00:00') ON CONFLICT (destination_id) DO UPDATE SET name = 'Paris', description = 'City of Lights', location = 'France', rating = 4.5, created_at = '2021-11-01 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nINSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, comments, created_at) VALUES ('123e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174010', '123e4567-e89b-12d3-a456-426614174000', 4.0, 'Great place to visit', '2021-11-02 11:00:00') ON CONFLICT (feedback_id) DO UPDATE SET user_id = '123e4567-e89b-12d3-a456-426614174010', destination_id = '123e4567-e89b-12d3-a456-426614174000', rating = 4.0, comments = 'Great place to visit', created_at = '2021-11-02 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age, created_at) VALUES ('123e4567-e89b-12d3-a456-426614174010', 'john_doe', 'john@example.com', 30, '2021-11-03 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, created_at = '2021-11-03 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('c942c757-4150-44e7-a99a-38dfbef87e74', 'Beach Resort', 'Luxury beachfront resort', 'Tropical Paradise', 4.5, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Beach Resort', rating = 4.6;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('08e6e64a-258c-4c19-b89a-73c37705d6db', 'Mountain Retreat', 'Secluded mountain cabin', 'Snowy Mountains', 4.0, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated mountain cabin', rating = 4.2;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('4c5e2d4e-2aaa-42bd-b4a6-32d51f09133d', 'City Explorer', 'Historic city tour', 'City Center', 4.8, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated City Tour', rating = 4.9;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('a2e152f1-d658-4559-aa1e-13b1e1b5f8f8', 'Adventure Park', 'Outdoor adventure activities', 'Wilderness Reserve', 4.2, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated outdoor activities', rating = 4.3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('72a519d4-dde5-4e77-ad61-287d6c668333', 'Ski Resort', 'Ski-in/ski-out chalets', 'Snowy Slopes', 4.7, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Ski Resort', rating = 4.8;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('4f261087-49c6-4b6a-a770-1d0536e61afa', 'Nature Retreat', 'Peaceful forest cabins', 'Woodlands', 4.3, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated forest cabins', rating = 4.4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('3d72fe66-5e63-45de-95f3-98c2fde57e5f', 'Cultural Heritage Tour', 'Explore ancient ruins', 'Historical Sites', 4.6, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Heritage Tour', rating = 4.7;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('b48594b0-22e5-4e8c-b219-75c8c82ff59b', 'Wildlife Safari', 'African safari adventure', 'Savannah Plains', 4.9, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated safari adventure', rating = 5.0;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('863c6b90-66c6-4d50-8a50-4106b1d69532', 'Island Paradise', 'Tropical island getaway', 'Beachfront', 4.5, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Island Getaway', rating = 4.7;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('d6c6477c-5643-42c5-8960-fc6bc2ba3904', 'Wine Tasting Tour', 'Vineyard tour with tastings', 'Wine Country', 4.2, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated vineyard tour', rating = 4.4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('d4729320-24cd-41bd-a8bf-631cb738f7d4', 'Historical Landmarks Tour', 'Visit famous landmarks', 'City Center', 4.8, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Landmarks Tour', rating = 4.9;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('b9b486a0-7c69-46f6-ae6a-4652b7600a18', 'Luxury Cruise', 'Mediterranean cruise experience', 'Seas', 4.6, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated cruise experience', rating = 4.8;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('8374ba41-de53-4ce3-8ddc-3c119707647a', 'Hot Air Balloon Ride', 'Scenic balloon flight', 'Open Skies', 4.3, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Balloon Ride', rating = 4.5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('5b1b51ac-1dead-47c3-a6c1-3b2dbd46a574', 'Mountain Hiking Expedition', 'Guided mountain trek', 'Rocky Terrain', 4.2, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated mountain trek', rating = 4.3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('c3042343-06e9-4f54-91d9-ae90e4ccf8dc', 'Spa Retreat', 'Relaxing spa experience', 'Wellness Sanctuary', 4.8, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Spa Experience', rating = 4.9;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('f6e4f4b3-d6d6-47ea-a6c6-651be78775a0', 'Fishing Expedition', 'Deep sea fishing adventure', 'Ocean Waters', 4.7, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated fishing adventure', rating = 4.8;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('4fe4ba02-c03b-44fd-8e90-fc4fe6702cf3', 'Desert Safari', 'Dune bashing and camel ride', 'Sandy Desert', 4.6, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Desert Adventure', rating = 4.8;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('fa2c6427-3855-4bfc-85bf-90e4d46fbe22', 'Culinary Tour', 'Explore local cuisine', 'Foodie District', 4.5, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated culinary experience', rating = 4.7;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('ed37289a-6650-42e7-960e-58fd01fb497b', 'Historic Train Journey', 'Vintage train ride through history', 'Scenic Route', 4.3, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET name = 'Updated Train Ride', rating = 4.5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, name, description, location, rating, created_at) VALUES ('b941af3b-ccef-4286-9495-812a2db3b5b9', 'Camping Adventure', 'Outdoor camping experience', 'Wilderness Campsite', 4.2, CURRENT_TIMESTAMP) ON CONFLICT (destination_id) DO UPDATE SET description = 'Updated camping adventure', rating = 4.4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (1, 'Paris', 'France') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Paris', location = 'France';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (2, 'Tokyo', 'Japan') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Tokyo', location = 'Japan';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (3, 'New York', 'USA') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'New York', location = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (4, 'London', 'UK') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'London', location = 'UK';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (5, 'Sydney', 'Australia') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Sydney', location = 'Australia';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (6, 'Rome', 'Italy') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Rome', location = 'Italy';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (7, 'Dubai', 'UAE') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Dubai', location = 'UAE';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (8, 'Cancun', 'Mexico') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Cancun', location = 'Mexico';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (9, 'Singapore', 'Singapore') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Singapore', location = 'Singapore';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (10, 'Barcelona', 'Spain') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Barcelona', location = 'Spain';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (1, 'john_doe', 'john@example.com', 30) ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (2, 'jane_smith', 'jane@example.com', 25) ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', email = 'jane@example.com', age = 25;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (3, 'alice_wonder', 'alice@example.com', 35) ON CONFLICT (user_id) DO UPDATE SET username = 'alice_wonder', email = 'alice@example.com', age = 35;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (4, 'bob_carter', 'bob@example.com', 40) ON CONFLICT (user_id) DO UPDATE SET username = 'bob_carter', email = 'bob@example.com', age = 40;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (5, 'emily_brown', 'emily@example.com', 28) ON CONFLICT (user_id) DO UPDATE SET username = 'emily_brown', email = 'emily@example.com', age = 28;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (1, 1, 1, 5, 'Great experience!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 1, destination_id = 1, rating = 5, comment = 'Great experience!';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (2, 2, 2, 4, 'Nice place to visit.') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 2, destination_id = 2, rating = 4, comment = 'Nice place to visit.';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (3, 3, 3, 3, 'Could be better.') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 3, destination_id = 3, rating = 3, comment = 'Could be better.';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (4, 4, 4, 5, 'Absolutely loved it!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 4, destination_id = 4, rating = 5, comment = 'Absolutely loved it!';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (5, 5, 5, 4, 'Beautiful views.') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 5, destination_id = 5, rating = 4, comment = 'Beautiful views.';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (1, 1) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (2, 2) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (3, 3) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (4, 4) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (5, 5) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (1, 'Paris', 'Eiffel Tower') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Paris', location = 'Eiffel Tower';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (2, 'Tokyo', 'Tokyo Tower') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Tokyo', location = 'Tokyo Tower';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (3, 'New York', 'Statue of Liberty') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'New York', location = 'Statue of Liberty';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (4, 'London', 'Big Ben') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'London', location = 'Big Ben';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (5, 'Rome', 'Colosseum') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Rome', location = 'Colosseum';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (1, 'john_doe', 'john@example.com', 30) ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (2, 'jane_smith', 'jane@example.com', 25) ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', email = 'jane@example.com', age = 25;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (3, 'alice_wonderland', 'alice@example.com', 35) ON CONFLICT (user_id) DO UPDATE SET username = 'alice_wonderland', email = 'alice@example.com', age = 35;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (4, 'bob_marley', 'bob@example.com', 40) ON CONFLICT (user_id) DO UPDATE SET username = 'bob_marley', email = 'bob@example.com', age = 40;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, age) VALUES (5, 'charlie_brown', 'charlie@example.com', 20) ON CONFLICT (user_id) DO UPDATE SET username = 'charlie_brown', email = 'charlie@example.com', age = 20;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (1, 1, 1, 5, 'Great experience') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 1, destination_id = 1, rating = 5, comment = 'Great experience';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (2, 2, 2, 4, 'Amazing view') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 2, destination_id = 2, rating = 4, comment = 'Amazing view';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (3, 3, 3, 3, 'Nice place to visit') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 3, destination_id = 3, rating = 3, comment = 'Nice place to visit';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (4, 4, 4, 2, 'Not very impressive') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 4, destination_id = 4, rating = 2, comment = 'Not very impressive';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO feedback (feedback_id, user_id, destination_id, rating, comment) VALUES (5, 5, 5, 1, 'Disappointing') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 5, destination_id = 5, rating = 1, comment = 'Disappointing';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (1, 2) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (2, 3) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (3, 4) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (4, 5) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO favourites (user_id, destination_id) VALUES (5, 1) ON CONFLICT (user_id, destination_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (6, 'Sydney', 'Opera House') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Sydney', location = 'Opera House';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (7, 'Dubai', 'Burj Khalifa') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Dubai', location = 'Burj Khalifa';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (8, 'Barcelona', 'Sagrada Familia') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Barcelona', location = 'Sagrada Familia';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (9, 'Rio de Janeiro', 'Christ the Redeemer') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Rio de Janeiro', location = 'Christ the Redeemer';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, location) VALUES (10, 'Cape Town', 'Table Mountain') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Cape Town', location = 'Table Mountain';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nINSERT INTO destinations (destination_id, destination_name, description, location) VALUES (1, 'Beach', 'Beautiful sandy beach', 'Tropical Island') ON DUPLICATE KEY UPDATE destination_name = 'Beach', description = 'Updated sandy beach', location = 'Tropical Paradise'",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john.doe@example.com', 'hash123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john.doe@example.com', password_hash = 'updated_hash123'",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, feedback_text) VALUES (1, 1, 1, 5, 'Great beach experience!') ON DUPLICATE KEY UPDATE user_id = 1, destination_id = 1, rating = 5, feedback_text = 'Wonderful beach experience!'",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nINSERT INTO tags (tag_id, tag_name) VALUES (1, 'Nature') ON DUPLICATE KEY UPDATE tag_name = 'Nature'",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nINSERT INTO destination_tags (destination_id, tag_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE destination_id = 1, tag_id = 1",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, description, location) VALUES (1, 'Beach Resort', 'Luxurious beachfront resort', 'Tropical Island') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Updated Beach Resort', description = 'New description', location = 'Island Paradise';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john@example.com', 'hashed_password') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', email = 'smith@example.com', password_hash = 'updated_hashed_password';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, feedback_text) VALUES (1, 1, 1, 5, 'Great experience at the resort!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 2, destination_id = 2, rating = 4, feedback_text = 'Good experience, could be better.';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO tags (tag_id, tag_name) VALUES (1, 'Relaxation') ON CONFLICT (tag_id) DO UPDATE SET tag_name = 'Relaxing';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destination_tags (destination_id, tag_id) VALUES (1, 1) ON CONFLICT (destination_id, tag_id) DO UPDATE SET tag_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, description, location) VALUES (2, 'Mountain Retreat', 'Secluded mountain cabin getaway', 'Scenic Mountain') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Updated Mountain Retreat', description = 'Revised description', location = 'Mountain Peaks';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (2, 'jane_smith', 'jane@example.com', 'hashed_password_2') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_doe', email = 'doe@example.com', password_hash = 'updated_password_hash_2';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, feedback_text) VALUES (2, 2, 2, 4, 'Enjoyed the mountain retreat!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 1, destination_id = 1, rating = 5, feedback_text ='Absolutely amazing experience!';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO tags (tag_id, tag_name) VALUES (2, 'Adventure') ON CONFLICT (tag_id) DO UPDATE SET tag_name = 'Exciting';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destination_tags (destination_id, tag_id) VALUES (2, 2) ON CONFLICT (destination_id, tag_id) DO UPDATE SET tag_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, description, location) VALUES (3, 'City Escape', 'Urban city apartment experience', 'Metropolis') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Updated City Escape', description = 'City vibe', location = 'Downtown';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (3, 'mike_jones', 'mike@example.com', 'hashed_password_3') ON CONFLICT (user_id) DO UPDATE SET username = 'michael_jones', email = 'michael@example.com', password_hash = 'updated_password_hash_3';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, feedback_text) VALUES (3, 3, 3, 3, 'Interesting city experience!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 1, destination_id = 1, rating = 5, feedback_text = 'Best city trip ever!';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO tags (tag_id, tag_name) VALUES (3, 'Culture') ON CONFLICT (tag_id) DO UPDATE SET tag_name = 'Cultural';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destination_tags (destination_id, tag_id) VALUES (3, 3) ON CONFLICT (destination_id, tag_id) DO UPDATE SET tag_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destinations (destination_id, destination_name, description, location) VALUES (4, 'Ski Resort', 'Winter wonderland ski resort', 'Snowy Mountains') ON CONFLICT (destination_id) DO UPDATE SET destination_name = 'Updated Ski Resort', description = 'Snowy getaway', location = 'Alpine Slopes';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (4, 'lisa_adams', 'lisa@example.com', 'hashed_password_4') ON CONFLICT (user_id) DO UPDATE SET username = 'lisa_smith', email = 'smith@example.com', password_hash = 'updated_password_hash_4';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO user_feedback (feedback_id, user_id, destination_id, rating, feedback_text) VALUES (4, 4, 4, 5, 'Thrilling ski adventure!') ON CONFLICT (feedback_id) DO UPDATE SET user_id = 1, destination_id = 1, rating = 5, feedback_text = 'Best ski trip ever!';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO tags (tag_id, tag_name) VALUES (4, 'Adventure') ON CONFLICT (tag_id) DO UPDATE SET tag_name = 'Exciting';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nUPSERT INTO destination_tags (destination_id, tag_id) VALUES (4, 4) ON CONFLICT (destination_id, tag_id) DO UPDATE SET tag_id = 5;"
]