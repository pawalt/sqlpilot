[
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, country, description FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, description FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE country = 'Canada';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE destination_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE destination_name = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name FROM destinations WHERE country = 'Japan';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, description FROM destinations WHERE country = 'Italy';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name FROM destinations WHERE country = 'Australia';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE country = 'Germany' OR country = 'France';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE destination_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, description FROM destinations WHERE destination_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations WHERE description LIKE '%beach%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations ORDER BY destination_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations ORDER BY destination_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations ORDER BY destination_id ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE country = 'France';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations WHERE destination_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations WHERE country = 'Italy' AND destination_name LIKE '%Rome%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE destination_name LIKE '%Beach%' OR country = 'Spain';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations WHERE description IS NOT NULL ORDER BY destination_id DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_destinations FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, LENGTH(description) AS description_length FROM destinations WHERE LENGTH(description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country, CHAR_LENGTH(destination_name) AS name_length FROM destinations WHERE country = 'Greece';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations WHERE description LIKE '%mountain%' AND CHAR_LENGTH(description) > 200;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT country FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT country) AS distinct_countries FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations WHERE destination_name IN ('London', 'Paris', 'New York');",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(destination_id) AS average_id FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country, SUBSTRING(description, 1, 50) AS short_description FROM destinations WHERE country = 'Japan';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations WHERE country != 'China' ORDER BY destination_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_name, country FROM destinations WHERE destination_name REGEXP '^(P|B).*';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(destination_id) AS average_id, SUM(destination_id) AS total_id FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations WHERE destination_name = 'Sydney' AND (country = 'Australia' OR country = 'New Zealand');",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country, UPPER(destination_name) AS uppercase_name FROM destinations WHERE country IN ('Germany', 'Italy', 'Spain');",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(255),\n  country VARCHAR(100),\n  description TEXT\n)\n\n### STATEMENT\n\nSELECT destination_id, destination_name, country FROM destinations WHERE destination_name IS NOT NULL AND destination_name != '';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, name, location FROM destinations WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feedback, rating FROM user_feedback WHERE destination_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT destination_id, AVG(rating) AS avg_rating FROM user_feedback GROUP BY destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations JOIN user_feedback ON destinations.id = user_feedback.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, COUNT(uf.id) AS feedback_count FROM destinations d LEFT JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, MAX(uf.rating) AS highest_rating FROM destinations d JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE location LIKE '%beach%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE description LIKE '%scenic%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations ORDER BY name ASC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(id) AS total_destinations FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating, COUNT(id) AS total_destinations FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, MAX(uf.rating) AS highest_rating FROM destinations d JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, SUM(uf.rating) AS total_rating FROM destinations d JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, COUNT(uf.id) AS feedback_count, AVG(uf.rating) AS avg_rating FROM destinations d LEFT JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, MIN(uf.rating) AS lowest_rating FROM destinations d JOIN user_feedback uf ON d.id = uf.destination_id GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, location FROM destinations WHERE location = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE description LIKE '%beach%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location, u.feedback FROM destinations d INNER JOIN user_feedback u ON d.id = u.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name AS destination_name, COUNT(u.id) AS feedback_count FROM destinations d LEFT JOIN user_feedback u ON d.id = u.destination_id GROUP BY d.id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, AVG(u.rating) AS average_rating FROM destinations d INNER JOIN user_feedback u ON d.id = u.destination_id GROUP BY d.id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, u.rating FROM destinations d INNER JOIN user_feedback u ON d.id = u.destination_id WHERE u.rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location FROM destinations d WHERE d.id IN (SELECT destination_id FROM user_feedback WHERE rating < 3);",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location, u.feedback FROM destinations d LEFT JOIN user_feedback u ON d.id = u.destination_id WHERE u.feedback IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location FROM destinations d WHERE NOT EXISTS (SELECT * FROM user_feedback u WHERE d.id = u.destination_id);",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location, u.feedback FROM destinations d LEFT JOIN user_feedback u ON d.id = u.destination_id WHERE u.rating IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, COUNT(u.id) AS feedback_count FROM destinations d LEFT JOIN user_feedback u ON d.id = u.destination_id GROUP BY d.id HAVING COUNT(u.id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location FROM destinations d WHERE EXISTS (SELECT * FROM user_feedback u WHERE d.id = u.destination_id AND u.rating = 5);",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, u.rating FROM destinations d JOIN user_feedback u ON d.id = u.destination_id ORDER BY u.rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(rating) AS max_rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(rating) AS min_rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(rating) AS total_rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location, (SELECT COUNT(*) FROM user_feedback WHERE destination_id = d.id) AS feedback_count FROM destinations d;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.name, d.location, COUNT(*) AS feedback_count FROM destinations d JOIN user_feedback u ON d.id = u.destination_id GROUP BY d.id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  description TEXT NOT NULL\n);\n\nCREATE TABLE user_feedback (\n  id SERIAL PRIMARY KEY,\n  destination_id INT NOT NULL,\n  feedback TEXT NOT NULL,\n  rating INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d1.name AS from_destination, d2.name AS to_destination, u.feedback FROM destinations d1 JOIN user_feedback u ON d1.id = u.destination_id JOIN destinations d2 ON u.destination_id = d2.id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, rating FROM destinations WHERE rating > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT description FROM destinations WHERE location = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT user_id, destination_id, rating FROM user_feedback WHERE rating < 3.0;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT feedback_id, user_id, comments FROM user_feedback WHERE destination_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT user_id, created_at FROM users WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, location, rating FROM destinations WHERE rating >= 4.0 ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT feedback_id, rating, comments FROM user_feedback WHERE created_at > '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM user_feedback WHERE comments IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT user_id, destination_id, rating FROM user_feedback WHERE rating > 3.0 AND rating < 4.0;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT DISTINCT location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT AVG(rating) FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT MAX(age) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, description, location, rating FROM destinations WHERE rating > 4.5",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, description, location FROM destinations WHERE name LIKE 'B%'",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE location = 'Paris' AND rating > 4",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT destination_id, COUNT(feedback_id) as total_feedback FROM destinations JOIN user_feedback ON destinations.destination_id = user_feedback.destination_id GROUP BY destination_id",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT username, age FROM users WHERE age BETWEEN 25 AND 40",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM user_feedback WHERE rating < 3",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT user_id, COUNT(feedback_id) as total_feedback FROM user_feedback GROUP BY user_id HAVING COUNT(feedback_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT AVG(rating) as average_rating FROM user_feedback WHERE destination_id = '123e4567-e89b-12d3-a456-426655440000'",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT destination_id, AVG(rating) as average_rating FROM user_feedback GROUP BY destination_id HAVING AVG(rating) > 4",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, description, location FROM destinations WHERE created_at BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@example.com%'",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT destination_id, COUNT(user_id) as total_users FROM user_feedback GROUP BY destination_id HAVING COUNT(user_id) > 2",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT name, description, location, rating FROM destinations WHERE description IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT DISTINCT location FROM destinations",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM destinations ORDER BY rating DESC",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT username, email, age FROM users ORDER BY age",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT username, email, age FROM users WHERE created_at >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM user_feedback ORDER BY created_at DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT u.username, d.name, uf.rating FROM users u JOIN user_feedback uf ON u.user_id = uf.user_id JOIN destinations d ON uf.destination_id = d.destination_id",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT destination_id, MAX(rating) as max_rating FROM user_feedback GROUP BY destination_id",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM destinations WHERE rating IN (SELECT MAX(rating) FROM destinations)",
  "### TABLEDATA\n\nCREATE TABLE destinations (destination_id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  location TEXT,\n  rating FLOAT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE user_feedback (feedback_id UUID PRIMARY KEY,\n  user_id UUID,\n  destination_id UUID,\n  rating FLOAT,\n  comments TEXT,\n  created_at TIMESTAMP)\n\n\nCREATE TABLE users (user_id UUID PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INT,\n  created_at TIMESTAMP)\n\n### STATEMENT\n\nSELECT u.username, COUNT(uf.feedback_id) as total_feedback FROM users u LEFT JOIN user_feedback uf ON u.user_id = uf.user_id GROUP BY u.username HAVING COUNT(uf.feedback_id) > 0",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, destination_name FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email, age FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT feedback_id, user_id, destination_id FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT feedback_id, rating, comment FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id FROM favourites;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id FROM favourites;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_id FROM favourites;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, age FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, destination_name, location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id, rating FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id, comment FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id, user_id FROM favourites;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id, destination_id FROM favourites;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT destination_name FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT username, email, age FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, location FROM destinations WHERE destination_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT feedback_id, destination_name, rating FROM feedback INNER JOIN destinations ON feedback.destination_id = destinations.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, destination_name FROM users INNER JOIN favourites ON users.user_id = favourites.user_id INNER JOIN destinations ON favourites.destination_id = destinations.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_name, rating FROM feedback WHERE rating > 4 ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT u.username, d.destination_name, f.rating FROM users u, destinations d, feedback f WHERE u.user_id = f.user_id AND d.destination_id = f.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, COUNT(f.feedback_id) AS total_feedbacks FROM destinations d LEFT JOIN feedback f ON d.destination_id = f.destination_id GROUP BY d.destination_name;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT u.username, d.location, f.rating FROM users u, destinations d, feedback f WHERE u.user_id = f.user_id AND d.destination_id = f.destination_id AND f.rating >= 3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_name, rating FROM feedback WHERE user_id = (SELECT user_id FROM users WHERE username = 'john_doe');",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id IN (SELECT user_id FROM favourites WHERE destination_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, destination_name, location FROM destinations WHERE destination_id NOT IN (SELECT destination_id FROM feedback);",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT u.username, d.destination_name, f.rating FROM users u JOIN favourites a ON u.user_id = a.user_id JOIN destinations d ON d.destination_id = a.destination_id JOIN feedback f ON f.user_id = u.user_id AND f.destination_id = d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, AVG(f.rating) AS avg_rating FROM destinations d JOIN feedback f ON d.destination_id = f.destination_id GROUP BY d.destination_name HAVING avg_rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(f.feedback_id) AS total_feedbacks FROM users u JOIN feedback f ON u.user_id = f.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_name, rating FROM feedback WHERE comment LIKE '%beautiful%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT u.username, d.destination_name, f.rating FROM users u JOIN feedback f ON u.user_id = f.user_id JOIN destinations d ON f.destination_id = d.destination_id WHERE u.age > 25;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT TOP 5 username, email FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n  destination_id INT PRIMARY KEY,\n  destination_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT\n);\n\nCREATE TABLE feedback (\n  feedback_id INT PRIMARY KEY,\n  user_id INT,\n  destination_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE favourites (\n  user_id INT,\n  destination_id INT,\n  PRIMARY KEY (user_id, destination_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT destination_name FROM destinations ORDER BY destination_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, description FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT location FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT user_id, destination_id, rating FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT feedback_id, feedback_text FROM user_feedback;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tags;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT tag_name FROM tags;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM destination_tags;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, tag_id FROM destination_tags;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id JOIN tags t ON dt.tag_id = t.tag_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT u.username, d.destination_name, uf.rating, uf.feedback_text FROM users u JOIN user_feedback uf ON u.user_id = uf.user_id JOIN destinations d ON uf.destination_id = d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, COUNT(uf.feedback_id) AS feedback_count FROM destinations d LEFT JOIN user_feedback uf ON d.destination_id = uf.destination_id GROUP BY d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, AVG(uf.rating) AS avg_rating FROM destinations d LEFT JOIN user_feedback uf ON d.destination_id = uf.destination_id GROUP BY d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id JOIN tags t ON dt.tag_id = t.tag_id WHERE t.tag_name = 'Nature';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id JOIN tags t ON dt.tag_id = t.tag_id WHERE d.location = 'Europe';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, d.location, COUNT(dt.tag_id) AS tag_count FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id GROUP BY d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, uf.rating, COUNT(dt.tag_id) AS tag_count FROM destinations d JOIN user_feedback uf ON d.destination_id = uf.destination_id JOIN destination_tags dt ON d.destination_id = dt.destination_id GROUP BY d.destination_id, uf.rating;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT * FROM destinations;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, location FROM destinations WHERE destination_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, description FROM destinations WHERE location = 'Beach';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, destination_name, description FROM destinations WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_name, location FROM destinations WHERE location IN ('Mountain', 'Forest');",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT destination_id, destination_name FROM destinations ORDER BY destination_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE username = 'john_doe' OR email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(feedback_id) AS total_feedback FROM user_feedback GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id JOIN tags t ON dt.tag_id = t.tag_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, COUNT(dt.tag_id) AS total_tags FROM destinations d LEFT JOIN destination_tags dt ON d.destination_id = dt.destination_id GROUP BY d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT u.username, df.destination_id, df.rating, df.feedback_text FROM users u JOIN user_feedback df ON u.user_id = df.user_id WHERE df.rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, COUNT(df.feedback_id) AS total_feedback FROM destinations d LEFT JOIN user_feedback df ON d.destination_id = df.destination_id GROUP BY d.destination_id;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d LEFT JOIN destination_tags dt ON d.destination_id = dt.destination_id LEFT JOIN tags t ON dt.tag_id = t.tag_id WHERE t.tag_name LIKE '%nature%';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, AVG(df.rating) AS avg_rating FROM destinations d JOIN user_feedback df ON d.destination_id = df.destination_id GROUP BY d.destination_id HAVING avg_rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, t.tag_name FROM destinations d JOIN destination_tags dt ON d.destination_id = dt.destination_id JOIN tags t ON dt.tag_id = t.tag_id WHERE t.tag_name = 'adventure';",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(df.feedback_id) AS total_feedback FROM users u LEFT JOIN user_feedback df ON u.user_id = df.user_id GROUP BY u.user_id HAVING total_feedback >= 5;",
  "### TABLEDATA\n\nCREATE TABLE destinations (\n    destination_id INT PRIMARY KEY,\n    destination_name VARCHAR(255),\n    description TEXT,\n    location VARCHAR(255)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    email VARCHAR(100) UNIQUE,\n    password_hash VARCHAR(255)\n);\n\nCREATE TABLE user_feedback (\n    feedback_id INT PRIMARY KEY,\n    user_id INT,\n    destination_id INT,\n    rating INT,\n    feedback_text TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id)\n);\n\nCREATE TABLE tags (\n    tag_id INT PRIMARY KEY,\n    tag_name VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE destination_tags (\n    destination_id INT,\n    tag_id INT,\n    PRIMARY KEY (destination_id, tag_id),\n    FOREIGN KEY (destination_id) REFERENCES destinations(destination_id),\n    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)\n);\n\n### STATEMENT\n\nSELECT d.destination_name, MAX(df.rating) AS max_rating FROM destinations d JOIN user_feedback df ON d.destination_id = df.destination_id GROUP BY d.destination_id HAVING max_rating = 5;"
]