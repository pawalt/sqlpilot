[
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM StudentRecords WHERE student_id = 1",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentRecords WHERE course_id = 2",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE enrollment_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT course_id, enrollment_date FROM StudentRecords WHERE student_id = 3",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(enrollment_date) FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT MIN(enrollment_date) FROM StudentRecords WHERE course_id = 4",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(course_id) FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM StudentRecords WHERE course_name LIKE '%Math%'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name FROM StudentRecords WHERE enrollment_date < '2022-06-01'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT course_id, enrollment_date FROM StudentRecords WHERE student_name = 'John Doe'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT student_id) FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM StudentRecords ORDER BY enrollment_date DESC",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentRecords ORDER BY student_name ASC",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM StudentRecords WHERE student_id = 5 ORDER BY course_name ASC",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, course_id FROM StudentRecords WHERE student_name = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM StudentRecords LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(student_id) FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE enrollment_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name FROM StudentRecords WHERE student_id = 123",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM StudentRecords WHERE course_id = 456",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM StudentRecords WHERE course_name LIKE '%Math%'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(student_id) as total_students FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name FROM StudentRecords WHERE course_name = 'Science' AND enrollment_date < '2022-10-15'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(enrollment_date) as avg_enrollment_date FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name FROM StudentRecords WHERE course_id IN (101, 102, 103)",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(student_id) as max_student_id FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT MIN(course_id) as min_course_id FROM StudentRecords",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentRecords WHERE course_name = 'History' ORDER BY enrollment_date DESC",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name FROM StudentRecords LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM StudentRecords WHERE student_name = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM StudentRecords WHERE student_name = 'Bob'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE student_name LIKE '%A%'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM StudentRecords WHERE enrollment_date < '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM StudentRecords GROUP BY course_id, course_name HAVING COUNT(student_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE StudentRecords (\n  student_id INT, \n  student_name VARCHAR(255), \n  course_id INT, \n  course_name VARCHAR(255), \n  enrollment_date DATE\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM StudentRecords WHERE enrollment_date = '2022-05-20'",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM student_records;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name, enrollment_date FROM student_records WHERE student_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM learning_analytics;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT analytics_id, student_id, topic, quiz_score, timestamp FROM learning_analytics WHERE student_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_records;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM learning_analytics;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(quiz_score) FROM learning_analytics;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(quiz_score) FROM learning_analytics;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(quiz_score) FROM learning_analytics;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, topic, AVG(quiz_score) FROM learning_analytics GROUP BY student_id, topic;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(quiz_score) FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, MIN(quiz_score) FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records LEFT JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records RIGHT JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id WHERE topic = 'Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_records WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(quiz_score) FROM learning_analytics GROUP BY student_id HAVING AVG(quiz_score) >= 80;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records WHERE student_id = '12345678-1234-1234-1234-123456789012';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM student_records WHERE enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, topic, quiz_score FROM learning_analytics WHERE quiz_score >= 80;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records WHERE student_id IN (SELECT student_id FROM learning_analytics WHERE quiz_score < 60);",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT topic, COUNT(*) AS num_attempts FROM learning_analytics GROUP BY topic;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id AND learning_analytics.score >= 90;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_id FROM learning_analytics ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(quiz_score) AS avg_score FROM learning_analytics GROUP BY student_id HAVING AVG(quiz_score) > 70;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM student_records WHERE student_id IN (SELECT student_id FROM learning_analytics GROUP BY student_id HAVING COUNT(*) > 3);",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT topic, MAX(quiz_score) AS max_score FROM learning_analytics GROUP BY topic;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS num_records FROM student_records GROUP BY student_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, topic, quiz_score FROM learning_analytics WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS num_attempts FROM learning_analytics GROUP BY student_id HAVING COUNT(*) >= 5;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM student_records WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(quiz_score) AS avg_score FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, COUNT(*) AS num_attempts FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id GROUP BY first_name, last_name;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(quiz_score) AS total_score FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM student_records WHERE student_id NOT IN (SELECT student_id FROM learning_analytics);",
  "### TABLEDATA\n\nCREATE TABLE student_records (\n    student_id UUID PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE learning_analytics (\n    analytics_id UUID PRIMARY KEY,\n    student_id UUID,\n    topic VARCHAR(100),\n    quiz_score FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(DISTINCT topic) AS num_topics FROM learning_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT first_name, last_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM students WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_name, instructor FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name, start_date, end_date FROM courses WHERE start_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM student_analytics;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, completion_status FROM student_analytics WHERE score >= 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT students.student_id, students.first_name, students.last_name, student_analytics.course_id, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT courses.course_id, courses.course_name, student_analytics.student_id, student_analytics.completion_status FROM courses JOIN student_analytics ON courses.course_id = student_analytics.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT students.student_id, students.first_name, students.last_name, courses.course_id, courses.course_name, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id JOIN courses ON student_analytics.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT students.student_id, students.first_name, students.last_name, courses.course_id, courses.course_name, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id JOIN courses ON student_analytics.course_id = courses.course_id WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, (SELECT first_name || ' ' || last_name FROM students WHERE students.student_id = student_analytics.student_id) AS student_name FROM student_analytics;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS course_count FROM student_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, AVG(score) AS avg_score FROM student_analytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS student_count FROM student_analytics GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, AVG(score) AS avg_score FROM student_analytics GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, MAX(score) AS max_score FROM student_analytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, MIN(score) AS min_score FROM student_analytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, SUM(score) AS total_score FROM student_analytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM students WHERE enrollment_date >= '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_name, instructor, start_date FROM courses WHERE end_date >= '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, completion_status, score FROM student_analytics WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT s.first_name, s.last_name, c.course_name FROM students s JOIN student_analytics sa ON s.student_id = sa.student_id JOIN courses c ON sa.course_id = c.course_id WHERE s.enrollment_date >= '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(score) AS average_score FROM student_analytics WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM courses WHERE instructor LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_courses_completed FROM student_analytics WHERE completion_status = TRUE GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, AVG(score) AS average_score FROM student_analytics WHERE completion_status = TRUE GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT s.first_name, s.last_name, COUNT(sa.course_id) AS total_courses FROM students s LEFT JOIN student_analytics sa ON s.student_id = sa.student_id GROUP BY s.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT TOP 10 student_id, first_name, last_name FROM students ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name, instructor, AVG(score) AS average_score FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT COUNT(analytics_id) AS total_records FROM student_analytics;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_analytics WHERE completion_status = TRUE);",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name, COALESCE(score, 0) AS score FROM students LEFT JOIN student_analytics ON students.student_id = student_analytics.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name, MAX(enrollment_date) AS latest_enrollment FROM students GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name, AVG(score) AS average_score FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY course_id HAVING AVG(score) > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT s.first_name, s.last_name, c.course_name, sa.score FROM students s JOIN student_analytics sa ON s.student_id = sa.student_id JOIN courses c ON sa.course_id = c.course_id WHERE sa.score > 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name, completion_status, CASE WHEN score >= 70 THEN 'Pass' ELSE 'Fail' END AS result FROM student_analytics;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id UUID PRIMARY KEY,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  enrollment_date DATE\n)\n\nCREATE TABLE courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(100),\n  instructor VARCHAR(100),\n  start_date DATE,\n  end_date DATE\n)\n\nCREATE TABLE student_analytics (\n  analytics_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES students(student_id),\n  course_id UUID REFERENCES courses(course_id),\n  completion_status BOOLEAN,\n  score DECIMAL\n)\n\n### STATEMENT\n\nSELECT course_id, course_name, COUNT(*) AS total_students FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM Student WHERE enrollment_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, start_date, end_date FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollment WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, enroll_date FROM Enrollment WHERE course_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, progress FROM LearningAnalytics;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, TIMESTAMPdiff(hour, timestamp, NOW()) AS hours_ago FROM LearningAnalytics;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, progress FROM LearningAnalytics WHERE progress > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_name, progress FROM Student s JOIN Enrollment e ON s.student_id = e.student_id JOIN Course c ON e.course_id = c.course_id JOIN LearningAnalytics la ON e.course_id = la.course_id WHERE la.progress > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(progress) AS avg_progress FROM LearningAnalytics;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, COUNT(analytics_id) AS num_records FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(DISTINCT course_id) AS num_courses_enrolled FROM Enrollment GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, progress FROM LearningAnalytics ORDER BY progress DESC;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Student WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, progress FROM LearningAnalytics WHERE timestamp BETWEEN '2021-01-01 00:00:00' AND '2021-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, progress FROM LearningAnalytics WHERE progress IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(progress) AS total_progress FROM LearningAnalytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, progress FROM LearningAnalytics WHERE timestamp > DATE_SUB(NOW(), INTERVAL 1 WEEK);",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM Student WHERE enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollment WHERE enroll_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_name FROM Student INNER JOIN Course ON Student.student_id = Course.instructor_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, progress FROM LearningAnalytics WHERE progress > 50;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS num_courses_enrolled FROM Enrollment GROUP BY student_id HAVING num_courses_enrolled > 3;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM Student WHERE student_id IN (SELECT student_id FROM LearningAnalytics WHERE progress > 80);",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, AVG(progress) AS avg_progress FROM LearningAnalytics GROUP BY student_id, course_id HAVING avg_progress < 70;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_id, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS time_spent FROM LearningAnalytics GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(progress)-MIN(progress) AS progress_change FROM LearningAnalytics GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, DATEDIFF(NOW(), enrollment_date) AS days_since_enrollment FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, COUNT(analytics_id) AS num_analytics_records FROM LearningAnalytics GROUP BY student_id, course_id HAVING num_analytics_records > 10;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, ROUND(AVG(progress), 2) AS avg_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id HAVING max_progress > 90;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS num_students_enrolled FROM Enrollment GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, COUNT(*) AS num_analytics_records FROM LearningAnalytics GROUP BY student_id, course_id HAVING num_analytics_records < 5;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, TIMESTAMPDIFF(DAY, MIN(timestamp), MAX(timestamp)) AS days_active FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, MAX(progress) FROM LearningAnalytics WHERE timestamp >= '2022-01-01' AND timestamp < '2023-01-01' GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    enrollment_date DATE\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enroll_date DATE\n);\n\nCREATE TABLE LearningAnalytics (\n    analytics_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    progress FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, HOUR(timestamp) AS hour_of_day FROM LearningAnalytics GROUP BY student_id, course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, student_name, student_age FROM Students WHERE student_age > 20;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, student_major FROM Students WHERE student_major = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, course_credits FROM Courses WHERE course_credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, course_department FROM Courses WHERE course_department = 'Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollments WHERE student_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_id, assignment_name FROM Assignments WHERE assignment_due_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT enrollment_id, assignment_id, grade_score FROM Grades WHERE grade_score >= 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, assignment_name, assignment_due_date FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, assignment_name, grade_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Assignments.assignment_id = Grades.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, assignment_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade_score, grade_comment FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Students WHERE student_age > 20",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, student_major FROM Students WHERE student_age BETWEEN 18 AND 25",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE student_age > 20",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_credits > 3",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_department = 'Computer Science'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(grade_score) AS average_grade FROM Grades GROUP BY enrollment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, COALESCE(grade_score, 0) AS grade FROM Students LEFT JOIN Enrollments ON Students.student_id = Enrollments.student_id LEFT JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_name, assignment_points FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_name, assignment_points, assignment_due_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_name, assignment_points, assignment_due_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id WHERE assignment_due_date > CURRENT_DATE",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, AVG(grade_score) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.student_id, Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, SUM(assignment_points) AS total_points FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY Students.student_id, Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, COUNT(DISTINCT student_id) AS enrolled_students FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT course_name, MIN(assignment_points) AS min_points, MAX(assignment_points) AS max_points, AVG(assignment_points) AS average_points FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade_score, grade_comment FROM Students LEFT JOIN Enrollments ON Students.student_id = Enrollments.student_id LEFT JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_name, assignment_due_date, grade_score, grade_comment FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255),\n  student_age INT,\n  student_gender VARCHAR(10),\n  student_major VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255),\n  course_description TEXT,\n  course_credits INT,\n  course_department VARCHAR(50)\n)\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n)\n\nCREATE TABLE Assignments (\n  assignment_id INT PRIMARY KEY,\n  course_id INT,\n assignment_name VARCHAR(255),\n assignment_due_date DATE,\n assignment_points INT\n)\n\nCREATE TABLE Grades (\n  grade_id INT PRIMARY KEY,\n  enrollment_id INT,\n assignment_id INT,\n grade_score INT,\n grade_comment TEXT\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, SUM(assignment_points) AS total_points, AVG(grade_score) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.student_id, Courses.course_id"
]