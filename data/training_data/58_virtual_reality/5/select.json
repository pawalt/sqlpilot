[
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT file_id, project_name, file_content, version_number FROM project_files WHERE project_name = 'Project A';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE file_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, version_number FROM project_files WHERE version_number > 3;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT project_name FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT AVG(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM project_files WHERE project_name LIKE '%Project%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) FROM project_files GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT MAX(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT MIN(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT SUM(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files ORDER BY version_number DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_name IN ('Project A', 'Project B');",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT file_id, project_name FROM project_files WHERE version_number BETWEEN 2 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, version_number FROM project_files WHERE project_name LIKE 'A%' ORDER BY version_number ASC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE file_content IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_name = 'Project A' AND version_number = 3;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE version_number < (SELECT AVG(version_number) FROM project_files);",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT file_id, project_name FROM project_files OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT file_id, project_name FROM project_files WHERE project_name = 'Project A' LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name FROM project_files WHERE file_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, version_number FROM project_files WHERE version_number > 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_name LIKE '%example%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) FROM project_files GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT AVG(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT MAX(version_number) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, SUM(version_number) FROM project_files GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, SUBSTRING(project_name, 1, 5) AS short_name FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, LENGTH(project_name) AS name_length FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, project_name || '_' || version_number AS new_column FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files WHERE project_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files WHERE version_number BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files ORDER BY version_number DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT project_name FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number, CASE WHEN version_number > 5 THEN 'High' ELSE 'Low' END AS version_status FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files WHERE CAST(version_number AS FLOAT) > 5.5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files INNER JOIN another_table ON project_files.file_id = another_table.id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n  file_id INT PRIMARY KEY,\n  project_name VARCHAR(255),\n  file_content BYTEA,\n  version_number INT\n)\n\n### STATEMENT\n\nSELECT project_name, file_id, version_number FROM project_files WHERE project_name IN ('Project A', 'Project B');",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE file_name = 'example.txt';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_content FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT version_id, project_id, version_number FROM version_history WHERE version_number > 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, changes FROM version_history WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files LEFT JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number FROM project_files RIGHT JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files INNER JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files FULL JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id WHERE file_name LIKE 'example%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id ORDER BY version_number DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(version_number) FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, MAX(version_number) FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, MIN(version_number) FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(*) FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT file_name FROM project_files WHERE file_content LIKE '%Important%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, version_number FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id WHERE version_number >= 2;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT project_id FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM project_files WHERE file_name LIKE '%.pdf%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(*) AS total_versions FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, MAX(version_number) AS latest_version FROM version_history WHERE project_id = 3 GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, SUM(version_number) AS total_versions FROM version_history WHERE project_id = 2 GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, AVG(version_number) AS avg_version FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number, changes FROM version_history WHERE changes IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number FROM version_history WHERE version_number = (SELECT MAX(version_number) FROM version_history);",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, file_content FROM project_files WHERE project_id IN (SELECT project_id FROM version_history WHERE version_number > 5);",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number, changes FROM version_history WHERE version_number BETWEEN 3 AND 6;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE LENGTH(file_name) > 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE CHAR_LENGTH(file_name) < 20;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE file_name ILIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number FROM version_history WHERE project_id IN (SELECT project_id FROM version_history GROUP BY project_id HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number, changes FROM version_history WHERE changes LIKE '%bug%' AND project_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id SERIAL PRIMARY KEY,\n    file_name VARCHAR(255) NOT NULL,\n    file_content TEXT NOT NULL\n);\n\nCREATE TABLE version_history (\n    version_id SERIAL PRIMARY KEY,\n    project_id INT NOT NULL,\n    version_number INT NOT NULL,\n    changes TEXT\n);\n\n### STATEMENT\n\nSELECT project_id, version_number, changes FROM version_history WHERE changes LIKE '%feature%' AND project_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT file_name FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT file_type FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, file_type FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT version_date, author FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT version_id, project_id, version_date, author FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT file_name, file_type FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM version_history WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT author, notes FROM version_history WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE file_type = 'pdf';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT file_name, file_content FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name FROM project_files WHERE file_type = 'image' AND file_name LIKE '%logo%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT version_id, project_id, author FROM version_history WHERE version_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM version_history WHERE author = 'John Doe' AND notes LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM project_files JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT users.user_id, users.username, project_files.file_name FROM users JOIN project_files ON users.user_id = project_files.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN version_history ON users.user_id = version_history.project_id WHERE version_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, file_name, notes FROM project_files LEFT JOIN version_history ON project_files.project_id = version_history.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT users.username, version_history.version_date, version_history.notes FROM users RIGHT JOIN version_history ON users.user_id = version_history.project_id WHERE version_date > '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT users.username, version_id, author FROM users FULL JOIN version_history ON users.user_id = version_history.project_id WHERE version_date BETWEEN '2020-01-01' AND '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MAX(version_id) AS latest_version, project_id FROM version_history GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(*) AS total_versions FROM version_history GROUP BY project_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(version_id) AS avg_version_id FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT DISTINCT project_id FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM version_history ORDER BY version_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE file_type IN ('image', 'video');",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n    project_id INT PRIMARY KEY,\n    file_name VARCHAR(255),\n    file_type VARCHAR(50),\n    file_content BYTEA\n);\n\nCREATE TABLE version_history (\n    version_id INT PRIMARY KEY,\n    project_id INT,\n    version_date TIMESTAMP,\n    author VARCHAR(100),\n    notes TEXT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(100),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) AS max_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT file_id, file_name FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM project_versions WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT version_data FROM project_versions WHERE version_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, project_description FROM projects WHERE project_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE email = 'example@email.com';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, created_at FROM projects ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(*) AS total_files FROM project_files GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(file_id) AS avg_file_id FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) AS total_versions FROM project_versions INNER JOIN projects ON project_versions.project_id = projects.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, created_at FROM projects WHERE project_name LIKE 'Project%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects WHERE created_at BETWEEN '2022-01-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE file_data IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, MAX(created_at) AS latest_date FROM projects GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, AVG(project_id) AS avg_project_id FROM projects GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) AS total_users FROM projects LEFT JOIN users ON projects.project_id = users.user_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects WHERE project_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT file_name, created_at FROM project_files WHERE file_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, project_description FROM projects WHERE project_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM projects WHERE project_name LIKE '%data%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE email = 'example@email.com';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, version_data FROM projects INNER JOIN project_versions ON projects.project_id = project_versions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, version_data FROM projects LEFT JOIN project_versions ON projects.project_id = project_versions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, p.project_name FROM users u INNER JOIN projects p ON u.user_id = p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT p.project_name, v.version_data FROM projects p INNER JOIN project_versions v ON p.project_id = v.project_id WHERE p.created_at > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT p.project_id, COUNT(v.version_id) AS version_count FROM projects p LEFT JOIN project_versions v ON p.project_id = v.project_id GROUP BY p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(p.project_id) AS project_count FROM users u LEFT JOIN projects p ON u.user_id = p.project_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, MAX(created_at) AS latest_created_at FROM projects GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, AVG(version_id) AS average_version_id FROM project_versions GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT p.project_id, p.project_name, COUNT(v.version_id) AS version_count FROM projects p LEFT JOIN project_versions v ON p.project_id = v.project_id GROUP BY p.project_id, p.project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(p.project_id) AS project_count FROM users u LEFT JOIN projects p ON u.user_id = p.project_id GROUP BY u.username HAVING COUNT(p.project_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name, created_at FROM projects UNION SELECT project_id, project_name, created_at FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT file_id, file_name, project_name FROM project_files INNER JOIN projects ON project_files.project_id = projects.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, p.project_name, v.version_data FROM users u JOIN projects p ON u.user_id = p.project_id JOIN project_versions v ON p.project_id = v.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name, MAX(created_at) AS latest_created_at FROM projects GROUP BY project_id, project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(DISTINCT user_id) AS num_users FROM projects GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(project_id) AS avg_project_id FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n   file_id INT PRIMARY KEY,\n   file_name VARCHAR(255),\n   file_data BYTEA,\n   project_id INT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE project_versions (\n   version_id INT PRIMARY KEY,\n   project_id INT,\n   version_data BYTEA,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE projects (\n   project_id SERIAL PRIMARY KEY, \n   project_name VARCHAR(255),\n   project_description TEXT,\n   created_at TIMESTAMP\n);\n\n\nCREATE TABLE users (\n   user_id SERIAL PRIMARY KEY,\n   username VARCHAR(50),\n   email VARCHAR(255),\n   created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT project_id, project_name, version_id FROM projects CROSS JOIN project_versions LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM project_files;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT file_id, project_name FROM project_files WHERE file_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM version_history;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT version_id, file_id, version_name FROM version_history WHERE version_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM user_projects;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_id, user_id, project_name FROM user_projects WHERE user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM project_permissions;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT permission_id, project_id, user_id, permission_type FROM project_permissions WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT file_id, project_name, created_at FROM project_files ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT version_id, file_id, version_name, created_at FROM version_history ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users ORDER BY user_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_id, user_id, project_name, created_at FROM user_projects ORDER BY created_at ASC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT permission_id, project_id, user_id, permission_type, created_at FROM project_permissions ORDER BY created_at ASC;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT file_id, COUNT(version_id) AS num_versions FROM version_history GROUP BY file_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(project_id) AS num_projects FROM user_projects GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_id, MAX(created_at) AS latest_project_date FROM user_projects GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, permission_type FROM user_projects JOIN project_permissions ON user_projects.project_id = project_permissions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, user_projects.project_name, project_permissions.permission_type FROM users JOIN user_projects ON users.user_id = user_projects.user_id JOIN project_permissions ON user_projects.project_id = project_permissions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT * FROM project_files WHERE project_name = 'Sample Project';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT file_id, project_name, created_at FROM project_files WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, project_files.project_name FROM users JOIN user_projects ON users.user_id = user_projects.user_id JOIN project_files ON user_projects.project_id = project_files.file_id WHERE users.username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, user_projects.project_name, project_permissions.permission_type FROM users JOIN user_projects ON users.user_id = user_projects.user_id JOIN project_permissions ON user_projects.project_id = project_permissions.project_id WHERE project_permissions.permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, COUNT(version_id) AS total_versions FROM project_files LEFT JOIN version_history ON project_files.file_id = version_history.file_id GROUP BY project_files.project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, MAX(created_at) AS latest_version FROM project_files LEFT JOIN version_history ON project_files.file_id = version_history.file_id GROUP BY project_files.project_name;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(project_id) AS total_projects FROM users LEFT JOIN user_projects ON users.user_id = user_projects.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, user_projects.project_name, project_permissions.permission_type FROM users JOIN user_projects ON users.user_id = user_projects.user_id LEFT JOIN project_permissions ON user_projects.project_id = project_permissions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(project_permissions.permission_id) AS total_permissions FROM users JOIN project_permissions ON users.user_id = project_permissions.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, user_projects.project_name, project_files.file_content FROM users JOIN user_projects ON users.user_id = user_projects.user_id JOIN project_files ON user_projects.project_id = project_files.file_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, version_history.version_name, version_history.created_at FROM project_files JOIN version_history ON project_files.file_id = version_history.file_id WHERE project_files.project_name LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT users.username FROM users JOIN project_permissions ON users.user_id = project_permissions.user_id WHERE project_permissions.permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(DISTINCT user_projects.project_id) AS total_projects FROM users JOIN user_projects ON users.user_id = user_projects.user_id GROUP BY users.username HAVING COUNT(DISTINCT user_projects.project_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, version_history.version_name, users.username FROM project_files JOIN version_history ON project_files.file_id = version_history.file_id JOIN user_projects ON project_files.file_id = user_projects.project_id JOIN users ON user_projects.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, project_permissions.permission_type, COUNT(1) AS permissions_count FROM users JOIN project_permissions ON users.user_id = project_permissions.user_id GROUP BY users.username, project_permissions.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_permissions.permission_type, COUNT(1) AS permissions_count FROM project_permissions GROUP BY project_permissions.permission_type HAVING COUNT(1) > 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, users.username, user_projects.created_at AS joined_on FROM project_files JOIN user_projects ON project_files.file_id = user_projects.project_id JOIN users ON user_projects.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT users.username, user_projects.project_name, project_files.created_at AS project_created_at FROM users JOIN user_projects ON users.user_id = user_projects.user_id JOIN project_files ON user_projects.project_id = project_files.file_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, COUNT(users.user_id) AS total_users FROM project_files JOIN user_projects ON project_files.file_id = user_projects.project_id JOIN users ON user_projects.user_id = users.user_id GROUP BY project_files.project_name HAVING COUNT(users.user_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name, version_history.version_name, users.username, project_permissions.permission_type FROM project_files JOIN version_history ON project_files.file_id = version_history.file_id JOIN user_projects ON project_files.file_id = user_projects.project_id JOIN users ON user_projects.user_id = users.user_id JOIN project_permissions ON project_files.file_id = project_permissions.project_id;",
  "### TABLEDATA\n\nCREATE TABLE project_files (\n\tfile_id INT,\n\tproject_name VARCHAR(255),\n\tfile_content TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (file_id)\n)\n\nCREATE TABLE version_history (\n\tversion_id INT,\n\tfile_id INT,\n\tversion_name VARCHAR(255),\n\tchange_description TEXT,\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (version_id),\n\tFOREIGN KEY (file_id) REFERENCES project_files(file_id)\n)\n\nCREATE TABLE users (\n\tuser_id INT,\n\tusername VARCHAR(255),\n\temail VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (user_id)\n)\n\nCREATE TABLE user_projects (\n\tproject_id INT,\n\tuser_id INT,\n\tproject_name VARCHAR(255),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE project_permissions (\n\tpermission_id INT,\n\tproject_id INT,\n\tuser_id INT,\n\tpermission_type VARCHAR(50),\n\tcreated_at TIMESTAMP,\n\tPRIMARY KEY (permission_id),\n\tFOREIGN KEY (project_id) REFERENCES user_projects(project_id),\n\tFOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\n### STATEMENT\n\nSELECT project_files.project_name AS project, users.username AS user, project_permissions.permission_type AS permission, version_history.version_name AS version FROM project_files JOIN version_history ON project_files.file_id = version_history.file_id JOIN user_projects ON project_files.file_id = user_projects.project_id JOIN users ON user_projects.user_id = users.user_id JOIN project_permissions ON project_files.file_id = project_permissions.project_id WHERE project_name = 'Sample Project';"
]