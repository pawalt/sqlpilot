[
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (1, 'Event 1', '2022-08-20', '10:00:00', 'Location 1') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 1', event_date = '2022-08-21', event_time = '11:00:00', event_location = 'Updated Location 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (2, 'Event 2', '2022-09-15', '14:30:00', 'Location 2') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 2', event_date = '2022-09-16', event_time = '15:30:00', event_location = 'Updated Location 2';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (3, 'Event 3', '2022-10-10', '12:00:00', 'Location 3') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 3', event_date = '2022-10-11', event_time = '13:00:00', event_location = 'Updated Location 3';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (4, 'Event 4', '2022-11-05', '17:00:00', 'Location 4') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 4', event_date = '2022-11-06', event_time = '18:00:00', event_location = 'Updated Location 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (5, 'Event 5', '2022-12-01', '19:30:00', 'Location 5') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 5', event_date = '2022-12-02', event_time = '20:30:00', event_location = 'Updated Location 5';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (6, 'Event 6', '2023-01-25', '09:00:00', 'Location 6') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 6', event_date = '2023-01-26', event_time = '10:00:00', event_location = 'Updated Location 6';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (7, 'Event 7', '2023-02-20', '16:45:00', 'Location 7') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 7', event_date = '2023-02-21', event_time = '17:45:00', event_location = 'Updated Location 7';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (8, 'Event 8', '2023-03-18', '14:15:00', 'Location 8') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 8', event_date = '2023-03-19', event_time = '15:15:00', event_location = 'Updated Location 8';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (9, 'Event 9', '2023-04-14', '11:30:00', 'Location 9') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 9', event_date = '2023-04-15', event_time = '12:30:00', event_location = 'Updated Location 9';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (10, 'Event 10', '2023-05-10', '18:20:00', 'Location 10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 10', event_date = '2023-05-11', event_time = '19:20:00', event_location = 'Updated Location 10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (11, 'Event 11', '2023-06-05', '12:45:00', 'Location 11') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 11', event_date = '2023-06-06', event_time = '13:45:00', event_location = 'Updated Location 11';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (12, 'Event 12', '2023-07-22', '21:00:00', 'Location 12') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 12', event_date = '2023-07-23', event_time = '22:00:00', event_location = 'Updated Location 12';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (13, 'Event 13', '2023-08-18', '10:30:00', 'Location 13') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 13', event_date = '2023-08-19', event_time = '11:30:00', event_location = 'Updated Location 13';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (14, 'Event 14', '2023-09-13', '14:00:00', 'Location 14') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 14', event_date = '2023-09-14', event_time = '15:00:00', event_location = 'Updated Location 14';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (15, 'Event 15', '2023-10-01', '16:40:00', 'Location 15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 15', event_date = '2023-10-02', event_time = '17:40:00', event_location = 'Updated Location 15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (16, 'Event 16', '2023-11-26', '19:20:00', 'Location 16') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 16', event_date = '2023-11-27', event_time = '20:20:00', event_location = 'Updated Location 16';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (17, 'Event 17', '2023-12-20', '14:10:00', 'Location 17') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 17', event_date = '2023-12-21', event_time = '15:10:00', event_location = 'Updated Location 17';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (18, 'Event 18', '2024-01-15', '09:45:00', 'Location 18') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 18', event_date = '2024-01-16', event_time = '10:45:00', event_location = 'Updated Location 18';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (19, 'Event 19', '2024-02-10', '17:30:00', 'Location 19') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 19', event_date = '2024-02-11', event_time = '18:30:00', event_location = 'Updated Location 19';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (20, 'Event 20', '2024-03-05', '13:00:00', 'Location 20') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 20', event_date = '2024-03-06', event_time = '14:00:00', event_location = 'Updated Location 20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (1, 'Event 1', '2023-01-10', '10:00:00', 'Location 1') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 1', event_date = '2023-01-10', event_time = '10:00:00', event_location = 'Updated Location 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (2, 'Event 2', '2023-02-15', '14:30:00', 'Location 2') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 2', event_date = '2023-02-15', event_time = '14:30:00', event_location = 'Updated Location 2';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (3, 'Event 3', '2023-03-20', '09:00:00', 'Location 3') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 3', event_date = '2023-03-20', event_time = '09:00:00', event_location = 'Updated Location 3';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (4, 'Event 4', '2023-04-25', '16:00:00', 'Location 4') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 4', event_date = '2023-04-25', event_time = '16:00:00', event_location = 'Updated Location 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (5, 'Event 5', '2023-05-30', '11:30:00', 'Location 5') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 5', event_date = '2023-05-30', event_time = '11:30:00', event_location = 'Updated Location 5';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (6, 'Event 6', '2023-06-05', '13:00:00', 'Location 6') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 6', event_date = '2023-06-05', event_time = '13:00:00', event_location = 'Updated Location 6';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (7, 'Event 7', '2023-07-10', '10:30:00', 'Location 7') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 7', event_date = '2023-07-10', event_time = '10:30:00', event_location = 'Updated Location 7';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (8, 'Event 8', '2023-08-15', '15:00:00', 'Location 8') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 8', event_date = '2023-08-15', event_time = '15:00:00', event_location = 'Updated Location 8';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (9, 'Event 9', '2023-09-20', '08:30:00', 'Location 9') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 9', event_date = '2023-09-20', event_time = '08:30:00', event_location = 'Updated Location 9';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (10, 'Event 10', '2023-10-25', '17:00:00', 'Location 10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 10', event_date = '2023-10-25', event_time = '17:00:00', event_location = 'Updated Location 10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (11, 'Event 11', '2023-11-30', '12:30:00', 'Location 11') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 11', event_date = '2023-11:30', event_time = '12:30:00', event_location = 'Updated Location 11';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (12, 'Event 12', '2023-12-05', '13:45:00', 'Location 12') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 12', event_date = '2023-12-05', event_time = '13:45:00', event_location = 'Updated Location 12';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (13, 'Event 13', '2024-01-10', '10:15:00', 'Location 13') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 13', event_date = '2024-01-10', event_time = '10:15:00', event_location = 'Updated Location 13';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (14, 'Event 14', '2024-02-15', '14:45:00', 'Location 14') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 14', event_date = '2024-02-15', event_time = '14:45:00', event_location = 'Updated Location 14';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (15, 'Event 15', '2024-03-20', '09:30:00', 'Location 15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 15', event_date = '2024-03-20', event_time = '09:30:00', event_location = 'Updated Location 15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (16, 'Event 16', '2024-04-25', '15:00:00', 'Location 16') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 16', event_date = '2024-04-25', event_time = '15:00:00', event_location = 'Updated Location 16';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (17, 'Event 17', '2024-05-30', '12:45:00', 'Location 17') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 17', event_date = '2024-05-30', event_time = '12:45:00', event_location = 'Updated Location 17';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (18, 'Event 18', '2024-06-05', '13:15:00', 'Location 18') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 18', event_date = '2024-06-05', event_time = '13:15:00', event_location = 'Updated Location 18';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (19, 'Event 19', '2024-07-10', '10:45:00', 'Location 19') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 19', event_date = '2024-07-10', event_time = '10:45:00', event_location = 'Updated Location 19';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES (20, 'Event 20', '2024-08-15', '15:15:00', 'Location 20') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 20', event_date = '2024-08-15', event_time = '15:15:00', event_location = 'Updated Location 20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('a1b2c3', 'Event 1', '2022-01-01', '12:00:00', 'Location 1') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('d4e5f6', 'Event 2', '2022-02-02', '15:00:00', 'Location 2') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 2';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('g7h8i9', 'Event 3', '2022-03-03', '18:00:00', 'Location 3') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 3';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('j1k2l3', 'Event 4', '2022-04-04', '21:00:00', 'Location 4') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('m4n5o6', 'Event 5', '2022-05-05', '10:00:00', 'Location 5') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 5';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('p7q8r9', 'Event 6', '2022-06-06', '13:00:00', 'Location 6') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 6';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('s1t2u3', 'Event 7', '2022-07-07', '16:00:00', 'Location 7') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 7';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('v4w5x6', 'Event 8', '2022-08-08', '19:00:00', 'Location 8') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 8';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('y7z8a9', 'Event 9', '2022-09-09', '22:00:00', 'Location 9') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 9';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('b1c2d3', 'Event 10', '2022-10-10', '11:00:00', 'Location 10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO attendees (attendee_id, attendee_name, attendee_email, events_attending, registration_date) VALUES ('aa11bb22', 'John Doe', 'john.doe@example.com', '[",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('1', 'Music Concert', '2023-10-15', '19:00:00', 'City Hall') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('2', 'Art Exhibition', '2023-11-20', '11:00:00', 'Art Gallery') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('3', 'Food Festival', '2023-09-05', '12:30:00', 'Park') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('4', 'Tech Conference', '2023-08-25', '09:00:00', 'Convention Center') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('5', 'Sports Tournament', '2023-07-10', '14:00:00', 'Stadium') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('6', 'Fashion Show', '2023-06-18', '17:30:00', 'Runway Theater') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('7', 'Film Festival', '2023-11-05', '10:00:00', 'Movie Theater') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('8', 'Charity Gala', '2023-12-20', '18:00:00', 'Community Center') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('9', 'Comedy Show', '2023-09-28', '20:30:00', 'Comedy Club') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('10', 'Dance Night', '2023-07-03', '21:00:00', 'Dance Studio') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('11', 'Book Reading', '2023-06-12', '16:00:00', 'Bookstore') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('12', 'Workshop', '2023-10-25', '13:00:00', 'Coworking Space') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('13', 'Science Fair', '2023-08-08', '10:30:00', 'Science Museum') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('14', 'Wine Tasting', '2023-07-17', '19:30:00', 'Vineyard') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('15', 'Magic Show', '2023-11-30', '15:45:00', 'Magic Theater') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('16', 'Fashion Workshop', '2023-09-15', '14:15:00', 'Fashion Studio') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('17', 'Tech Expo', '2023-10-06', '09:30:00', 'Exhibition Center') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('18', 'Yoga Retreat', '2023-08-12', '07:00:00', 'Retreat Center') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('19', 'Rock Concert', '2023-06-28', '20:00:00', 'Music Venue') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_time, event_location) VALUES ('20', 'Film Screening', '2023-07-25', '18:30:00', 'Outdoor Cinema') ON CONFLICT (event_id) DO UPDATE SET event_name = EXCLUDED.event_name, event_date = EXCLUDED.event_date, event_time = EXCLUDED.event_time, event_location = EXCLUDED.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Event 1', '2022-01-15', 'Location A') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 1', event_date = '2022-01-15', event_location = 'Location A';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Event 2', '2022-02-20', 'Location B') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 2', event_date = '2022-02-20', event_location = 'Location B';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Event 3', '2022-03-25', 'Location C') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 3', event_date = '2022-03-25', event_location = 'Location C';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Event 4', '2022-04-30', 'Location D') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 4', event_date = '2022-04-30', event_location = 'Location D';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (5, 'Event 5', '2022-05-05', 'Location E') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 5', event_date = '2022-05-05', event_location = 'Location E';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (6, 'Event 6', '2022-06-10', 'Location F') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 6', event_date = '2022-06-10', event_location = 'Location F';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (7, 'Event 7', '2022-07-15', 'Location G') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 7', event_date = '2022-07-15', event_location = 'Location G';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (8, 'Event 8', '2022-08-20', 'Location H') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 8', event_date = '2022-08-20', event_location = 'Location H';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (9, 'Event 9', '2022-09-25', 'Location I') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 9', event_date = '2022-09-25', event_location = 'Location I';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (10, 'Event 10', '2022-10-30', 'Location J') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 10', event_date = '2022-10-30', event_location = 'Location J';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (11, 'Event 11', '2022-11-05', 'Location K') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 11', event_date = '2022-11-05', event_location = 'Location K';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (12, 'Event 12', '2022-12-10', 'Location L') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 12', event_date = '2022-12-10', event_location = 'Location L';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (13, 'Event 13', '2023-01-15', 'Location A') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 13', event_date = '2023-01-15', event_location = 'Location A';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (14, 'Event 14', '2023-02-20', 'Location B') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 14', event_date = '2023-02-20', event_location = 'Location B';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (15, 'Event 15', '2023-03-25', 'Location C') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 15', event_date = '2023-03-25', event_location = 'Location C';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (16, 'Event 16', '2023-04-30', 'Location D') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 16', event_date = '2023-04-30', event_location = 'Location D';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (17, 'Event 17', '2023-05-05', 'Location E') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 17', event_date = '2023-05-05', event_location = 'Location E';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (18, 'Event 18', '2023-06-10', 'Location F') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 18', event_date = '2023-06-10', event_location = 'Location F';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (19, 'Event 19', '2023-07-15', 'Location G') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 19', event_date = '2023-07-15', event_location = 'Location G';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (20, 'Event 20', '2023-08-20', 'Location H') ON DUPLICATE KEY UPDATE event_name = 'Updated Event 20', event_date = '2023-08-20', event_location = 'Location H';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Event 1', '2022-10-15', 'Location 1') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Event 2', '2022-11-20', 'Location 2') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 2';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Event 3', '2022-12-25', 'Location 3') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 3';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (1, 'John Doe', 'john@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Jane Doe';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (2, 'Alice Smith', 'alice@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Bob Smith';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (3, 'Mary Brown', 'mary@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Mark Brown';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (1, 1) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (1, 2) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (2, 2) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Event 4', '2023-01-10', 'Location 4') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (5, 'Event 5', '2023-02-15', 'Location 5') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 5';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (4, 'Ryan Miller', 'ryan@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Rachel Miller';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (5, 'Peter Wilson', 'peter@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Patricia Wilson';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (3, 3) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (4, 4) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (5, 5) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (6, 'Event 6', '2023-03-20', 'Location 6') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 6';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (6, 'Emma Johnson', 'emma@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Ethan Johnson';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (6, 6) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (7, 'Event 7', '2023-04-25', 'Location 7') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 7';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email) VALUES (7, 'Olivia White', 'olivia@example.com') ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Oscar White';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id) VALUES (7, 7) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Event1', '2022-10-15', 'Location1') ON CONFLICT (event_id) DO UPDATE SET event_name = excluded.event_name, event_date = excluded.event_date, event_location = excluded.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Event2', '2022-11-20', 'Location2') ON CONFLICT (event_id) DO UPDATE SET event_name = excluded.event_name, event_date = excluded.event_date, event_location = excluded.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Event3', '2022-12-25', 'Location3') ON CONFLICT (event_id) DO UPDATE SET event_name = excluded.event_name, event_date = excluded.event_date, event_location = excluded.event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Event4',...",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Music Concert', '2022-08-15', 'Arena Hall') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Music Concert Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Tech Conference', '2022-09-20', 'Convention Center') ON CONFLICT (event_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email, event_id) VALUES (1, 'John Doe', 'john.doe@example.com', 1) ON CONFLICT (attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email, event_id) VALUES (2, 'Jane Smith', 'jane.smith@example.com', 2) ON CONFLICT (attendee_id) DO UPDATE SET attendee_name = 'Jane Smith Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO tickets (ticket_id, ticket_type, ticket_price, event_id) VALUES (1, 'General Admission', 50.00, 1) ON CONFLICT (ticket_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO tickets (ticket_id, ticket_type, ticket_price, event_id) VALUES (2, 'VIP Pass', 100.00, 2) ON CONFLICT (ticket_id) DO UPDATE SET ticket_type = 'VIP Pass Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id, ticket_id) VALUES (1, 1, 1) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id, ticket_id) VALUES (2, 2, 2) ON CONFLICT (event_id, attendee_id) DO UPDATE SET ticket_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Art Exhibition', '2022-10-10', 'Gallery Center') ON CONFLICT (event_id) DO UPDATE SET event_location = 'Gallery Hall';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Food Festival', '2022-11-15', 'Park Grounds') ON CONFLICT (event_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email, event_id) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com', 3) ON CONFLICT (attendee_id) DO UPDATE SET attendee_email = 'alice.new@example.com';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_id, attendee_name, attendee_email, event_id) VALUES (4, 'Bob Williams', 'bob.williams@example.com', 4) ON CONFLICT (attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO tickets (ticket_id, ticket_type, ticket_price, event_id) VALUES (3, 'Family Pass', 80.00, 3) ON CONFLICT (ticket_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO tickets (ticket_id, ticket_type, ticket_price, event_id) VALUES (4, 'Student Discount', 30.00, 4) ON CONFLICT (ticket_id) DO UPDATE SET ticket_price = 25.00;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id, ticket_id) VALUES (3, 3, 3) ON CONFLICT (event_id, attendee_id) DO UPDATE SET ticket_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_attendees (event_id, attendee_id, ticket_id) VALUES (4, 4, 4) ON CONFLICT (event_id, attendee_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Event 1', '2022-11-15', '15:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = excluded.event_date, event_time = excluded.event_time;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('John Doe', 'john.doe@example.com', 1) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = excluded.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('VIP', 100.00, 1) ON CONFLICT (ticket_type) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Session 1', '2022-11-15', '16:00:00', 1) ON CONFLICT (session_title) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (1, 1, 5, 'Great event!') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = excluded.rating, feedback_text = excluded.feedback_text;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Event 2', '2022-12-05', '14:30:00') ON CONFLICT (event_name) DO UPDATE SET event_date = excluded.event_date, event_time = excluded.event_time;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Alice Smith', 'alice.smith@example.com', 2) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = excluded.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('General Admission', 50.00, 2) ON CONFLICT (ticket_type) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Session 2', '2022-12-05', '15:30:00', 2) ON CONFLICT (session_title) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (2, 2, 4, 'Enjoyed the event!') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = excluded.rating, feedback_text = excluded.feedback_text;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Event 3', '2023-01-20', '18:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = excluded.event_date, event_time = excluded.event_time;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Bob Brown', 'bob.brown@example.com', 3) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = excluded.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('Student Ticket', 25.00, 3) ON CONFLICT (ticket_type) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Session 3', '2023-01-20', '19:00:00', 3) ON CONFLICT (session_title) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (3, 3, 3, 'Could be better.') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = excluded.rating, feedback_text = excluded.feedback_text;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Event 4', '2023-02-10', '17:30:00') ON CONFLICT (event_name) DO UPDATE SET event_date = excluded.event_date, event_time = excluded.event_time;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Sarah Lee', 'sarah.lee@example.com', 4) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = excluded.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('Family Package', 150.00, 4) ON CONFLICT (ticket_type) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Session 4', '2023-02-10', '18:30:00', 4) ON CONFLICT (session_title) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (4, 4, 5, 'Excellent organization!') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = excluded.rating, feedback_text = excluded.feedback_text;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Tech Conference', '2023-05-20', '09:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = '2023-05-20', event_time = '09:00:00';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('John Doe', 'john.doe@example.com', 1) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('General Admission', 50.00, 1) ON CONFLICT (ticket_type) DO UPDATE SET ticket_price = 50.00, event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Keynote Address', '2023-05-20', '09:00:00', 1) ON CONFLICT (session_title) DO UPDATE SET session_date = '2023-05-20', session_time = '09:00:00', event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (1, 1, 5, 'Great event!') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = 5, feedback_text = 'Great event!';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Music Festival', '2023-06-15', '15:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = '2023-06-15', event_time = '15:00:00';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Alice Smith', 'alice.smith@example.com', 2) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('VIP Pass', 100.00, 2) ON CONFLICT (ticket_type) DO UPDATE SET ticket_price = 100.00, event_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Outdoor Stage Performance', '2023-06-15', '18:00:00', 2) ON CONFLICT (session_title) DO UPDATE SET session_date = '2023-06-15', session_time = '18:00:00', event_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (2, 2, 4, 'Good music selection.') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = 4, feedback_text = 'Good music selection.';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Workshop Series', '2023-07-10', '10:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = '2023-07-10', event_time = '10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Bob Brown', 'bob.brown@example.com', 3) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('All Access Pass', 75.00, 3) ON CONFLICT (ticket_type) DO UPDATE SET ticket_price = 75.00, event_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Panel Discussion', '2023-07-10', '12:00:00', 3) ON CONFLICT (session_title) DO UPDATE SET session_date = '2023-07-10', session_time = '12:00:00', event_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (3, 3, 3, 'Could have been better.') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = 3, feedback_text = 'Could have been better.';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, event_time) VALUES ('Networking Mixer', '2023-08-05', '18:00:00') ON CONFLICT (event_name) DO UPDATE SET event_date = '2023-08-05', event_time = '18:00:00';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO attendees (attendee_name, attendee_email, attending_event_id) VALUES ('Emily Johnson', 'emily.johnson@example.com', 4) ON CONFLICT (attendee_email) DO UPDATE SET attending_event_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_tickets (ticket_type, ticket_price, event_id) VALUES ('Networking Pass', 25.00, 4) ON CONFLICT (ticket_type) DO UPDATE SET ticket_price = 25.00, event_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_sessions (session_title, session_date, session_time, event_id) VALUES ('Business Card Exchange', '2023-08-05', '19:00:00', 4) ON CONFLICT (session_title) DO UPDATE SET session_date = '2023-08-05', session_time = '19:00:00', event_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nINSERT INTO event_feedback (event_id, attendee_id, rating, feedback_text) VALUES (4, 4, 5, 'Excellent networking opportunity!') ON CONFLICT (event_id, attendee_id) DO UPDATE SET rating = 5, feedback_text = 'Excellent networking opportunity!';"
]