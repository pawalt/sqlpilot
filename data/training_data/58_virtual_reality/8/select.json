[
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date = '2022-10-20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date > '2022-11-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_time FROM events WHERE event_location = 'London';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT MAX(event_date) FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT MIN(event_time) FROM events WHERE event_location = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_location FROM events WHERE event_name LIKE '%conference%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_date, event_time FROM events WHERE event_name NOT LIKE '%party%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT event_location FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events ORDER BY event_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events ORDER BY event_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT AVG(event_id) FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT SUM(event_id) FROM events WHERE event_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS event_count FROM events GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_location, MAX(event_date) FROM events GROUP BY event_location;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location, CONCAT(event_date, ' ', event_time) AS event_datetime FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date = '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_time BETWEEN '08:00:00' AND '12:00:00'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_name LIKE '%conference%'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_location = 'New York'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM events WHERE event_date = '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_time < '18:00:00' ORDER BY event_date DESC",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_location IN ('Chicago', 'Los Angeles')",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date = '2022-01-01' AND event_location = 'San Francisco'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_date = '2022-02-14' AND event_time > '14:00:00'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_name NOT LIKE '%workshop%'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT event_location FROM events",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date < '2022-01-15' AND (event_location = 'Seattle' OR event_location = 'Portland')",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events WHERE event_date <= '2022-02-28' ORDER BY event_date ASC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_time BETWEEN '10:00:00' AND '16:00:00' AND event_location = 'Denver'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name FROM events WHERE event_date = '2022-03-20' AND event_location != 'San Diego'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_name = 'Seminar' AND event_location LIKE '%Hall%'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_date, event_time FROM events WHERE event_date >= '2022-01-01' AND event_date <= '2022-12-31' ORDER BY event_name ASC",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_id, event_name, event_location FROM events WHERE event_date = '2022-05-01' AND event_time < '12:00:00'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_name IN ('Meeting', 'Conference')",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_time FROM events WHERE event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT attendee_name, attendee_email FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT attendee_name, events_attending FROM attendees WHERE registration_date >= '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_location FROM events WHERE event_date >= '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_time BETWEEN '08:00:00' AND '12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name FROM events WHERE event_location LIKE 'Los Angeles%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT event_location) FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_time FROM events WHERE event_date = '2023-05-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT attendee_name FROM attendees WHERE events_attending LIKE '%Event A%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_location FROM events ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT attendee_name, registration_date FROM attendees WHERE registration_date >= '2023-01-01' ORDER BY registration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_name = 'Conference' AND event_date = '2023-10-20' AND event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT attendee_name, COUNT(events_attending) AS total_events FROM attendees GROUP BY attendee_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_date, COUNT(*) AS total_events FROM events GROUP BY event_date;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date = (SELECT MAX(event_date) FROM events);",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM attendees WHERE registration_date = (SELECT MIN(registration_date) FROM attendees);",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date = '2022-10-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date >= '2022-10-01' AND event_date <= '2022-10-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date < '2022-09-01' AND event_location LIKE '%New York%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e JOIN attendees a ON e.event_id = ANY(a.events_attending) WHERE e.event_date = '2022-11-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT a.attendee_name, COUNT(e.event_id) AS events_count FROM events e JOIN attendees a ON e.event_id = ANY(a.events_attending) GROUP BY a.attendee_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT a.attendee_name FROM attendees a WHERE a.registration_date >= '2022-10-01' AND a.registration_date <= '2022-10-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_time FROM events WHERE event_date = '2022-11-30' ORDER BY event_time ASC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, COUNT(a.attendee_id) AS total_attendees FROM events e LEFT JOIN attendees a ON e.event_id = ANY(a.events_attending) GROUP BY e.event_name, e.event_location HAVING COUNT(a.attendee_id) >= 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name, a.attendee_email FROM events e JOIN attendees a ON e.event_id = ANY(a.events_attending) WHERE e.event_date >= '2022-12-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_location FROM events WHERE event_date BETWEEN '2022-09-01' AND '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name, a.registration_date FROM events e JOIN attendees a ON e.event_id = ANY(a.events_attending) WHERE a.registration_date >= '2022-09-01' AND a.registration_date <='2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id UUID PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_time TIME,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id UUID PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    events_attending JSON,\n    registration_date DATE\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE...",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_location FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, attendee_email FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_id, attendee_name FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_id, attendee_id FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_id, attendee_id FROM event_attendees WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_id, attendee_id FROM event_attendees WHERE attendee_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees a ON a.attendee_id = ea.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e LEFT JOIN event_attendees ea ON e.event_id = ea.event_id LEFT JOIN attendees a ON a.attendee_id = ea.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(ea.attendee_id) AS total_attendees FROM events e LEFT JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(ea.attendee_id) AS total_attendees FROM events e LEFT JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_name HAVING COUNT(ea.attendee_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, MAX(a.attendee_id) AS max_attendee_id FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees a ON a.attendee_id = ea.attendee_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT AVG(event_id) AS avg_event_id FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, MIN(ea.attendee_id) AS min_attendee_id FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, attendee_email FROM attendees WHERE attendee_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date = '2022-08-10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM event_attendees WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees a ON ea.attendee_id = a.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(attendee_id) as total_attendees FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(att.attendee_id) as total_attendees FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees att ON ea.attendee_id = att.attendee_id GROUP BY e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date BETWEEN '2022-09-01' AND '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e INNER JOIN event_attendees ea ON e.event_id = ea.event_id INNER JOIN attendees a ON ea.attendee_id = a.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) as total_attendees FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_id HAVING total_attendees > 3;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name FROM attendees WHERE attendee_id NOT IN (SELECT attendee_id FROM event_attendees);",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(ea.attendee_id) as total_attendees FROM events e LEFT JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, SUBSTR(event_location, 1, 5) as location_prefix FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name as invited_attendees FROM attendees WHERE attendee_id IN (SELECT attendee_id FROM event_attendees WHERE event_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, EXTRACT(YEAR FROM event_date) as event_year FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees a ON ea.attendee_id = a.attendee_id WHERE a.attendee_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_date < CURRENT_DATE();",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT e.event_name, a.attendee_name FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id JOIN attendees a ON ea.attendee_id = a.attendee_id ORDER BY e.event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, COUNT(*) as total_attendees FROM events e JOIN event_attendees ea ON e.event_id = ea.event_id GROUP BY e.event_id ORDER BY total_attendees DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255)\n);\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events e WHERE event_id IN (SELECT event_id FROM event_attendees GROUP BY event_id HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_location='New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, attendee_email FROM attendees WHERE event_id=1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_type, ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_id, COUNT(attendee_id) AS total_attendees FROM event_attendees GROUP BY event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(ticket_price) AS total_revenue FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name, ticket_type FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS average_price FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, COUNT(event_id) AS total_events_attended FROM attendees JOIN event_attendees ON attendees.attendee_id = event_attendees.attendee_id GROUP BY attendee_name HAVING COUNT(event_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name, ticket_type FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id WHERE ticket_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id WHERE event_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(attendee_id) AS total_attendees FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id GROUP BY event_name HAVING COUNT(attendee_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, MAX(ticket_price) AS max_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, MAX(ticket_price) AS max_ticket_price FROM attendees JOIN event_attendees ON attendees.attendee_id = event_attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id GROUP BY attendee_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS average_price FROM events JOIN tickets ON events.event_id = tickets.event_id WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT event_id) AS total_events FROM event_attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, MIN(ticket_price) AS min_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT attendee_name, event_name FROM attendees JOIN event_attendees ON attendees.attendee_id = event_attendees.attendee_id JOIN events ON event_attendees.event_id = events.event_id WHERE event_location = 'San Francisco';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, MAX(ticket_price) AS max_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id WHERE event_location = 'Los Angeles';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(attendee_id) AS total_attendees FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id GROUP BY event_name ORDER BY total_attendees DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events JOIN tickets ON events.event_id = tickets.event_id WHERE ticket_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_tickets_sold FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, MAX(ticket_price) AS max_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location FROM events WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(DISTINCT attendee_id) AS unique_attendees FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(ticket_price) AS total_revenue FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id WHERE event_date > '2022-06-01' GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, attendee_name FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id WHERE event_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_type, ticket_price FROM events JOIN tickets ON events.event_id = tickets.event_id WHERE event_date < '2022-06-01' AND ticket_price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name, ticket_type, ticket_price FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id WHERE events.event_date > '2022-06-01' AND ticket_price > 40;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_location, attendee_name, ticket_type, ticket_price FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id WHERE events.event_date BETWEEN '2022-01-01' AND '2022-06-01' AND ticket_price < 30;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name AS name, event_date AS date, event_location AS location FROM events WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_type, SUM(ticket_price) AS total_revenue FROM events JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name, ticket_type HAVING total_revenue > 1000;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT event_name, attendee_name, SUM(ticket_price) AS total_spent FROM events JOIN event_attendees ON events.event_id = event_attendees.event_id JOIN attendees ON event_attendees.attendee_id = attendees.attendee_id JOIN tickets ON event_attendees.ticket_id = tickets.ticket_id GROUP BY event_name, attendee_name HAVING total_spent > 200;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT a.event_name, b.event_location, c.attendee_name, c.attendee_email FROM events a JOIN event_attendees b ON a.event_id = b.event_id JOIN attendees c ON b.attendee_id = c.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT a.event_name, a.event_location, b.attendee_name, c.ticket_type FROM events a JOIN event_attendees b ON a.event_id = b.event_id JOIN attendees c ON b.attendee_id = c.attendee_id JOIN tickets d ON b.ticket_id = d.ticket_id WHERE a.event_date > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n);\n\n\nCREATE TABLE attendees (\n    attendee_id INT PRIMARY KEY,\n    attendee_name VARCHAR(255),\n    attendee_email VARCHAR(255),\n    event_id INT\n);\n\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_type VARCHAR(255),\n    ticket_price DECIMAL(10, 2),\n    event_id INT\n);\n\n\nCREATE TABLE event_attendees (\n    event_id INT,\n    attendee_id INT,\n    ticket_id INT,\n    PRIMARY KEY (event_id, attendee_id),\n    FOREIGN KEY (event_id) REFERENCES events(event_id),\n    FOREIGN KEY (attendee_id) REFERENCES attendees(attendee_id),\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT a.event_name, b.ticket_type, c.attendee_name FROM events a JOIN tickets b ON a.event_id = b.event_id JOIN event_attendees c ON a.event_id = c.event_id JOIN attendees d ON c.attendee_id = d.attendee_id WHERE b.ticket_price < 50 AND a.event_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_time FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT attendee_name, attendee_email FROM attendees;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM event_tickets;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT ticket_type, ticket_price FROM event_tickets;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM event_sessions;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT session_title, session_date, session_time FROM event_sessions;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM event_feedback;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT rating, feedback_text FROM event_feedback;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, event_time, attendee_name, attending_event_id FROM events JOIN attendees ON event_id = attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, ticket_type, ticket_price FROM events JOIN event_tickets ON event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_name, session_title, session_date, session_time FROM events JOIN event_sessions ON event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, attendee_name, rating, feedback_text FROM events JOIN event_feedback ON events.event_id = event_feedback.event_id JOIN attendees ON attendees.attendee_id = event_feedback.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, a.attendee_name, a.attendee_email FROM events e JOIN attendees a ON e.event_id = a.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, et.ticket_type, et.ticket_price FROM events e JOIN event_tickets et ON e.event_id = et.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, es.session_title, es.session_date, es.session_time FROM events e JOIN event_sessions es ON e.event_id = es.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, a.attendee_name, ef.rating, ef.feedback_text FROM events e JOIN event_feedback ef ON e.event_id = ef.event_id JOIN attendees a ON a.attendee_id = ef.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, es.session_title, es.session_date, a.attendee_name, ef.rating, ef.feedback_text FROM events e JOIN event_sessions es ON e.event_id = es.event_id JOIN event_feedback ef ON e.event_id = ef.event_id JOIN attendees a ON a.attendee_id = ef.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, e.event_date, et.ticket_type, a.attendee_name, ef.rating, ef.feedback_text FROM events e JOIN event_tickets et ON e.event_id = et.event_id JOIN event_feedback ef ON e.event_id = ef.event_id JOIN attendees a ON a.attendee_id = ef.attendee_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events WHERE event_date >= '2022-01-01' ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_id, e.event_name, e.event_date, a.attendee_name FROM events e JOIN attendees a ON e.event_id = a.attending_event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, et.ticket_type, et.ticket_price FROM events e JOIN event_tickets et ON e.event_id = et.event_id WHERE et.ticket_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT es.session_title, es.session_date, es.session_time, e.event_name FROM event_sessions es JOIN events e ON es.event_id = e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, ef.rating, ef.feedback_text FROM events e JOIN event_feedback ef ON e.event_id = ef.event_id WHERE ef.rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT a.attendee_id, a.attendee_name, e.event_name FROM attendees a JOIN events e ON a.attending_event_id = e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(et.ticket_id) AS total_tickets_sold FROM events e LEFT JOIN event_tickets et ON e.event_id = et.event_id GROUP BY e.event_name ORDER BY total_tickets_sold DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT a.attendee_name, COUNT(ef.feedback_id) AS total_feedbacks FROM attendees a LEFT JOIN event_feedback ef ON a.attendee_id = ef.attendee_id GROUP BY a.attendee_name ORDER BY total_feedbacks DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, SUM(et.ticket_price) AS total_revenue FROM events e JOIN event_tickets et ON e.event_id = et.event_id GROUP BY e.event_name ORDER BY total_revenue DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT e.event_date FROM events e JOIN event_sessions es ON e.event_id = es.event_id;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, MAX(ef.rating) AS highest_rating FROM events e JOIN event_feedback ef ON e.event_id = ef.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, AVG(ef.rating) AS average_rating FROM events e JOIN event_feedback ef ON e.event_id = ef.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT a.attendee_name, AVG(ef.rating) AS average_rating FROM attendees a JOIN event_feedback ef ON a.attendee_id = ef.attendee_id GROUP BY a.attendee_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(a.attendee_id) AS total_attendees FROM events e JOIN attendees a ON e.event_id = a.attending_event_id GROUP BY e.event_name ORDER BY total_attendees DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(DISTINCT a.attendee_name) AS unique_attendees FROM events e JOIN attendees a ON e.event_id = a.attending_event_id GROUP BY e.event_name ORDER BY unique_attendees DESC;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, AVG(et.ticket_price) AS average_ticket_price FROM events e JOIN event_tickets et ON e.event_id = et.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, MIN(ef.rating) AS lowest_rating FROM events e JOIN event_feedback ef ON e.event_id = ef.event_id GROUP BY e.event_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT a.attendee_name, AVG(ef.rating) AS average_feedback_rating FROM attendees a JOIN event_feedback ef ON a.attendee_id = ef.attendee_id GROUP BY a.attendee_name;",
  "### TABLEDATA\n\nCREATE TABLE events (\n  event_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME NOT NULL\n);\n\nCREATE TABLE attendees (\n  attendee_id SERIAL PRIMARY KEY,\n  attendee_name VARCHAR(255) NOT NULL,\n  attendee_email VARCHAR(255) UNIQUE NOT NULL,\n  attending_event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  ticket_type VARCHAR(50) NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_sessions (\n  session_id SERIAL PRIMARY KEY,\n  session_title VARCHAR(255) NOT NULL,\n  session_date DATE NOT NULL,\n  session_time TIME NOT NULL,\n  event_id INT REFERENCES events(event_id)\n);\n\nCREATE TABLE event_feedback (\n  feedback_id SERIAL PRIMARY KEY,\n  event_id INT REFERENCES events(event_id),\n  attendee_id INT REFERENCES attendees(attendee_id),\n  rating INT NOT NULL,\n  feedback_text TEXT\n);\n\n### STATEMENT\n\nSELECT e.event_name, COUNT(*) AS total_sessions FROM events e JOIN event_sessions es ON e.event_id = es.event_id GROUP BY e.event_name ORDER BY total_sessions DESC;"
]