[
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name FROM orders WHERE order_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 100.00;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name FROM orders WHERE status = 'Shipped';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE status = 'Processing';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT MAX(total_amount) AS max_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS average_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, total_amount FROM orders WHERE status = 'Delivered';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT MIN(total_amount) AS min_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS order_count FROM orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT SUM(total_amount) AS total_order_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount <= 50.00;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, total_amount FROM orders WHERE status = 'Cancelled';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS average_amount_per_order FROM orders GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE status IN ('Processing', 'Shipped');",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM orders WHERE status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_name LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS average_amount FROM orders GROUP BY customer_name HAVING AVG(total_amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_amount, MAX(total_amount) AS max_amount FROM orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_name HAVING total_spent > 2000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, status, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_name, status;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MONTH(order_date), SUM(total_amount) AS monthly_spending FROM orders GROUP BY customer_name, MONTH(order_date);",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders ORDER BY order_date ASC, total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders ORDER BY order_date DESC, total_amount ASC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders ORDER BY total_amount DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders ORDER BY order_id DESC LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_amount FROM orders WHERE status = 'Pending' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders WHERE customer_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM orders WHERE EXTRACT(YEAR FROM order_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders WHERE TO_CHAR(order_date, 'MM-YYYY') = '01-2022';",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id FROM Order;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order WHERE order_date = '2023-01-05';",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Order WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Order;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM Order WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order_Item;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_item_id, order_id, product_id FROM Order_Item;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT SUM(price) FROM Order_Item;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, SUM(price) AS total_price FROM Order_Item GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM Order_Item WHERE order_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) FROM Order_Item;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, MIN(price) AS min_price, MAX(price) AS max_price FROM Order_Item GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, price FROM Order_Item WHERE quantity > 10 AND price < 50;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, price FROM Order_Item WHERE price BETWEEN 20 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT Order.order_id, Order.customer_id, Order_Item.product_id FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT Order.order_id, Order.total_amount, Order_Item.quantity, Order_Item.price FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id WHERE Order.total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT Order.order_id, SUM(Order_Item.price) AS total_amount FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id GROUP BY Order.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT Order.customer_id, COUNT(*) AS num_orders FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id GROUP BY Order.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM Order WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, SUM(price*quantity) AS total_price FROM Order_Item GROUP BY order_id HAVING total_price > 500;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS order_count FROM Order GROUP BY customer_id ORDER BY order_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order_Item OI JOIN Order O ON OI.order_id = O.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT O.order_id, O.order_date, OI.product_id FROM Order O JOIN Order_Item OI ON O.order_id = OI.order_id WHERE O.total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT O.customer_id, O.order_date, OI.product_id, OI.quantity, OI.price FROM Order O JOIN Order_Item OI ON O.order_id = OI.order_id WHERE OI.price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_amount FROM Order GROUP BY customer_id ORDER BY avg_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_amount FROM Order GROUP BY customer_id ORDER BY max_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_item_id, SUM(price*quantity) AS total_price FROM Order_Item GROUP BY order_item_id HAVING total_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM Order WHERE customer_id IN (SELECT customer_id FROM Order GROUP BY customer_id HAVING COUNT(*) > 2);",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(quantity) AS avg_quantity FROM Order_Item GROUP BY customer_id ORDER BY avg_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_amount FROM Order GROUP BY customer_id ORDER BY min_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(*) AS order_count FROM Order_Item GROUP BY product_id ORDER BY order_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM Order WHERE customer_id IN (SELECT customer_id FROM Order GROUP BY customer_id HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_amount FROM Order GROUP BY customer_id HAVING SUM(total_amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_id, MAX(price) AS max_price FROM Order_Item GROUP BY order_id ORDER BY max_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT O.order_id, O.order_date, OI.product_id, OI.price FROM Order O JOIN Order_Item OI ON O.order_id = OI.order_id WHERE O.order_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(price) AS min_price FROM Order_Item GROUP BY customer_id ORDER BY min_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE Order (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Order_Item (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT order_id) AS order_count FROM Order GROUP BY customer_id ORDER BY order_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT product_name, category, price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT order_id, customer_name, total_amount FROM Orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT order_item_id, order_id, product_id, quantity FROM Order_Items;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT o.order_id, o.customer_name, p.product_name, p.price, oi.quantity FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT order_id, sum(quantity) AS total_quantity FROM Order_Items GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT category, count(*) AS total_products FROM Products GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, sum(total_amount) AS total_spent FROM Orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, count(order_id) AS total_orders, sum(total_amount) AS total_spent FROM Orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, count(*) AS total_orders, sum(total_amount) AS total_spent FROM Orders GROUP BY customer_name HAVING total_spent > 5000;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, count(*) AS total_orders, sum(total_amount) AS total_spent FROM Orders GROUP BY customer_name HAVING total_orders > 2;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT category, avg(price) AS avg_price FROM Products GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Order_Items WHERE quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT o.order_id, o.customer_name, sum(p.price * oi.quantity) AS total_value FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT * FROM Orders LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM Orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT Orders.order_id, customer_name, product_name, category, price, quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_name ORDER BY total_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS order_count FROM Orders GROUP BY customer_name HAVING COUNT(order_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT category, AVG(price) AS avg_price FROM Products GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_sold FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_name ORDER BY total_sold DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, product_name FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM Orders WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_amount FROM Orders GROUP BY customer_name HAVING AVG(total_amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT product_name, COUNT(order_id) AS num_orders FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_name ORDER BY num_orders DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM Orders WHERE total_amount > (SELECT AVG(total_amount) FROM Orders);",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_amount FROM Orders GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_sold FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE price > 100 GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM Orders WHERE EXTRACT(MONTH FROM order_date) = 10;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_amount FROM Orders GROUP BY customer_name HAVING AVG(total_amount) BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM Orders WHERE DATE_PART('year', order_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, product_name, category, price, quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE quantity > 1;",
  "### TABLEDATA\n\nCREATE TABLE Orders (order_id INT PRIMARY KEY, customer_name VARCHAR(50), order_date DATE, total_amount DECIMAL(10, 2));\nCREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(10, 2));\nCREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT);\n\n### STATEMENT\n\nSELECT customer_name, total_amount, COUNT(product_id) AS num_products FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_name HAVING COUNT(product_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM Orders WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT item_id, product_id, quantity FROM OrderItems WHERE order_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM Customers WHERE phone_number LIKE '123%';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE in_stock = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products WHERE price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM Customers ORDER BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders WHERE total_amount BETWEEN 500.00 AND 1000.00;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM Customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT item_id, order_id, product_id, quantity FROM OrderItems WHERE quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_date >= '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, in_stock FROM Products WHERE in_stock = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE customer_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM Orders WHERE total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE in_stock = TRUE",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders WHERE customer_id = 100",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE total_amount > 500)",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, product_name, quantity FROM OrderItems JOIN Products ON OrderItems.product_id = Products.product_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Products.product_name, OrderItems.quantity FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) AS total_orders FROM Orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, AVG(price) AS avg_price FROM Products GROUP BY product_id HAVING AVG(price) > 50",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_sold FROM OrderItems JOIN Products ON OrderItems.product_id = Products.product_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT order_date, customer_name, total_amount FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE order_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY customer_name HAVING AVG(total_amount) > 500",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_amount) AS max_purchase_amount FROM Orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, MIN(price) AS min_price FROM Products GROUP BY product_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT order_id) AS unique_orders FROM Orders GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM Customers WHERE email LIKE '%gmail.com%'",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  total_amount DECIMAL\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  in_stock BOOLEAN\n);\n\nCREATE TABLE OrderItems (\n  item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE price BETWEEN 10 AND 50",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date, total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, description FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, address FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM OrderItems;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_item_id, order_id, product_id, quantity FROM OrderItems;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM Shipments;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT shipment_id, order_id, shipment_date, delivery_status FROM Shipments;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date, total_amount FROM Orders WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM Customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderItems WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT shipment_id, order_id, shipment_date FROM Shipments WHERE delivery_status = 'delivered';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_id, customer_name, order_date, total_amount FROM Orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM Customers ORDER BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderItems ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT shipment_id, order_id, shipment_date, delivery_status FROM Shipments ORDER BY shipment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT * FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Orders.total_amount FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, Orders.total_amount, Customers.email FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.total_amount, Customers.customer_name, Customers.address FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.total_amount, Customers.email FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name WHERE Orders.order_date >= '2022-01-01' AND Orders.order_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Products.product_name FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Products.product_name, OrderItems.quantity FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Products.product_name, OrderItems.quantity, Shipments.shipment_date FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id JOIN Shipments ON Orders.order_id = Shipments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, Products.product_name, OrderItems.quantity, Shipments.shipment_date, Shipments.delivery_status FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id JOIN Shipments ON Orders.order_id = Shipments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Customers.customer_name, SUM(Products.price * OrderItems.quantity) AS total_cost FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id GROUP BY Orders.order_id, Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, COUNT(Orders.order_id) AS total_orders FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, AVG(Orders.total_amount) AS avg_order_amount FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Products.product_name, COUNT(OrderItems.quantity) AS total_quantity_sold FROM Products JOIN OrderItems ON Products.product_id = OrderItems.product_id GROUP BY Products.product_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Orders.total_amount, Shipments.shipment_date, Shipments.delivery_status FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name LEFT JOIN Shipments ON Orders.order_id = Shipments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Orders.total_amount, Shipments.shipment_date, Shipments.delivery_status FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name RIGHT JOIN Shipments ON Orders.order_id = Shipments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Orders.total_amount, Shipments.shipment_date, Shipments.delivery_status FROM Orders JOIN Customers ON Orders.customer_name = Customers.customer_name FULL JOIN Shipments ON Orders.order_id = Shipments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, Orders.total_amount, Customers.email FROM Orders INNER JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, Orders.total_amount, Customers.email FROM Orders LEFT JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, Orders.total_amount, Customers.email FROM Orders RIGHT JOIN Customers ON Orders.customer_name = Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    customer_name STRING,\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name STRING,\n    price DECIMAL,\n    description STRING\n);\n\nCREATE TABLE Customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    address STRING\n);\n\nCREATE TABLE OrderItems (\n    order_item_id UUID PRIMARY KEY,\n    order_id UUID,\n    product_id UUID,\n    quantity INT\n);\n\nCREATE TABLE Shipments (\n    shipment_id UUID PRIMARY KEY,\n    order_id UUID,\n    shipment_date DATE,\n    delivery_status STRING\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, Orders.total_amount, Customers.email FROM Orders FULL JOIN Customers ON Orders.customer_name = Customers.customer_name;"
]