[
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_name = 'Sales';",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE erp_integration_status = true;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_name FROM department_integration WHERE erp_integration_status = false;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT MAX(department_id) FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT MIN(department_id) FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT AVG(department_id) FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT SUM(department_id) FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT DISTINCT department_name FROM department_integration;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration ORDER BY department_id;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration ORDER BY department_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_name LIKE 'Ma%';",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_name ILIKE 'sal%';",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE erp_integration_status = TRUE",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT * FROM department_integration WHERE department_name LIKE '%sales%'",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT COUNT(*) as department_count FROM department_integration",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT MAX(department_id) as max_department_id FROM department_integration",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration ORDER BY department_name ASC",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, COUNT(*) as department_count FROM department_integration GROUP BY department_id",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT AVG(department_id) as avg_department_id FROM department_integration",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id BETWEEN 100 AND 200",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_name LIKE '%engineering%' AND erp_integration_status = TRUE",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id NOT IN (4, 5, 6)",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_name IN ('HR', 'Finance')",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id > 10 AND department_name <> 'IT'",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE erp_integration_status IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE erp_integration_status = FALSE",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE erp_integration_status IS TRUE AND department_name NOT LIKE '%non%'",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id >= 5 LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_name LIKE 'A%' OR department_name LIKE 'B%'",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE department_id > 100 AND department_name <> 'Operations'",
  "### TABLEDATA\n\nCREATE TABLE department_integration (\n department_id INT PRIMARY KEY,\n department_name VARCHAR(255) NOT NULL,\n erp_integration_status BOOLEAN\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM department_integration WHERE erp_integration_status = TRUE AND department_name NOT IN ('HR', 'Marketing')",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, location FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, name, department FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT department_id, name, location FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, name, department, email FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT department_id, name, location FROM departments WHERE location='New York';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM employees WHERE department='HR';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM departments WHERE department_id=100;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, name, phone_number FROM employees WHERE department='IT';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees WHERE email='john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, name, email FROM employees WHERE phone_number='1234567890';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees WHERE name='Alice';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM departments WHERE department_id=200;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, department FROM employees WHERE name='Bob';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM employees WHERE department='Finance' AND name='Catherine';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM departments WHERE location='London' AND name='Sales';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, email, phone_number FROM employees WHERE department='Marketing';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, location FROM departments WHERE name='Engineering';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM employees WHERE department = 'Engineering';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, email FROM employees WHERE department = 'Sales' ORDER BY name ASC;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT * FROM employees WHERE department = 'Marketing' AND name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, phone_number FROM employees WHERE department IN ('Sales', 'Engineering');",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT employee_id, name, email FROM employees JOIN departments ON employees.department = departments.name;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, email, location FROM employees JOIN departments ON employees.department = departments.name WHERE departments.location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT COUNT(employee_id) AS total_employees FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department, COUNT(*) AS total_employees FROM employees GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT department, AVG(employee_id) AS avg_employee_id FROM employees GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT DISTINCT department FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees UNION SELECT name, department FROM employees ORDER BY department, name;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, COUNT(*) AS total FROM employees GROUP BY name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT MAX(employee_id) FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT department, location, COUNT(*) AS total_employees FROM employees JOIN departments ON employees.department = departments.name GROUP BY department, location;",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department, email FROM employees WHERE name LIKE 'A%' OR name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department, email FROM employees WHERE name NOT LIKE 'J%' AND department = 'Sales';",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, department FROM employees WHERE name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE employees (   employee_id INT PRIMARY KEY,   name STRING,   department STRING,   email STRING,   phone_number STRING );\n\nCREATE TABLE departments (   department_id INT PRIMARY KEY,   name STRING,   location STRING );\n\n### STATEMENT\n\nSELECT name, email FROM employees WHERE employee_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Department;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name FROM Department;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM Department;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, department_name FROM Employee JOIN Department ON Employee.department_id = Department.department_id;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Employee WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, employee_role FROM Employee WHERE department_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM CommunicationLog;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT log_id, log_date FROM CommunicationLog;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, log_date FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Department WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name FROM Department WHERE department_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Employee WHERE employee_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, department_name FROM Employee JOIN Department ON Employee.department_id = Department.department_id WHERE Employee.employee_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT log_id, communication_content FROM CommunicationLog WHERE employee_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, log_date FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id WHERE Employee.department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Department WHERE department_name = 'HR';",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name FROM Employee WHERE department_id = (SELECT department_id FROM Department WHERE department_name = 'IT');",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM CommunicationLog WHERE log_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, communication_content FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id WHERE log_date = '2022-02-14';",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Department ORDER BY department_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Department",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM Department",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT department_name FROM Department",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, department_head FROM Department WHERE department_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Employee",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_id, employee_name, department_id FROM Employee WHERE department_id = 3",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT * FROM CommunicationLog",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT log_id, employee_id, log_date FROM CommunicationLog WHERE employee_id = 5",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT Employee.employee_name, Department.department_name FROM Employee INNER JOIN Department ON Employee.department_id = Department.department_id",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT Employee.employee_name, CommunicationLog.log_date FROM Employee INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT Department.department_name, Employee.employee_name, CommunicationLog.log_date FROM Department INNER JOIN Employee ON Department.department_id = Employee.department_id INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT Employee.employee_name, COUNT(log_id) AS num_logs FROM Employee INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY Employee.employee_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT Department.department_name, AVG(communication_content) AS avg_content_length FROM Department INNER JOIN Employee ON Department.department_id = Employee.department_id INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT employee_name, department_name FROM Employee LEFT JOIN Department ON Employee.department_id = Department.department_id",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, COUNT(employee_id) AS num_employees FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, MAX(log_date) AS latest_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, MIN(log_date) AS earliest_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, SUM(log_date) AS total_logs_dates FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, AVG(log_date) AS avg_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE Department (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50) NOT NULL,\n  department_head VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE Employee (\n  employee_id INT PRIMARY KEY,\n  employee_name VARCHAR(50) NOT NULL,\n  department_id INT NOT NULL,\n  employee_role VARCHAR(50) NOT NULL,\n  FOREIGN KEY (department_id) REFERENCES Department(department_id)\n)\n\nCREATE TABLE CommunicationLog (\n  log_id INT PRIMARY KEY,\n  employee_id INT NOT NULL,\n  log_date DATE NOT NULL,\n  communication_content TEXT NOT NULL,\n  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n)\n\n### STATEMENT\n\nSELECT department_name, STDDEV(log_date) AS log_date_stddev FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, department_head FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, department_head FROM departments WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers CROSS JOIN orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY orders.total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_id = 1 AND orders.total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, SUM(orders.total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name ORDER BY total_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_price BETWEEN 50.00 AND 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, customer_name FROM products JOIN orders ON products.product_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, department_name FROM customers JOIN departments ON customers.customer_id = departments.department_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, COUNT(*) AS num_customers FROM departments JOIN customers ON departments.department_id = customers.customer_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, AVG(total_amount) AS avg_order_amount FROM departments JOIN customers ON departments.department_id = customers.customer_id JOIN orders ON customers.customer_id = orders.customer_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, MIN(product_price) AS min_product_price FROM departments JOIN products ON departments.department_id = products.product_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, CONCAT(customer_name, ' has ordered products with total amount of ', total_amount) AS order_summary FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, CASE WHEN total_amount > 1000 THEN 'High Value Order' ELSE 'Low Value Order' END AS order_type FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customet_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, department_name FROM products JOIN departments ON products.product_id = departments.department_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING max_order_total > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, AVG(total_amount) AS avg_order_amount FROM departments JOIN customers ON departments.department_id = customers.customer_id JOIN orders ON customers.customer_id = orders.customer_id GROUP BY department_name HAVING avg_order_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    department_head VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_spent < 1000;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT department_name FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, department_id FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, product_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT transaction_id, order_id, employee_id, transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM departments WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT product_name FROM products WHERE product_price < 50;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, department_id FROM employees WHERE department_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transactions WHERE transaction_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM departments ORDER BY department_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, department_id FROM employees ORDER BY employee_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, product_id, order_date FROM orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT transaction_id, order_id, employee_id FROM transactions ORDER BY transaction_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(product_price) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MAX(transaction_amount) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT SUM(transaction_amount) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM departments WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT transaction_amount FROM transactions WHERE employee_id = 101 AND order_id = 201;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, transaction_amount FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT department_name, COUNT(employee_id) FROM employees INNER JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT product_name, SUM(transaction_amount) FROM products INNER JOIN orders ON products.product_id = orders.product_id INNER JOIN transactions ON orders.order_id = transactions.order_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, SUM(transaction_amount) FROM employees LEFT JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY employee_name;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT DISTINCT department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(product_price) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MAX(transaction_amount) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MIN(product_price) FROM products WHERE product_id != 1;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY product_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, transaction_amount FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT department_name, AVG(transaction_amount) FROM departments INNER JOIN employees ON departments.department_id = employees.department_id INNER JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY department_name;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, SUM(transaction_amount) FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY employee_name HAVING SUM(transaction_amount) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT employee_name, product_name, order_date FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id INNER JOIN orders ON transactions.order_id = orders.order_id INNER JOIN products ON orders.product_id = products.product_id WHERE order_date >= '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT department_name, COUNT(employee_id) AS num_employees FROM employees INNER JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name HAVING num_employees > 3;",
  "### TABLEDATA\n\nCREATE TABLE departments (\n  department_id INT PRIMARY KEY,\n  department_name TEXT\n)\n\nCREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  employee_name TEXT,\n  department_id INT REFERENCES departments(department_id)\n)\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name TEXT,\n  product_price DECIMAL\n)\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT REFERENCES products(product_id),\n  order_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT REFERENCES orders(order_id),\n  employee_id INT REFERENCES employees(employee_id),\n  transaction_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM departments UNION SELECT * FROM employees;"
]