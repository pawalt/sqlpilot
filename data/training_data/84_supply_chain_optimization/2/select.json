[
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, city, country FROM Suppliers WHERE country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT contact_name, email, phone FROM Suppliers WHERE rating > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE city = 'New York' AND state = 'NY';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, email, website FROM Suppliers WHERE cost_factor < 1.0;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE city IN ('Los Angeles', 'San Francisco');",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, rating FROM Suppliers WHERE rating <= 3.0;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE country = 'Canada' OR country = 'Mexico';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE city LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, cost_factor FROM Suppliers WHERE cost_factor > 1.0;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE rating BETWEEN 3.0 AND 4.0;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, address, city, state, zip_code FROM Suppliers WHERE state = 'CA';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE website IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, phone FROM Suppliers WHERE phone LIKE '%555%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE country = 'Germany' AND cost_factor > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, rating, cost_factor FROM Suppliers WHERE rating >= 4.0 AND cost_factor < 1.5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, email, website FROM Suppliers WHERE website LIKE '%.com';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name = 'ABC Company';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, email, city, country FROM Suppliers WHERE city = 'London';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE country = 'France' AND city = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE country = 'USA' AND rating > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, phone, city, state FROM Suppliers WHERE rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers WHERE city = 'New York' ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, address, website FROM Suppliers WHERE state = 'California' AND cost_factor < 1.5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, rating FROM Suppliers WHERE phone LIKE '%555%' ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_name, email, phone, address FROM Suppliers WHERE zip_code = '10001' AND rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, city, state, country FROM Suppliers WHERE rating < 3 ORDER BY supplier_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, website FROM Suppliers WHERE rating < 3 OR cost_factor > 1.7;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, city, country FROM Suppliers WHERE rating BETWEEN 3.5 AND 4;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, email, phone FROM Suppliers WHERE country = 'Canada' AND rating <= 4.2;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, phone, city FROM Suppliers WHERE state = 'Texas' AND country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, address, city, state FROM Suppliers WHERE cost_factor > 2 OR rating < 3.8;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, phone, city, country FROM Suppliers WHERE city LIKE '%ville';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT MAX(rating) AS max_rating, MIN(cost_factor) AS min_cost_factor FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating, SUM(cost_factor) AS total_cost_factor FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_suppliers FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_name, email, phone, address FROM Suppliers WHERE rating IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, email, website FROM Suppliers WHERE city = 'Chicago' AND cost_factor BETWEEN 1.2 AND 1.8;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, address, city, state, country FROM Suppliers WHERE phone IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    contact_name VARCHAR(255),\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(50),\n    country VARCHAR(50),\n    zip_code VARCHAR(20),\n    website VARCHAR(255),\n    rating FLOAT,\n    cost_factor FLOAT\n)\n\n### STATEMENT\n\nSELECT supplier_name, email, website FROM Suppliers WHERE rating < 4 OR cost_factor > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT product_name, supplier_name FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(product_price) AS total_price FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT product_name, supplier_name, supplier_location FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location FROM suppliers WHERE supplier_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_products FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products ORDER BY product_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT supplier_id) AS total_suppliers FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT MAX(product_price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM suppliers WHERE supplier_contact IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM suppliers WHERE supplier_contact IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT AVG(product_price) AS avg_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location, COUNT(*) AS total_products FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_name, supplier_location;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location FROM suppliers WHERE supplier_location LIKE '%California%';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(product_id) AS total_products FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location FROM suppliers WHERE supplier_location='New York';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.product_price, s.supplier_name FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS product_count FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, AVG(product_price) AS avg_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MAX(product_price) AS max_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MIN(product_price) AS min_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(product_price) AS total_revenue FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE product_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_location='California';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_contact LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_location='New York' AND product_price < 50;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_location='California' AND (product_price BETWEEN 50 AND 100);",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_location='New York' OR supplier_location='California';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id ORDER BY product_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id ORDER BY supplier_name ASC, product_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_products FROM suppliers s LEFT JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name ORDER BY total_products DESC;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, AVG(product_price) AS avg_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name HAVING avg_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id OFFSET 5 LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(50) NOT NULL,\n  supplier_location VARCHAR(100),\n  supplier_contact VARCHAR(50)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(50) NOT NULL,\n  product_price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id WHERE supplier_location='New York' LIMIT 5 OFFSET 0;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT name, location FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT id, name, location FROM suppliers WHERE rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name FROM products p JOIN suppliers s ON p.supplier_id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name FROM products p JOIN suppliers s ON p.supplier_id = s.id WHERE p.price > 100;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT * FROM ratings;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT rating, comment FROM ratings WHERE rating < 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT r.rating, s.name FROM ratings r JOIN suppliers s ON r.supplier_id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT r.rating, r.comment, s.name FROM ratings r JOIN suppliers s ON r.supplier_id = s.id WHERE r.rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, s.name AS supplier_name FROM products p JOIN suppliers s ON p.supplier_id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, SUM(p.price) AS total_price FROM products p JOIN suppliers s ON p.supplier_id = s.id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, AVG(r.rating) AS avg_rating FROM suppliers s JOIN ratings r ON s.id = r.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(*) AS num_products FROM suppliers s JOIN products p ON p.supplier_id = s.id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MAX(p.price) AS max_price FROM suppliers s JOIN products p ON p.supplier_id = s.id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MIN(r.rating) AS min_rating FROM suppliers s JOIN ratings r ON s.id = r.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MAX(r.rating) AS max_rating FROM suppliers s JOIN ratings r ON s.id = r.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(r.comment) AS num_comments FROM suppliers s JOIN ratings r ON s.id = r.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(r.comment) AS num_comments FROM suppliers s LEFT JOIN ratings r ON s.id = r.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT name, location FROM suppliers WHERE rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, ratings.rating, ratings.comment FROM suppliers INNER JOIN ratings ON suppliers.id = ratings.supplier_id WHERE ratings.rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers LEFT JOIN products ON suppliers.id = products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers RIGHT JOIN products ON suppliers.id = products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers FULL JOIN products ON suppliers.id = products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, COUNT(*) AS product_count FROM suppliers LEFT JOIN products ON suppliers.id = products.supplier_id GROUP BY suppliers.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, MAX(products.price) AS highest_price FROM suppliers LEFT JOIN products ON suppliers.id = products.supplier_id GROUP BY suppliers.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, AVG(ratings.rating) AS avg_rating FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id INNER JOIN ratings ON suppliers.id = ratings.supplier_id GROUP BY suppliers.name, products.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, ratings.rating FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id INNER JOIN ratings ON suppliers.id = ratings.supplier_id WHERE ratings.rating = (SELECT MAX(rating) FROM ratings);",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id WHERE products.price > (SELECT AVG(price) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id WHERE products.name LIKE '%widget%';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, products.price FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id WHERE products.price >= 100 AND products.price <= 500;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, ratings.rating FROM suppliers INNER JOIN ratings ON suppliers.id = ratings.supplier_id GROUP BY suppliers.name HAVING AVG(ratings.rating) > 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, ratings.rating FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id INNER JOIN ratings ON suppliers.id = ratings.supplier_id WHERE products.price > 100 AND ratings.rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, ratings.comment FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id INNER JOIN ratings ON suppliers.id = ratings.supplier_id WHERE ratings.comment IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, products.name, ratings.comment FROM suppliers INNER JOIN products ON suppliers.id = products.supplier_id LEFT JOIN ratings ON suppliers.id = ratings.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM ratings;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  rating INT NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  supplier_id INT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\nCREATE TABLE ratings (\n  id INT PRIMARY KEY,\n  supplier_id INT,\n  rating INT NOT NULL,\n  comment TEXT,\n  FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n);\n\n### STATEMENT\n\nSELECT suppliers.name, COUNT(*) AS total_ratings FROM suppliers INNER JOIN ratings ON suppliers.id = ratings.supplier_id GROUP BY suppliers.name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT id, name, email FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT contact_person, phone_number FROM suppliers WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT order_date, total_price FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM reviews;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT product_id, review_text, rating FROM reviews WHERE rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, p.price FROM suppliers s INNER JOIN products p ON s.id = p.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT o.id AS order_id, o.order_date, p.product_name, o.quantity, o.total_price FROM orders o INNER JOIN products p ON o.product_id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, r.review_text, r.rating FROM products p LEFT JOIN reviews r ON p.id = r.product_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(p.id) AS total_products FROM suppliers s LEFT JOIN products p ON s.id = p.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, AVG(r.rating) AS average_rating FROM products p LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MAX(p.price) AS max_price FROM suppliers s INNER JOIN products p ON s.id = p.supplier_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders, SUM(quantity) AS total_quantity FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT order_date, SUM(total_price) AS total_revenue FROM orders GROUP BY order_date;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM reviews;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(*) AS total_reviews, AVG(r.rating) AS avg_rating FROM suppliers s INNER JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers UNION SELECT * FROM products UNION SELECT * FROM orders UNION SELECT * FROM reviews;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT id, name, email FROM suppliers WHERE contact_person IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name, p.product_name, p.price FROM suppliers s JOIN products p ON s.id = p.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, o.quantity FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, r.review_text, r.rating FROM products p LEFT JOIN reviews r ON p.id = r.product_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(p.id) AS product_count FROM suppliers s JOIN products p ON s.id = p.supplier_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, SUM(o.quantity) AS total_quantity, SUM(o.total_price) AS total_price FROM products p JOIN orders o ON p.id = o.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, AVG(p.price) AS avg_price FROM suppliers s JOIN products p ON s.id = p.supplier_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MAX(p.price) AS max_price FROM suppliers s JOIN products p ON s.id = p.supplier_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, MIN(p.price) AS min_price FROM suppliers s JOIN products p ON s.id = p.supplier_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, o.order_date, p.product_name, o.quantity FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, r.rating, r.review_text FROM suppliers s JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, COUNT(r.id) AS review_count, AVG(r.rating) AS avg_rating FROM products p LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, AVG(r.rating) AS avg_rating FROM suppliers s JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(o.id) AS order_count, SUM(o.quantity) AS total_quantity FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, SUM(o.total_price) AS total_price, AVG(r.rating) AS avg_rating FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(o.id) AS order_count, MAX(o.total_price) AS max_total_price FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(o.id) AS order_count, MIN(o.total_price) AS min_total_price FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN orders o ON p.id = o.product_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, MAX(r.rating) AS max_rating FROM suppliers s JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, MIN(r.rating) AS min_rating FROM suppliers s JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    contact_person VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    supplier_id INT REFERENCES suppliers(id),\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    product_id INT REFERENCES products(id),\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY,\n    product_id INT REFERENCES products(id),\n    review_text TEXT,\n    rating INT\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, p.product_name, COUNT(r.id) AS review_count, SUM(r.rating) AS total_rating FROM suppliers s JOIN products p ON s.id = p.supplier_id LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location FROM suppliers WHERE supplier_rating > 4.0;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price < 100.00;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM products WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT order_date, order_quantity FROM orders WHERE order_quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE product_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT warehouse_location FROM warehouses WHERE warehouse_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_type = 'IN';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, order_id, warehouse_id FROM transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location, supplier_rating, product_name, product_price, order_date, order_quantity, warehouse_location, transaction_type, transaction_date FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id JOIN transactions ON orders.order_id = transactions.order_id JOIN warehouses ON transactions.warehouse_id = warehouses.warehouse_id;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name AS supplier, supplier_location AS location FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT MAX(supplier_rating) AS highest_rating FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT COUNT(product_id) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT AVG(order_quantity) AS avg_quantity FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT SUM(product_price) AS total_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT MIN(transaction_date) AS first_transaction FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT warehouse_location FROM warehouses;",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM suppliers WHERE supplier_name LIKE '%Corp%';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT * FROM suppliers WHERE supplier_rating > 4",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, supplier_location FROM suppliers WHERE supplier_rating >= 4.5",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_id, COUNT(*) AS product_count FROM products GROUP BY supplier_id HAVING product_count > 2",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT products.product_name, suppliers.supplier_name FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT products.product_name, orders.order_date FROM products JOIN orders ON products.product_id = orders.product_id",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT orders.order_id, products.product_name, suppliers.supplier_name FROM orders JOIN products ON orders.product_id = products.product_id JOIN suppliers ON products.supplier_id = suppliers.supplier_id",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT suppliers.supplier_name, SUM(products.product_price * orders.order_quantity) AS total_revenue FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id GROUP BY suppliers.supplier_name",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT suppliers.supplier_name, AVG(supplier_rating) AS avg_rating FROM suppliers GROUP BY suppliers.supplier_name HAVING avg_rating > 4",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT products.product_name, transactions.transaction_type, transactions.transaction_date FROM products JOIN orders ON products.product_id = orders.product_id JOIN transactions ON orders.order_id = transactions.order_id",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT suppliers.supplier_name, SUM(products.product_price * orders.order_quantity) AS total_revenue, warehouse_location FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id JOIN transactions ON orders.order_id = transactions.order_id JOIN warehouses ON transactions.warehouse_id = warehouses.warehouse_id GROUP BY suppliers.supplier_name, warehouse_location",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_orders FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id GROUP BY supplier_name HAVING total_orders > 1",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS total_transactions FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id JOIN transactions ON orders.order_id = transactions.order_id GROUP BY supplier_name",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT MAX(product_price) AS max_price, MIN(product_price) AS min_price, AVG(product_price) AS avg_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(DISTINCT products.product_name) AS unique_products FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id GROUP BY supplier_name",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(DISTINCT warehouse_id) AS unique_warehouses FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id JOIN transactions ON orders.order_id = transactions.order_id GROUP BY supplier_name",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_location, AVG(product_price) AS avg_price FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id GROUP BY supplier_name, supplier_location",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, MAX(supplier_rating) AS max_rating, MIN(supplier_rating) AS min_rating FROM suppliers GROUP BY supplier_name",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, product_name, product_price FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id WHERE product_price > 50",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name, supplier_location FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id",
  "### TABLEDATA\n\nCREATE TABLE suppliers (\n\tsupplier_id INT PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_location VARCHAR(100) NOT NULL,\n\tsupplier_rating FLOAT NOT NULL\n)\n\nCREATE TABLE products (\n\tproduct_id INT PRIMARY KEY,\n\tproduct_name VARCHAR(50) NOT NULL,\n\tproduct_price DECIMAL(10,2) NOT NULL,\n\tsupplier_id INT,\n\tFOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)\n)\n\nCREATE TABLE orders (\n\torder_id INT PRIMARY KEY,\n\torder_date DATE NOT NULL,\n\tproduct_id INT,\n\torder_quantity INT NOT NULL,\n\tFOREIGN KEY (product_id) REFERENCES products(product_id)\n)\n\nCREATE TABLE warehouses (\n\twarehouse_id INT PRIMARY KEY,\n\twarehouse_location VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\twarehouse_id INT,\n\ttransaction_type VARCHAR(50) NOT NULL,\n\ttransaction_date TIMESTAMP,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id),\n\tFOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)\n)\n\n### STATEMENT\n\nSELECT supplier_name, SUM(order_quantity) AS total_quantity FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id JOIN orders ON products.product_id = orders.product_id GROUP BY supplier_name HAVING total_quantity > 50"
]