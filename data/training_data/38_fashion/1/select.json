[
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_id = 500;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE customer_id = 500;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date = '2021-10-15';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_id = 500 AND total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders ORDER BY order_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders ORDER BY order_date ASC, total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT SUM(total_amount) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MIN(total_amount) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MAX(total_amount) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders WHERE customer_id = 500 AND total_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM orders WHERE total_amount > 2000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT AVG(total_amount) FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT order_id, SUM(total_amount) AS total_order_amount FROM orders WHERE customer_id = 200 GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT MAX(total_amount) FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id HAVING order_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MIN(order_date) AS first_order_date FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_order_amount FROM orders GROUP BY customer_id HAVING avg_order_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_amount_spent FROM orders GROUP BY customer_id HAVING total_amount_spent > 5000;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, MONTH(order_date) AS order_month, SUM(total_amount) AS total_amount_monthly FROM orders WHERE customer_id = 300 GROUP BY order_month;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, DATE_TRUNC('month', order_date) AS order_month, SUM(total_amount) AS total_amount_monthly FROM orders GROUP BY customer_id, order_month;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, EXTRACT(year FROM order_date) AS order_year, SUM(total_amount) AS total_amount_yearly FROM orders GROUP BY customer_id, order_year;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, EXTRACT(day FROM order_date) AS order_day, AVG(total_amount) AS avg_amount_day FROM orders GROUP BY customer_id, order_day;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, EXTRACT(week FROM order_date) AS order_week, MAX(total_amount) AS max_amount_weekly FROM orders GROUP BY customer_id, order_week;",
  "### TABLEDATA\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL\n)\n\n### STATEMENT\n\nSELECT customer_id, EXTRACT(hour FROM order_date) AS order_hour, MIN(total_amount) AS min_amount_hourly FROM orders GROUP BY customer_id, order_hour;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_address FROM customers WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, order_total FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, orders.order_total FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_total, customer_address FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_total > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(order_total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(order_total) AS avg_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(order_total) AS min_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_total) AS max_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MONTH(order_date), SUM(order_total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name, MONTH(order_date);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, YEAR(order_date), SUM(order_total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name, YEAR(order_date);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, DATE_FORMAT(order_date,'%Y-%m-%d') AS formatted_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_name LIKE '%Smith%' AND order_total > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(order_total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_spent > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name ORDER BY order_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name AS name, customer_email AS email, LENGTH(customer_address) AS address_length FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(order_total) AS avg_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING avg_order_total > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_total) AS max_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(order_total) AS min_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_orders >= 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, YEAR(order_date) AS order_year FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers UNION SELECT customer_name, customer_email FROM orders JOIN customers ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name FROM customers WHERE EXISTS (SELECT * FROM orders WHERE orders.customer_id = customers.customer_id);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name FROM customers WHERE NOT EXISTS (SELECT * FROM orders WHERE orders.customer_id = customers.customer_id);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_total FROM customers UNION SELECT 'Total' AS customer_name, SUM(order_total) AS total_amount FROM orders JOIN customers ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE order_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    customer_email VARCHAR(255),\n    customer_address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    order_total DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, CASE WHEN order_total > 1000 THEN 'High Value' ELSE 'Standard' END AS order_category FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT detail_id, order_id, product_id FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_id, quantity, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_id, quantity, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id WHERE quantity > 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_id, quantity, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id WHERE price > 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_id, quantity, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_id, quantity, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) FROM customers GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(price) FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(quantity) FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(price) FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(price) FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT o.order_id, od.product_id, od.quantity, od.price FROM orders o JOIN order_details od ON o.order_id = od.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, od.product_id, od.quantity, od.price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.order_date, SUM(od.quantity * od.price) AS total_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name, o.order_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(od.quantity) AS avg_quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MIN(od.price) AS min_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MAX(od.price) AS max_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(od.quantity * od.price) AS avg_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT c.customer_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id WHERE od.quantity > 10 AND od.price > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(*) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(*) > 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(od.quantity) AS total_quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name HAVING SUM(od.quantity) > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(od.price) AS avg_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_name HAVING AVG(od.price) > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MIN(o.order_date) AS first_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(o.order_id) AS total_orders, MIN(o.order_date) AS first_order_date, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT c.customer_name, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id WHERE od.price > 100 GROUP BY c.customer_name HAVING COUNT(o.order_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE DATE(o.order_date) = '2023-01-15';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(*) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL GROUP BY c.customer_name HAVING COUNT(*) > 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(50) UNIQUE\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id UUID REFERENCES customers(customer_id),\n    order_date TIMESTAMP NOT NULL\n);\n\n\nCREATE TABLE order_details (\n    detail_id SERIAL PRIMARY KEY,\n    order_id INT REFERENCES orders(order_id),\n    product_id UUID NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(od.quantity) AS total_quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id WHERE od.product_id = '12345678-1234-1234-1234-123456789012';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customer_name FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, customer_id FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products WHERE price < 20;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, product_id FROM order_details WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products WHERE price BETWEEN 10 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT * FROM order_details WHERE product_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, order_details.quantity FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name, products.price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id INNER JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, SUM(order_details.quantity * products.price) AS total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id INNER JOIN products ON order_details.product_id = products.product_id GROUP BY customers.customer_name, orders.order_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, COUNT(orders.order_id) AS total_orders FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, COUNT(DISTINCT orders.order_date) AS total_order_dates FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, AVG(products.price) AS average_price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id INNER JOIN products ON order_details.product_id = products.product_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, MAX(products.price) AS max_price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id INNER JOIN products ON order_details.product_id = products.product_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, MIN(products.price) AS min_price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_details ON orders.order_id = order_details.order_id INNER JOIN products ON order_details.product_id = products.product_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM orders LEFT JOIN customers ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers LEFT JOIN order_details ON customers.customer_id = order_details.order_id LEFT JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers RIGHT JOIN order_details ON customers.customer_id = order_details.order_id RIGHT JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers FULL JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers FULL JOIN order_details ON customers.customer_id = order_details.order_id FULL JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_date IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers LEFT JOIN order_details ON customers.customer_id = order_details.order_id LEFT JOIN products ON order_details.product_id = products.product_id WHERE products.product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_name LIKE '%a';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers RIGHT JOIN order_details ON customers.customer_id = order_details.order_id RIGHT JOIN products ON order_details.product_id = products.product_id WHERE orders.order_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date FROM customers FULL JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY,\n   customer_name VARCHAR,\n   customer_email VARCHAR);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY,\n   customer_id INT,\n   order_date DATE);\n\nCREATE TABLE order_details (order_detail_id INT PRIMARY KEY,\n   order_id INT,\n   product_id INT,\n   quantity INT);\n\nCREATE TABLE products (product_id INT PRIMARY KEY,\n   product_name VARCHAR,\n   price DECIMAL);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers FULL JOIN order_details ON customers.customer_id = order_details.order_id FULL JOIN products ON order_details.product_id = products.product_id WHERE orders.order_date <= '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT order_id, order_date, customer_id FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, price, total FROM order_details;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM product_categories;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_id, category_name FROM product_categories;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_id, quantity FROM order_details WHERE order_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_name FROM product_categories WHERE category_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price BETWEEN 20.00 AND 30.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT SUM(total) FROM order_details WHERE order_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT orders.order_id, orders.order_date, customers.customer_name FROM orders JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT order_id, product_name, quantity, total FROM order_details JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_name, price, category_name FROM products JOIN product_categories ON products.product_id = product_categories.category_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date > '2022-01-01');",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, SUM(total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_sold FROM products JOIN order_details ON products.product_id = order_details.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, category_name, SUM(total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id JOIN products ON order_details.product_id = products.product_id JOIN product_categories ON products.product_id = product_categories.category_id GROUP BY customer_name, category_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, AVG(total) AS avg_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name HAVING avg_spent > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, AVG(total) AS avg_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name ORDER BY avg_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, COUNT(DISTINCT orders.order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_orders > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, COUNT(orders.order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_orders IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, product_name, quantity, price, total FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id JOIN products ON order_details.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customers.customer_id, customer_name, COUNT(orders.order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id, customer_name HAVING total_orders < 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_name, COUNT(product_id) AS total_products FROM product_categories JOIN products ON product_categories.category_id = products.product_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_name, AVG(price) AS avg_price FROM product_categories JOIN products ON product_categories.category_id = products.product_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_name, MAX(price) AS max_price FROM product_categories JOIN products ON product_categories.category_id = products.product_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, MAX(total) AS max_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, MIN(total) AS min_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), email VARCHAR(100));\n\nCREATE TABLE orders (order_id INT, order_date DATE, customer_id INT);\n\nCREATE TABLE order_details (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), total DECIMAL(10,2));\n\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), price DECIMAL(10,2));\n\nCREATE TABLE product_categories (category_id INT, category_name VARCHAR(50));\n\n### STATEMENT\n\nSELECT category_name, MIN(price) AS min_price FROM product_categories JOIN products ON product_categories.category_id = products.product_id GROUP BY category_name;"
]