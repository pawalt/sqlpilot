<t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>REVOKE SELECT ON cybersecurity_data FROM public</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>revoke select on cybersecurity_data from public</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>REVOKE INSERT ON cybersecurity_data FROM public</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>revoke insert on cybersecurity_data from public</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>REVOKE DELETE ON cybersecurity_data FROM public</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>revoke delete on cybersecurity_data from public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>REVOKE SELECT ON users FROM public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>revoke select on users from public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>REVOKE INSERT ON users FROM public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>revoke insert on users from public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>REVOKE UPDATE ON users FROM public</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>revoke update on users from public</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE SELECT ON users FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke select on users from user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE INSERT, UPDATE ON incidents FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke insert, update on incidents from user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>REVOKE ALL PRIVILEGES ON logs FROM user_role</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>revoke all privileges on logs from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE users FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table users from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE permissions FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table permissions from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE roles FROM public</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>revoke select, insert, update, delete on table roles from public</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT, UPDATE, DELETE ON users FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert, update, delete on users from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, UPDATE ON roles FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, update on roles from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>REVOKE SELECT, INSERT ON permissions FROM user_role</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>revoke select, insert on permissions from user_role</stat>