<t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>GRANT SELECT ON cybersecurity_data TO analyst;</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>grant select on cybersecurity_data to analyst;</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>GRANT INSERT, UPDATE, DELETE ON cybersecurity_data TO admin;</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>grant insert, update, delete on cybersecurity_data to admin;</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>GRANT ALL PRIVILEGES ON cybersecurity_data TO manager;</stat><divider><t>CREATE TABLE cybersecurity_data (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50))</t><stat>grant all privileges on cybersecurity_data to manager;</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON users TO role1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on users to role1</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON users TO role2</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on users to role2</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT INSERT, UPDATE ON users TO role3</stat><divider><t>CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant insert, update on users to role3</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT SELECT ON users TO reporting_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant select on users to reporting_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT INSERT, UPDATE, DELETE ON incidents TO admin_user;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant insert, update, delete on incidents to admin_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON logs TO user_manager;</stat><divider><t>CREATE TABLE logs ( log_id INT PRIMARY KEY, log_type VARCHAR(50) NOT NULL, timestamp TIMESTAMP NOT NULL, message TEXT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE incidents ( incident_id INT PRIMARY KEY, incident_type VARCHAR(50) NOT NULL, description TEXT, reported_by INT, FOREIGN KEY (reported_by) REFERENCES users(user_id) );

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, password VARCHAR(100) NOT NULL );</t><stat>grant select, insert, update, delete on logs to user_manager;</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on users to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON permissions TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on permissions to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON user_roles TO role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT REFERENCES users(user_id) ON DELETE CASCADE, role_id INT REFERENCES roles(role_id) ON DELETE CASCADE)

CREATE TABLE IF NOT EXISTS roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(20) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (permission_id SERIAL PRIMARY KEY, permission_name VARCHAR(50) NOT NULL, description TEXT NOT NULL)

CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, role VARCHAR(20) NOT NULL)</t><stat>grant select, insert, update, delete on user_roles to role_name</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON roles TO user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all privileges on roles to user_role2</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT ON permissions TO user_role3</stat><divider><t>CREATE TABLE IF NOT EXISTS role_permissions (role_id INT, permission_id INT, PRIMARY KEY (role_id, permission_id), FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id))

CREATE TABLE IF NOT EXISTS user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id), FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id))

CREATE TABLE IF NOT EXISTS permissions (id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS roles (id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select, insert on permissions to user_role3</stat>