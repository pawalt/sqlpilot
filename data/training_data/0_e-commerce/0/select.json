[
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price, description FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name FROM products WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, description FROM products WHERE id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY name DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, description FROM products WHERE description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE name = 'Sample Product';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products WHERE name <> 'Sample Product';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, AVG(price) AS avg_price FROM products GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(price) AS min_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, description FROM products WHERE price < 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE description LIKE '%best%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY name ASC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(price) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(price) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT SUM(price) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE id IN (1, 3, 5)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE id = (SELECT MAX(id) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > (SELECT AVG(price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products p1 JOIN products p2 ON p1.id = p2.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, c.category_name FROM products p INNER JOIN categories c ON p.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products p LEFT JOIN categories c ON p.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products p RIGHT JOIN categories c ON p.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM products p FULL JOIN categories c ON p.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT category_id, product_id FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id WHERE p.price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_id, p.name, c.category_name FROM products p LEFT JOIN categories c ON p.product_id = c.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT c.category_name, COUNT(*) AS num_products FROM categories c JOIN products p ON c.product_id = p.product_id GROUP BY c.category_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(p.price) AS avg_price FROM products p JOIN categories c ON p.product_id = c.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, MAX(p.price) AS max_price FROM products p JOIN categories c ON p.product_id = c.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT c.category_name, SUM(p.price) AS total_price FROM categories c JOIN products p ON c.product_id = p.product_id GROUP BY c.category_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id ORDER BY p.price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE product_id = 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE description LIKE '%apple%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p JOIN categories c ON p.product_id = c.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.category_name FROM products p LEFT JOIN categories c ON p.product_id = c.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_id IN (SELECT product_id FROM categories)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT name FROM products WHERE price = (SELECT MAX(price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(c.product_id) AS num_categories FROM products p LEFT JOIN categories c ON p.product_id = c.product_id GROUP BY p.name",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT category_name FROM categories",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(c.product_id) AS num_categories FROM products p LEFT JOIN categories c ON p.product_id = c.product_id GROUP BY p.name HAVING COUNT(c.product_id) > 1",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(price) AS avg_price FROM products p JOIN categories c ON p.product_id = c.product_id GROUP BY p.name ORDER BY avg_price DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT category_name, MAX(price) AS max_price FROM products p JOIN categories c ON p.product_id = c.product_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(product_id) AS num_products FROM categories GROUP BY category_name ORDER BY num_products DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT category_name, SUM(price) AS total_price FROM products p JOIN categories c ON p.product_id = c.product_id GROUP BY category_name ORDER BY total_price DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT name FROM products WHERE price > (SELECT AVG(price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, category_name FROM products p CROSS JOIN categories",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, (SELECT category_name FROM categories WHERE product_id = p.product_id) AS category_name FROM products p",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(100) NOT NULL,\n  product_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, name, CASE WHEN price > 100 THEN 'Expensive' ELSE 'Affordable' END AS price_category FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products WHERE price > 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT name, description FROM products WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT id, name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM categories WHERE name = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id WHERE c.name = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id WHERE c.name = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(pc.category_id) AS category_count FROM products p LEFT JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(p.price) AS avg_price FROM products p GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(pc.product_id) AS product_count FROM categories c LEFT JOIN product_categories pc ON c.id = pc.category_id GROUP BY c.name HAVING COUNT(pc.product_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, MAX(p.price) AS max_price FROM products p;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.* FROM products p WHERE price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id ORDER BY p.name ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id ORDER BY c.name DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name, c.name FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id LIMIT 5 OFFSET 2;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT name, description FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT id, name, price, description FROM products WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category_name FROM products p INNER JOIN product_categories pc ON p.id = pc.product_id INNER JOIN categories c ON pc.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, SUM(price) AS total_price FROM products p INNER JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category_name, AVG(price) AS average_price FROM products p INNER JOIN product_categories pc ON p.id = pc.product_id INNER JOIN categories c ON pc.category_id = c.id GROUP BY p.name, c.name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE 'Ap%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE description IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.id, p.name AS product_name, COUNT(pc.category_id) AS num_categories FROM products p LEFT JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price, MIN(price) AS min_price, MAX(price) AS max_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT name, COUNT(*) AS num_products FROM products GROUP BY name HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category_name FROM products p INNER JOIN product_categories pc ON p.id = pc.product_id INNER JOIN categories c ON pc.category_id = c.id WHERE c.name = 'Electronics'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category_name FROM products p INNER JOIN product_categories pc ON p.id = pc.product_id INNER JOIN categories c ON pc.category_id = c.id WHERE p.price > 100 AND c.name = 'Electronics'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products p1, products p2 WHERE p1.price > p2.price",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM products p1 JOIN products p2 ON p1.price > p2.price",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id INT PRIMARY KEY,\n    name VARCHAR\n);\n\nCREATE TABLE product_categories (\n    product_id INT,\n    category_id INT\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, c.name AS category_name FROM products p LEFT JOIN product_categories pc ON p.id = pc.product_id LEFT JOIN categories c ON pc.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM product_categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name AS ProductName, c.name AS CategoryName FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT s.name AS SupplierName, s.location AS SupplierLocation, p.name AS ProductName FROM suppliers s JOIN products p ON s.id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT s.name AS SupplierName, s.location AS SupplierLocation, COUNT(p.id) AS NumProducts FROM suppliers s LEFT JOIN products p ON s.id = p.id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS AvgPrice FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS MaxPrice, MIN(price) AS MinPrice FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT DISTINCT price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT name AS CategoryName, COUNT(pc.product_id) AS NumProducts FROM product_categories pc JOIN categories c ON pc.category_id = c.id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, c.name AS category FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name AS supplier, s.location FROM products p JOIN suppliers s ON p.id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, pc.category_id FROM products p LEFT JOIN product_categories pc ON p.id = pc.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, c.name AS category, s.name AS supplier FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id JOIN suppliers s ON p.id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT COUNT(*), AVG(price) FROM products WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.name AS category FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id WHERE c.name = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name AS supplier FROM products p JOIN suppliers s ON p.id = s.id WHERE s.location = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, c.name AS category FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id WHERE p.price > 200;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price FROM products p WHERE EXISTS (SELECT * FROM product_categories pc WHERE p.id = pc.product_id);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name AS supplier FROM products p JOIN suppliers s ON p.id = s.id WHERE s.name LIKE '%Co%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, c.name AS category FROM products p JOIN product_categories pc ON p.id = pc.product_id JOIN categories c ON pc.category_id = c.id GROUP BY p.name, c.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(category_id) AS category_count FROM products p LEFT JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, SUM(price) AS total_price FROM products p GROUP BY p.name HAVING total_price > 500;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, MAX(price) AS max_price FROM products p JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, MIN(price) AS min_price FROM products p JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(price) AS avg_price FROM products p JOIN product_categories pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price FROM products p WHERE price = (SELECT MAX(price) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE product_categories (\n    product_id INT REFERENCES products(id),\n    category_id INT REFERENCES categories(id),\n    PRIMARY KEY (product_id, category_id)\n);\n\nCREATE TABLE suppliers (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price FROM products p WHERE price > (SELECT AVG(price) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT * FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT id, name, price FROM Product WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT * FROM Category;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT name FROM Category WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, c.name AS category_name FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id JOIN Category c ON pc.category_id = c.id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, COUNT(i.product_id) AS inventory_count FROM Supplier s LEFT JOIN Inventory i ON s.id = i.product_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, COUNT(pc.category_id) AS category_count FROM Product p LEFT JOIN ProductCategory pc ON p.id = pc.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT name, COUNT(*) AS total_products FROM Category c JOIN ProductCategory pc ON c.id = pc.category_id GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT s.name AS supplier_name, SUM(i.quantity) AS total_quantity FROM Supplier s JOIN Inventory i ON s.id = i.product_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, AVG(i.quantity) AS avg_quantity FROM Product p JOIN Inventory i ON p.id = i.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, MAX(i.quantity) AS max_quantity FROM Product p JOIN Inventory i ON p.id = i.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT category_id FROM ProductCategory;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT p.id, p.name FROM Product p JOIN Inventory i ON p.id = i.product_id WHERE i.quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.quantity FROM Product p JOIN Inventory i ON p.id = i.product_id WHERE i.quantity < 5;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, c.name AS category_name FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id JOIN Category c ON pc.category_id = c.id WHERE c.name = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.quantity FROM Product p JOIN Inventory i ON p.id = i.product_id WHERE p.price >= 100;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, i.quantity FROM Product p JOIN Inventory i ON p.id = i.product_id WHERE i.quantity <= 10;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, c.name AS category_name, s.name AS supplier_name FROM Product p LEFT JOIN ProductCategory pc ON p.id = pc.product_id LEFT JOIN Category c ON pc.category_id = c.id LEFT JOIN Supplier s ON p.id = s.id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, i.quantity, c.name AS category_name FROM Product p JOIN Inventory i ON p.id = i.product_id JOIN ProductCategory pc ON p.id = pc.product_id JOIN Category c ON pc.category_id = c.id WHERE i.quantity > 0 AND c.name = 'Clothing'",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, p.price, pc.category_id FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.name AS category FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id JOIN Category c ON pc.category_id = c.id",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, s.name AS supplier, i.quantity FROM Product p JOIN Inventory i ON p.id = i.product_id JOIN Supplier s ON p.id = s.id",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.* FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id WHERE pc.category_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, c.name AS category, s.name AS supplier FROM Product p JOIN ProductCategory pc ON p.id = pc.product_id JOIN Category c ON pc.category_id = c.id JOIN Supplier s ON p.id = s.id",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Category (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ProductCategory (\n    product_id INT,\n    category_id INT,\n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id),\n    FOREIGN KEY (category_id) REFERENCES Category(id)\n);\n\nCREATE TABLE Supplier (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    product_id INT,\n    quantity INT NOT NULL,\n    PRIMARY KEY (product_id),\n    FOREIGN KEY (product_id) REFERENCES Product(id)\n);\n\n### STATEMENT\n\nSELECT p.id, p.name, p.price, i.quantity FROM Product p LEFT JOIN Inventory i ON p.id = i.product_id"
]