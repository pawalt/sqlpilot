[
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('1', 'user1', 'Credit Card', 100.50, '2022-01-01 12:00:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('2', 'user2', 'PayPal', 75.25, '2022-01-02 15:30:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('3', 'user3', 'Debit Card', 50.00, '2022-01-03 10:45:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('4', 'user4', 'Cash', 25.75, '2022-01-04 18:20:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('5', 'user5', 'Google Pay', 150.00, '2022-01-05 09:00:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('6', 'user6', 'Apple Pay', 90.50, '2022-01-06 14:10:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('7', 'user7', 'Credit Card', 120.75, '2022-01-07 20:30:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('8', 'user8', 'PayPal', 45.30, '2022-01-08 11:15:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('9', 'user9', 'Debit Card', 80.00, '2022-01-09 17:45:00')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payment_informatio...",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('1a2b3c4d', '123e4567-e89b-12d3-a456-426614174000', 'Credit Card', 100.00, '2022-01-01 12:00:00') ON CONFLICT (transaction_id) DO UPDATE SET user_id = '123e4567-e89b-12d3-a456-426614174001', payment_method = 'Debit Card', amount = 150.00, timestamp = '2022-01-01 12:30:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('a1b2c3d4', '123e4567-e89b-12d3-a456-426614174001', 'PayPal', 50.00, '2022-01-02 08:00:00') ON CONFLICT (transaction_id) DO UPDATE SET user_id = '123e4567-e89b-12d3-a456-426614174002', payment_method = 'Venmo', amount = 75.00, timestamp = '2022-01-02 08:30:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('1b2c3d4a', '123e4567-e89b-12d3-a456-426614174002', 'Bitcoin', 200.00, '2022-01-03 15:00:00') ON CONFLICT (transaction_id) DO UPDATE SET user_id = '123e4567-e89b-12d3-a456-426614174003', payment_method = 'Ethereum', amount = 250.00, timestamp = '2022-01-03 15:30:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (transaction_id, user_id, payment_method, amount, timestamp) VALUES ('2c3d4a1b', '123e4567-e89b-12d3-a456-426614174003', 'Apple Pay', 75.00, '2022-01-04 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET user_id = '123e4567-e89b-12d3-a456-426614174004', payment_method = 'Google Pay', amount = 100.00, timestamp = '2022-01-04 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (transaction_id, user_id, payment_method...",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(1, 1001, 50.00, '2022-09-01')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(2, 1002, 75.00, '2022-09-02')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(3, 1003, 100.00, '2022-09-03')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(4, 1004, 125.00, '2022-09-04')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(5, 1005, 150.00, '2022-09-05')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(6, 1006, 175.00, '2022-09-06')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(7, 1007, 200.00, '2022-09-07')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(8, 1008, 225.00, '2022-09-08')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(9, 1009, 250.00, '2022-09-09')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(10, 1010, 275.00, '2022-09-10')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(11, 1011, 300.00, '2022-09-11')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(12, 1012, 325.00, '2022-09-12')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(13, 1013, 350.00, '2022-09-13')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(14, 1014, 375.00, '2022-09-14')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(15, 1015, 400.00, '2022-09-15')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(16, 1016, 425.00, '2022-09-16')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(17, 1017, 450.00, '2022-09-17')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(18, 1018, 475.00, '2022-09-18')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(19, 1019, 500.00, '2022-09-19')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(20, 1020, 525.00, '2022-09-20')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(1, 101, 50.00, '2022-01-01')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(2, 102, 75.00, '2022-01-02')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(3, 103, 100.00, '2022-01-03')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(4, 104, 125.00, '2022-01-04')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(5, 105, 150.00, '2022-01-05')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(6, 106, 175.00, '2022-01-06')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(7, 107, 200.00, '2022-01-07')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(8, 108, 225.00, '2022-01-08')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(9, 109, 250.00, '2022-01-09')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(10, 110, 275.00, '2022-01-10')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(11, 111, 300.00, '2022-01-11')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(12, 112, 325.00, '2022-01-12')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(13, 113, 350.00, '2022-01-13')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(14, 114, 375.00, '2022-01-14')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(15, 115, 400.00, '2022-01-15')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(16, 116, 425.00, '2022-01-16')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(17, 117, 450.00, '2022-01-17')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(18, 118, 475.00, '2022-01-18')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(19, 119, 500.00, '2022-01-19')",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO payments(payment_id, user_id, payment_amount, payment_date) VALUES(20, 120, 525.00, '2022-01-20')",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (1, '1234567812345678', 'John Doe', '2023-12-31', '123') ON CONFLICT (id) DO UPDATE SET card_number='1234567812345678', card_holder_name='John Doe', expiration_date='2023-12-31', cvv='123';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (2, '8765432187654321', 'Jane Smith', '2024-06-30', '456') ON CONFLICT (id) DO UPDATE SET card_number='8765432187654321', card_holder_name='Jane Smith', expiration_date='2024-06-30', cvv='456';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (3, '1111222233334444', 'Alice Johnson', '2025-03-15', '789') ON CONFLICT (id) DO UPDATE SET card_number='1111222233334444', card_holder_name='Alice Johnson', expiration_date='2025-03-15', cvv='789';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (4, '5555666677778888', 'Bob Brown', '2022-09-20', '321') ON CONFLICT (id) DO UPDATE SET card_number='5555666677778888', card_holder_name='Bob Brown', expiration_date='2022-09-20', cvv='321';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (5, '9999000011112222', 'Eve White', '2023-11-10', '654') ON CONFLICT (id) DO UPDATE SET card_number='9999000011112222', card_holder_name='Eve White', expiration_date='2023-11-10', cvv='654';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (6, '7777888899990000', 'Mike Green', '2024-05-05', '987') ON CONFLICT (id) DO UPDATE SET card_number='7777888899990000', card_holder_name='Mike Green', expiration_date='2024-05-05', cvv='987';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (7, '4444333322221111', 'Sarah Black', '2026-02-28', '234') ON CONFLICT (id) DO UPDATE SET card_number='4444333322221111', card_holder_name='Sarah Black', expiration_date='2026-02-28', cvv='234';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (8, '6666555544443333', 'Tom Grey', '2023-04-15', '567') ON CONFLICT (id) DO UPDATE SET card_number='6666555544443333', card_holder_name='Tom Grey', expiration_date='2023-04-15', cvv='567';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (9, '9876543298765432', 'Mary Blue', '2022-08-30', '890') ON CONFLICT (id) DO UPDATE SET card_number='9876543298765432', card_holder_name='Mary Blue', expiration_date='2022-08-30', cvv='890';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (10, '1357924681357924', 'Peter Brown', '2025-01-25', '213') ON CONFLICT (id) DO UPDATE SET card_number='1357924681357924', card_holder_name='Peter Brown', expiration_date='2025-01-25', cvv='213';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (11, '2468135792468135', 'Laura White', '2024-07-12', '546') ON CONFLICT (id) DO UPDATE SET card_number='2468135792468135', card_holder_name='Laura White', expiration_date='2024-07-12', cvv='546';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (12, '9876545612349876', 'Chris Smith', '2023-11-05', '879') ON CONFLICT (id) DO UPDATE SET card_number='9876545612349876', card_holder_name='Chris Smith', expiration_date='2023-11-05', cvv='879';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (13, '1111999922223333', 'Anna Grey', '2022-06-20', '321') ON CONFLICT (id) DO UPDATE SET card_number='1111999922223333', card_holder_name='Anna Grey', expiration_date='2022-06-20', cvv='321';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (14, '5555444433332222', 'David Black', '2027-10-15', '654') ON CONFLICT (id) DO UPDATE SET card_number='5555444433332222', card_holder_name='David Black', expiration_date='2027-10-15', cvv='654';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (15, '7777666655554444', 'Sophie Brown', '2022-12-28', '987') ON CONFLICT (id) DO UPDATE SET card_number='7777666655554444', card_holder_name='Sophie Brown', expiration_date='2022-12-28', cvv='987';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (16, '8888999911112222', 'Kevin Green', '2026-08-05', '234') ON CONFLICT (id) DO UPDATE SET card_number='8888999911112222', card_holder_name='Kevin Green', expiration_date='2026-08-05', cvv='234';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (17, '9876987698769876', 'Emily White', '2022-07-30', '567') ON CONFLICT (id) DO UPDATE SET card_number='9876987698769876', card_holder_name='Emily White', expiration_date='2022-07-30', cvv='567';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (18, '1234123412341234', 'Michael Smith', '2024-02-10', '890') ON CONFLICT (id) DO UPDATE SET card_number='1234123412341234', card_holder_name='Michael Smith', expiration_date='2024-02-10', cvv='890';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (19, '5678567856785678', 'Jessica Black', '2023-10-18', '213') ON CONFLICT (id) DO UPDATE SET card_number='5678567856785678', card_holder_name='Jessica Black', expiration_date='2023-10-18', cvv='213';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (20, '9898989898989898', 'Daniel Green', '2025-05-15', '546') ON CONFLICT (id) DO UPDATE SET card_number='9898989898989898', card_holder_name='Daniel Green', expiration_date='2025-05-15', cvv='546';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (1, '1234567890123456', 'John Doe', '2023-12-31', '123') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (2, '9876543210987654', 'Jane Smith', '2024-11-30', '456') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (3, '1111222233334444', 'Alice Johnson', '2022-10-15', '789') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (101, 1, 50.25, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (102, 2, 75.99, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (103, 3, 100.50, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (1, 'john.doe', 'password123', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (2, 'jane.smith', 'secure@123', 'jane.smith@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (3, 'alice.johnson', 'pass123word', 'alice.johnson@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (4, '4444555566667777', 'Bob Brown', '2025-09-28', '246') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (5, '9999888877776666', 'Sarah Lee', '2026-08-13', '135') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO payment_information (id, card_number, card_holder_name, expiration_date, cvv) VALUES (6, '7777666655554444', 'David White', '2022-07-24', '789') ON CONFLICT (id) DO UPDATE SET card_number = EXCLUDED.card_number, card_holder_name = EXCLUDED.card_holder_name, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (104, 4, 89.75, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (105, 5, 123.45, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (transaction_id, payment_id, amount, transaction_date) VALUES (106, 6, 56.30, CURRENT_TIMESTAMP) ON CONFLICT (transaction_id) DO UPDATE SET payment_id = EXCLUDED.payment_id, amount = EXCLUDED.amount, transaction_date = EXCLUDED.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (4, 'bob.brown', 'secure123', 'bob.brown@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (5, 'sarah.lee', 'pass@123word', 'sarah.lee@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_account (user_id, username, password, email) VALUES (6, 'david.white', 'password@123', 'david.white@example.com') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password, email = EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('1111', '2222', '1234567890123456', '2023-06-30', 123) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('3333', '1111', '2023-06-30 14:30:00', 100.50, 'Purchase') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('2222', 'john_doe', 'john.doe@example.com', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('4444', '2222', '2023-06-30 15:00:00', 'Login') ON CONFLICT (log_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('5555', '3333', '2345678901234567', '2023-07-31', 456) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('6666', '5555', '2023-07-31 10:45:00', 200.75, 'Payment') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('3333', 'jane_smith', 'jane.smith@example.com', 'pass123word') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('7777', '3333', '2023-07-31 11:30:00', 'Logout') ON CONFLICT (log_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('8888', '4444', '3456789012345678', '2023-08-31', 789) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('9999', '8888', '2023-08-31 09:15:00', 150.25, 'Withdrawal') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('4444', 'alice_wonder', 'alice.wonder@example.com', 'pa$$w0rD') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('1010', '4444', '2023-08-31 10:00:00', 'Update Profile') ON CONFLICT (log_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('1112', '5555', '4567890123456789', '2023-09-30', 234) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('1212', '1112', '2023-09-30 16:20:00', 300.99, 'Payment') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('5555', 'mark_jones', 'mark.jones@example.com', 'password456') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('1313', '5555', '2023-09-30 17:00:00', 'Logout') ON CONFLICT (log_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('1414', '6666', '5678901234567890', '2023-10-31', 567) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('1515', '1414', '2023-10-31 11:40:00', 400.50, 'Purchase') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('6666', 'susan_miller', 'susan.miller@example.com', 'pass456word') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('1616', '6666', '2023-10-31 12:30:00', 'Login') ON CONFLICT (log_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('1717', '7777', '6789012345678901', '2023-11-30', 678) ON CONFLICT (account_id) DO UPDATE SET account_number = EXCLUDED.account_number, expiration_date = EXCLUDED.expiration_date, cvv = EXCLUDED.cvv;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('1', '1', '1234567890123456', '2022-12-31', 123) ON CONFLICT (account_id) DO UPDATE SET account_number = '1234567890123456'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('1', '1', '2022-01-01 08:00:00', 100.00, 'Transaction 1') ON CONFLICT (transaction_id) DO UPDATE SET amount = 100.00",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('1', 'JohnDoe', 'johndoe@example.com', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'JohnDoe'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('1', '1', '2022-01-01 12:00:00', 'Payment Received') ON CONFLICT (log_id) DO UPDATE SET action = 'Payment Received'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('2', '2', '9876543210987654', '2023-12-31', 456) ON CONFLICT (account_id) DO UPDATE SET account_number = '9876543210987654'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('2', '2', '2022-02-01 09:00:00', 200.00, 'Transaction 2') ON CONFLICT (transaction_id) DO UPDATE SET amount = 200.00",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('2', 'JaneSmith', 'janesmith@example.com', 'password456') ON CONFLICT (user_id) DO UPDATE SET username = 'JaneSmith'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('2', '2', '2022-02-01 13:00:00', 'Payment Sent') ON CONFLICT (log_id) DO UPDATE SET action = 'Payment Sent'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('3', '3', '1111222233334444', '2024-12-31', 789) ON CONFLICT (account_id) DO UPDATE SET account_number = '1111222233334444'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('3', '3', '2022-03-01 10:00:00', 300.00, 'Transaction 3') ON CONFLICT (transaction_id) DO UPDATE SET amount = 300.00",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('3', 'RobertBrown', 'robertbrown@example.com', 'password789') ON CONFLICT (user_id) DO UPDATE SET username = 'RobertBrown'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('3', '3', '2022-03-01 14:00:00', 'Payment Declined') ON CONFLICT (log_id) DO UPDATE SET action = 'Payment Declined'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentAccounts (account_id, user_id, account_number, expiration_date, cvv) VALUES ('4', '1', '4444555566667777', '2025-12-31', 246) ON CONFLICT (account_id) DO UPDATE SET account_number = '4444555566667777'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Transactions (transaction_id, account_id, transaction_date, amount, description) VALUES ('4', '1', '2022-04-01 11:00:00', 400.00, 'Transaction 4') ON CONFLICT (transaction_id) DO UPDATE SET amount = 400.00",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, email, password) VALUES ('4', 'SarahJones', 'sarahjones@example.com', 'password246') ON CONFLICT (user_id) DO UPDATE SET username = 'SarahJones'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO PaymentLogs (log_id, user_id, log_date, action) VALUES ('4', '1', '2022-04-01 15:00:00', 'Payment Successful') ON CONFLICT (log_id) DO UPDATE SET action = 'Payment Successful'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john.doe@example.com', 'hashed_password') ON DUPLICATE KEY UPDATE username = 'john_doe_updated', email = 'john.doe@example.com_updated', password_hash = 'hashed_password_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (2, 'jane_doe', 'jane.doe@example.com', 'hashed_password') ON DUPLICATE KEY UPDATE username = 'jane_doe_updated', email = 'jane.doe@example.com_updated', password_hash = 'hashed_password_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (1, 1, 100.00, '2022-01-01') ON DUPLICATE KEY UPDATE amount = 100.00",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (2, 2, 50.00, '2022-02-01') ON DUPLICATE KEY UPDATE amount = 50.00",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (1, 1, 'credit', '1234567890123456', '2023-01-01', '123') ON DUPLICATE KEY UPDATE payment_type = 'credit', card_number = '1234567890123456_updated', expiration_date = '2023-01-01', cvv = '123_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (2, 2, 'debit', '9876543210987654', '2024-01-01', '987') ON DUPLICATE KEY UPDATE payment_type = 'debit', card_number = '9876543210987654_updated', expiration_date = '2024-01-01', cvv = '987_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (1, 1, '123 Main St', 'Cityville', '12345', 'USA') ON DUPLICATE KEY UPDATE street = '123 Main St_updated', city = 'Cityville_updated', zip_code = '12345_updated', country = 'USA_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (2, 2, '456 Elm St', 'Townsville', '54321', 'Canada') ON DUPLICATE KEY UPDATE street = '456 Elm St_updated', city = 'Townsville_updated', zip_code = '54321_updated', country = 'Canada_updated'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (1, 1, 'purchase', '2022-01-01 12:00:00') ON DUPLICATE KEY UPDATE action = 'purchase_updated', timestamp = '2022-01-01 12:00:00'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nINSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (2, 2, 'refund', '2022-02-01 12:00:00') ON DUPLICATE KEY UPDATE action = 'refund_updated', timestamp = '2022-02-01 12:00:00'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john.doe@example.com', 'hashedpass123') ON DUPLICATE KEY UPDATE username = 'john_doe_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (1, 1, '123 Main St', 'New York', '10001', 'USA') ON DUPLICATE KEY UPDATE street = '123 Main St, Apt 101';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (1, 1, 'Credit Card', '1234567890123456', '2023-12-31', '123') ON DUPLICATE KEY UPDATE payment_type = 'Debit Card';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (1, 1, 100.50, '2022-08-15 10:30:00') ON DUPLICATE KEY UPDATE amount = amount + 50.50;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (1, 1, 'Approved', '2022-08-15 10:31:00') ON DUPLICATE KEY UPDATE action = 'Declined';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (2, 'jane_smith', 'jane.smith@example.com', 'hashedpass456') ON DUPLICATE KEY UPDATE email = 'jane.smith_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (2, 2, '456 Oak Ave', 'Los Angeles', '90001', 'USA') ON DUPLICATE KEY UPDATE city = 'Los Angeles, CA';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (2, 2, 'PayPal', '9876543210987654', '2024-06-30', '456') ON DUPLICATE KEY UPDATE card_number = '9876543210987654';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (2, 2, 75.25, '2022-08-16 09:45:00') ON DUPLICATE KEY UPDATE amount = amount + 25.75;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (2, 2, 'Pending', '2022-08-16 09:45:30') ON DUPLICATE KEY UPDATE action = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (3, 'mike_johnson', 'mike.johnson@example.com', 'hashedpass789') ON DUPLICATE KEY UPDATE password_hash = 'newhashedpass123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (3, 3, '789 Pine Rd', 'San Francisco', '94102', 'USA') ON DUPLICATE KEY UPDATE zip_code = '94103';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (3, 3, 'Bank Transfer', '6543210987654321', '2025-10-31', '789') ON DUPLICATE KEY UPDATE expiration_date = '2025-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (3, 3, 150.00, '2022-08-17 14:20:00') ON DUPLICATE KEY UPDATE amount = amount + 100.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (3, 3, 'Failed', '2022-08-17 14:21:00') ON DUPLICATE KEY UPDATE action = 'Reversed';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, password_hash) VALUES (4, 'emily_davis', 'emily.davis@example.com', 'hashedpass246') ON DUPLICATE KEY UPDATE username = 'emily_davis_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO addresses (address_id, user_id, street, city, zip_code, country) VALUES (4, 4, '246 Elm St', 'Chicago', '60601', 'USA') ON DUPLICATE KEY UPDATE street = '246 Elm St, Suite 200';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO payment_methods (payment_method_id, user_id, payment_type, card_number, expiration_date, cvv) VALUES (4, 4, 'Gift Card', '5432167890123456', '2023-11-30', '246') ON DUPLICATE KEY UPDATE payment_type = 'Voucher';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, user_id, amount, date) VALUES (4, 4, 50.75, '2022-08-18 11:10:00') ON DUPLICATE KEY UPDATE amount = amount + 20.25;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nUPSERT INTO transactions_log (log_id, transaction_id, action, timestamp) VALUES (4, 4, 'Completed', '2022-08-18 11:10:30') ON DUPLICATE KEY UPDATE action = 'Cancelled';"
]