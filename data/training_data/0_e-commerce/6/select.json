[
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, user_id, payment_method FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM payment_information WHERE payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_information WHERE payment_method = 'PayPal';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE timestamp > '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount), MIN(amount) FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' AND payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM payment_information WHERE payment_method = 'PayPal' AND timestamp > '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_information WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-02-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' ORDER BY timestamp ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM payment_information GROUP BY payment_method;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE payment_method IN ('Credit Card', 'PayPal');",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE DATE(timestamp) = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount), EXTRACT(MONTH FROM timestamp) AS month FROM payment_information GROUP BY month;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, payment_method FROM payment_information WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM payment_information GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE payment_method = 'Credit Card' AND amount > 500 ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_information WHERE payment_method = 'PayPal';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM payment_information GROUP BY user_id HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp FROM payment_information WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-02-01 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' AND payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) AS max_amount FROM payment_information GROUP BY user_id HAVING MAX(amount) > 2000;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE amount BETWEEN 1000 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_method, COUNT(*) AS total_count FROM payment_information GROUP BY payment_method;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information ORDER BY timestamp ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) AS top_amount FROM payment_information GROUP BY user_id ORDER BY top_amount DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) AS min_amount FROM payment_information GROUP BY user_id HAVING MIN(amount) < 500;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT timestamp, payment_method, amount FROM payment_information WHERE payment_method = 'Cash' AND user_id IN ('123e4567-e89b-12d3-a456-426614174000', '234e5678-e89b-12d3-a456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_transactions FROM payment_information GROUP BY user_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n  transaction_id UUID PRIMARY KEY,\n  user_id UUID,\n  payment_method VARCHAR,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE timestamp > '2022-03-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, user_id, payment_amount, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT history_id, payment_id, transaction_status FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT history_id, transaction_status FROM payment_history WHERE transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, SUM(payment_amount) AS total_amount FROM payments GROUP BY payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(payment_id) AS total_payments FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments INNER JOIN payment_history ON payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments LEFT JOIN payment_history ON payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments RIGHT JOIN payment_history ON payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) AS max_payment FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) AS avg_payment FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(payment_amount) AS min_payment FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_payments FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(payment_amount) AS max_payment FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(payment_amount) AS avg_payment FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_amount > 1000 AND payment_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, user_id FROM payments WHERE user_id = 1234;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments WHERE payment_amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments INNER JOIN payment_history ON payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payments.payment_id, payment_history.history_id FROM payments LEFT JOIN payment_history ON payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(payment_id) AS total_payments FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) AS total_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) AS average_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) AS max_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(payment_amount) AS min_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, transaction_status FROM payment_history WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, COUNT(history_id) AS total_transactions FROM payment_history GROUP BY payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, MAX(transaction_date) AS latest_transaction_date FROM payment_history GROUP BY payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, AVG(payment_amount) AS avg_amount FROM payments GROUP BY payment_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, MAX(payment_amount) AS max_payment_amount FROM payments GROUP BY payment_id HAVING max_payment_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_amount) AS total_amount_paid FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(payment_id) AS total_payments_made FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(payment_amount) AS avg_payment_amount FROM payments GROUP BY user_id HAVING avg_payment_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(payment_amount) AS max_payment_amount FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  user_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP\n);\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  payment_id INT,\n  transaction_status VARCHAR,\n  transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount, transaction_status FROM payments LEFT JOIN payment_history ON payments.payment_id = payment_history.payment_id WHERE transaction_status = 'success';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, card_holder_name FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_account;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM user_account;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, card_holder_name, expiration_date FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM user_account;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, card_number, cvv FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, payment_id FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM user_account;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_account WHERE user_id = 50;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, card_holder_name FROM payment_information WHERE expiration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM transaction_history WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM user_account WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, card_number, cvv FROM payment_information WHERE card_holder_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, payment_id FROM transaction_history WHERE transaction_date < '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT card_holder_name, expiration_date FROM payment_information WHERE id = 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM transaction_history WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM user_account WHERE email LIKE '%@gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE cvv = '123';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM user_account WHERE user_id = 1 OR user_id = 2 OR user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM transaction_history WHERE amount < 50 AND payment_id IN (SELECT id FROM payment_information WHERE card_number LIKE '1234%');",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE card_holder_name = 'John Doe' AND expiration_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount >= 5000 AND transaction_date >= '2022-01-01' ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_account ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, SUM(amount) AS total_amount FROM transaction_history GROUP BY payment_id HAVING total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM user_account WHERE user_id BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE card_number IN (SELECT card_number FROM payment_information GROUP BY card_number HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS total_transactions FROM user_account JOIN transaction_history ON user_account.user_id = transaction_history.payment_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM user_account WHERE email NOT LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_information WHERE EXTRACT(MONTH FROM expiration_date) = 12;",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount = (SELECT MAX(amount) FROM transaction_history);",
  "### TABLEDATA\n\nCREATE TABLE payment_information (\n    id INT PRIMARY KEY,\n    card_number VARCHAR(16) NOT NULL,\n    card_holder_name VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT PRIMARY KEY,\n    payment_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (payment_id) REFERENCES payment_information(id)\n);\n\nCREATE TABLE user_account (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, p.card_holder_name FROM user_account u LEFT JOIN payment_information p ON u.user_id = p.id WHERE p.id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, account_number FROM PaymentAccounts;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, description FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT log_id, user_id FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, expiration_date FROM PaymentAccounts;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT log_id, log_date FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT description, amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT action FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, cvv FROM PaymentAccounts;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, action FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, password FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_number, expiration_date FROM PaymentAccounts;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT log_date, action FROM PaymentLogs;",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts WHERE user_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, account_number FROM PaymentAccounts WHERE expiration_date < '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM Users WHERE username LIKE '%admin%'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentLogs WHERE log_date BETWEEN '2021-01-01' AND '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, account_id, amount FROM Transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts JOIN Users ON PaymentAccounts.user_id = Users.user_id",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions JOIN PaymentAccounts ON Transactions.account_id = PaymentAccounts.account_id",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT Users.username, Transactions.amount FROM Users JOIN Transactions ON Users.user_id = Transactions.account_id",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM PaymentAccounts WHERE cvv = 1234",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM Transactions WHERE account_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM PaymentLogs WHERE action = 'login'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM Transactions",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts ORDER BY expiration_date DESC",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(amount) FROM Transactions WHERE transaction_date >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentLogs WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' AND action = 'logout'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts WHERE expiration_date > '2023-01-01' AND cvv IN (1234, 5678)",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(transaction_date) FROM Transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM PaymentLogs GROUP BY user_id HAVING COUNT(*) > 10",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE email NOT LIKE '%example.com'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM Transactions WHERE transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE PaymentAccounts (\n  account_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  account_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv INTEGER NOT NULL\n);\n\n\nCREATE TABLE Transactions (\n  transaction_id UUID PRIMARY KEY,\n  account_id UUID NOT NULL,\n  transaction_date TIMESTAMP NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL,\n  description TEXT\n);\n\n\nCREATE TABLE Users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\n\nCREATE TABLE PaymentLogs (\n  log_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  log_date TIMESTAMP NOT NULL,\n  action VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentAccounts WHERE account_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT username, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT user_id, email, password_hash FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, amount, date FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM payment_methods",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT user_id, payment_type, card_number FROM payment_methods",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM addresses",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT user_id, street, city, country FROM addresses",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions_log",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT log_id, transaction_id, action FROM transactions_log",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT users.username, transactions.amount FROM users INNER JOIN transactions ON users.user_id = transactions.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT users.username, payment_methods.card_number FROM users INNER JOIN payment_methods ON users.user_id = payment_methods.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transactions.transaction_id, payment_methods.payment_type FROM transactions INNER JOIN payment_methods ON transactions.user_id = payment_methods.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transactions.amount, addresses.city FROM transactions INNER JOIN addresses ON transactions.user_id = addresses.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT users.username, transactions_log.action FROM users INNER JOIN transactions_log ON users.user_id = transactions_log.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transactions_log.log_id, transactions.amount FROM transactions_log INNER JOIN transactions ON transactions_log.transaction_id = transactions.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT users.username, payment_methods.expiration_date FROM users INNER JOIN payment_methods ON users.user_id = payment_methods.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions_log.action, addresses.city FROM transactions INNER JOIN transactions_log ON transactions.transaction_id = transactions_log.transaction_id INNER JOIN addresses ON transactions.user_id = addresses.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT users.username, payments.card_number, logs.action, addresses.city FROM users INNER JOIN payment_methods ON users.user_id = payment_methods.user_id INNER JOIN transactions_log ON transactions_log.transaction_id = transactions.transaction_id INNER JOIN addresses ON addresses.user_id = transactions.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, u.username FROM transactions t JOIN users u ON t.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, u.username, a.city FROM transactions t JOIN users u ON t.user_id = u.user_id JOIN addresses a ON u.user_id = a.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS num_transactions FROM users u LEFT JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT username, password_hash FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, t.amount FROM users u INNER JOIN transactions t ON u.user_id = t.user_id WHERE t.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, p.payment_type, p.card_number FROM users u INNER JOIN payment_methods p ON u.user_id = p.user_id WHERE p.payment_type = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT username, action, timestamp FROM users u JOIN transactions t ON u.user_id = t.user_id JOIN transactions_log l ON t.transaction_id = l.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, a.street, a.city, a.country FROM users u JOIN addresses a ON u.user_id = a.user_id WHERE a.zip_code = '12345';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, t.amount FROM users u JOIN transactions t ON u.user_id = t.user_id WHERE t.date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, p.payment_type, p.expiration_date FROM users u JOIN payment_methods p ON u.user_id = p.user_id WHERE p.expiration_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT username, password_hash FROM users WHERE user_id IN (SELECT user_id FROM transactions WHERE amount > 500);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS num_transactions FROM users u LEFT JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username HAVING num_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, AVG(t.amount) AS avg_amount FROM users u JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username HAVING avg_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, a.city, a.country FROM users u JOIN addresses a ON u.user_id = a.user_id WHERE a.country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, t.amount, p.payment_type FROM users u JOIN transactions t ON u.user_id = t.user_id JOIN payment_methods p ON u.user_id = p.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, a.street, a.city, a.country, t.amount FROM users u JOIN addresses a ON u.user_id = a.user_id JOIN transactions t ON u.user_id = t.user_id WHERE t.amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password_hash VARCHAR(100)\n)\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    user_id INT,\n    amount DECIMAL(10, 2),\n    date TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE payment_methods (\n    payment_method_id INT PRIMARY KEY,\n    user_id INT,\n    payment_type VARCHAR(50),\n    card_number VARCHAR(16),\n    expiration_date DATE,\n    cvv VARCHAR(3),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE addresses (\n    address_id INT PRIMARY KEY,\n    user_id INT,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    zip_code VARCHAR(10),\n    country VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n)\n\nCREATE TABLE transactions_log (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP,\n    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT u.username, t.amount, a.zip_code FROM users u JOIN transactions t ON u.user_id = t.user_id JOIN addresses a ON u.user_id = a.user_id WHERE a.city = 'New York';"
]