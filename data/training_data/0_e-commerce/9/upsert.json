[
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Alice', 123, 4, 'Good product', '2022-01-10') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Bob', 456, 5, 'Excellent product', '2022-02-15') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Charlie', 789, 3, 'Average product', '2022-03-20') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('David', 234, 2, 'Not satisfied', '2022-04-25') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Eva', 567, 4, 'Good quality', '2022-05-30') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Frank', 890, 1, 'Poor quality', '2022-06-01') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Grace', 123, 5, 'Exceptional product', '2022-07-02') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Henry', 456, 3, 'Could be better', '2022-08-03') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Ivy', 789, 4, 'Satisfied with the purchase', '2022-09-04') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Jack', 234, 2, 'Disappointing experience', '2022-10-05') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Kate', 567, 5, 'Highly recommend', '2022-11-06') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Liam', 890, 3, 'Average product', '2022-12-07') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Mia', 123, 1, 'Not recommended', '2023-01-08') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Nate', 456, 4, 'Good value for money', '2023-02-09') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Olivia', 789, 2, 'Below expectations', '2023-03-10') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Peter', 234, 5, 'Absolutely fantastic', '2023-04-11') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Quinn', 567, 3, 'Just okay', '2023-05-12') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Rachel', 890, 4, 'Great customer service', '2023-06-13') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Sam', 123, 2, 'Needs improvement', '2023-07-14') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Tina', 456, 5, 'Best purchase ever', '2023-08-15') ON CONFLICT (review_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, product_id = EXCLUDED.product_id, review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = EXCLUDED.review_date;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Alice', 1001, 5, 'Great product!', '2022-01-01') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 5, review_text = 'Updated review', review_date = '2022-01-02';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Bob', 1002, 4, 'Good product!', '2022-01-02') ON CONFLICT (customer_name, product_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('David', 1003, 3, 'Average product', '2022-01-03') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = EXCLUDED.review_score + 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Eva', 1004, 2, 'Not satisfied', '2022-01-04') ON CONFLICT (customer_name, product_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Alice', 1001, 4, 'Good value for money', '2022-01-05') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = EXCLUDED.review_score, review_text = EXCLUDED.review_text, review_date = '2022-01-06';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Frank', 1005, 5, 'Excellent service!', '2022-01-07') ON CONFLICT (customer_name, product_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Hannah', 1006, 3, 'Could be better', '2022-01-08') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 3, review_text = 'Not the best', review_date = '2022-01-09';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Isaac', 1007, 2, 'Poor quality', '2022-01-10') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 1, review_text = 'Terrible experience', review_date = '2022-01-11';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Jane', 1008, 4, 'Satisfactory', '2022-01-12') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 4, review_text = 'Met expectations', review_date = '2022-01-13';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Alice', 1009, 1, 'Worst product ever', '2022-01-14') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 1, review_text = 'Disappointing', review_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Bob', 1010, 5, 'Highly recommended', '2022-01-16') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 5, review_text = 'Top-notch', review_date = '2022-01-17';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('David', 1011, 3, 'Okay product', '2022-01-18') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 3, review_text = 'Average experience', review_date = '2022-01-19';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Eva', 1012, 2, 'Unsatisfactory', '2022-01-20') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 1, review_text = 'Very disappointing', review_date = '2022-01-21';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Frank', 1013, 5, 'Outstanding performance', '2022-01-22') ON CONFLICT (customer_name, product_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Hannah', 1014, 3, 'Improvement needed', '2022-01-23') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 2, review_text = 'Below expectations', review_date = '2022-01-24';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Isaac', 1015, 2, 'Regret buying', '2022-01-25') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 1, review_text = 'Awful experience', review_date = '2022-01-26';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Jane', 1016, 4, 'Good enough', '2022-01-27') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 4, review_text = 'Decent', review_date = '2022-01-28';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Alice', 1017, 1, 'Avoid this product', '2022-01-29') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 1, review_text = 'Disastrous', review_date = '2022-01-30';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('Bob', 1018, 5, 'Simply the best', '2022-01-31') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 5, review_text = 'Unbeatable', review_date = '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_reviews (\n    review_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(100) NOT NULL,\n    product_id INT NOT NULL,\n    review_score INT,\n    review_text TEXT,\n    review_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO customer_reviews (customer_name, product_id, review_score, review_text, review_date) VALUES ('David', 1019, 3, 'Not impressed', '2022-02-02') ON CONFLICT (customer_name, product_id) DO UPDATE SET review_score = 3, review_text = 'Meh', review_date = '2022-02-03';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (1, 101, 'Great product!', 5, 'Alice') ON CONFLICT(review_id) DO UPDATE SET product_id = 101, review_text = 'Amazing product!', review_rating = 5, reviewer_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (2, 102, 'Not satisfied', 2, 'Bob') ON CONFLICT(review_id) DO UPDATE SET product_id = 102, review_text = 'Disappointing product', review_rating = 2, reviewer_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (3, 103, 'Good value for money', 4, 'Charlie') ON CONFLICT(review_id) DO UPDATE SET product_id = 103, review_text = 'Great value for the price', review_rating = 4, reviewer_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (4, 104, 'Average product', 3, 'David') ON CONFLICT(review_id) DO UPDATE SET product_id = 104, review_text = 'Decent product', review_rating = 3, reviewer_name = 'David';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (5, 105, 'Excellent service', 5, 'Eve') ON CONFLICT(review_id) DO UPDATE SET product_id = 105, review_text = 'Exceptional service', review_rating = 5, reviewer_name = 'Eve';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (6, 106, 'Fast delivery', 4, 'Frank') ON CONFLICT(review_id) DO UPDATE SET product_id = 106, review_text = 'Quick delivery', review_rating = 4, reviewer_name = 'Frank';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (7, 107, 'Poor quality', 2, 'Grace') ON CONFLICT(review_id) DO UPDATE SET product_id = 107, review_text = 'Low quality', review_rating = 2, reviewer_name = 'Grace';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (8, 108, 'Highly recommended', 5, 'Hank') ON CONFLICT(review_id) DO UPDATE SET product_id = 108, review_text = 'Definitely recommended', review_rating = 5, reviewer_name = 'Hank';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (9, 109, 'Great packaging', 4, 'Ivy') ON CONFLICT(review_id) DO UPDATE SET product_id = 109, review_text = 'Excellent packaging', review_rating = 4, reviewer_name = 'Ivy';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (10, 110, 'Nice design', 3, 'Jack') ON CONFLICT(review_id) DO UPDATE SET product_id = 110, review_text = 'Stylish design', review_rating = 3, reviewer_name = 'Jack';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (11, 111, 'Satisfied with the purchase', 4, 'Kate') ON CONFLICT(review_id) DO UPDATE SET product_id = 111, review_text = 'Happy with the purchase', review_rating = 4, reviewer_name = 'Kate';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (12, 112, 'Great customer service', 5, 'Liam') ON CONFLICT(review_id) DO UPDATE SET product_id = 112, review_text = 'Exceptional customer service', review_rating = 5, reviewer_name = 'Liam';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (13, 113, 'Poor experience', 1, 'Mia') ON CONFLICT(review_id) DO UPDATE SET product_id = 113, review_text = 'Terrible experience', review_rating = 1, reviewer_name = 'Mia';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (14, 114, 'Adequate product', 3, 'Nick') ON CONFLICT(review_id) DO UPDATE SET product_id = 114, review_text = 'Fair product', review_rating = 3, reviewer_name = 'Nick';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (15, 115, 'Fast response', 4, 'Olivia') ON CONFLICT(review_id) DO UPDATE SET product_id = 115, review_text = 'Quick response', review_rating = 4, reviewer_name = 'Olivia';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (16, 116, 'Best purchase ever', 5, 'Peter') ON CONFLICT(review_id) DO UPDATE SET product_id = 116, review_text = 'Greatest purchase ever', review_rating = 5, reviewer_name = 'Peter';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (17, 117, 'Poor customer support', 2, 'Quinn') ON CONFLICT(review_id) DO UPDATE SET product_id = 117, review_text = 'Bad customer support', review_rating = 2, reviewer_name = 'Quinn';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (18, 118, 'Very helpful staff', 5, 'Rachel') ON CONFLICT(review_id) DO UPDATE SET product_id = 118, review_text = 'Incredibly helpful staff', review_rating = 5, reviewer_name = 'Rachel';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (19, 119, 'Beautiful product', 4, 'Sam') ON CONFLICT(review_id) DO UPDATE SET product_id = 119, review_text = 'Gorgeous product', review_rating = 4, reviewer_name = 'Sam';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (20, 120, 'Unique item', 3, 'Tina') ON CONFLICT(review_id) DO UPDATE SET product_id = 120, review_text = 'One-of-a-kind item', review_rating = 3, reviewer_name = 'Tina';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (1, 101, 'Great product!', 5, 'John Doe') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (2, 102, 'Not as expected', 2, 'Jane Smith') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (3, 103, 'Best purchase ever!', 5, 'Alice Brown') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (4, 104, 'Poor quality', 1, 'Tom Johnson') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (5, 105, 'Average product', 3, 'Sarah Wilson') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (6, 106, 'Highly recommend!', 5, 'Michael White') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (7, 107, 'Waste of money', 1, 'Laura Lee') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (8, 108, 'Decent product', 4, 'Chris Smith') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (9, 109, 'Needs improvement', 2, 'Emma Taylor') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO ProductReviews (review_id, product_id, review_text, review_rating, reviewer_name) VALUES (10, 110, 'Satisfied with the purchase', 4, 'Alex Johnson') ON CONFLICT (review_id) DO UPDATE SET product_id = excluded.product_id, review_text = excluded.review_text, review_rating = excluded.review_rating, reviewer_name = excluded.reviewer_name;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (1, 201, 'Great service!', 5, '2022-10-15') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (2, 202, 'Poor experience', 2, '2022-11-20') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (3, 203, 'Highly recommended!', 5, '2022-09-30') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (4, 204, 'Average service', 3, '2022-12-05') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (5, 205, 'Needs improvement', 2, '2023-01-10') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (6, 206, 'Excellent feedback!', 5, '2022-11-25') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (7, 207, 'Terrible experience', 1, '2022-10-30') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (8, 208, 'Good service', 4, '2022-09-20') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (9, 209, 'Improvements needed', 2, '2023-02-15') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    review_text TEXT,\n    review_rating INT,\n    reviewer_name TEXT\n);\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    product_id INT,\n    feedback_text TEXT,\n    feedback_rating INT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Feedback (feedback_id, product_id, feedback_text, feedback_rating, feedback_date) VALUES (10, 210, 'Satisfactory service', 4, '2022-08-10') ON CONFLICT (feedback_id) DO UPDATE SET product_id = excluded.product_id, feedback_text = excluded.feedback_text, feedback_rating = excluded.feedback_rating, feedback_date = excluded.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (1, 101, 'Jane Doe', 'Great product!', 5) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (1, 101, 'Improved packaging', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (1, 1, 1, '2023-10-15') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (2, 102, 'John Smith', 'So-so product', 3) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (2, 102, 'Enhanced user interface', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (2, 2, 2, '2023-10-16') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (3, 103, 'Mary Johnson', 'Disappointing experience', 2) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (3, 103, 'Faster delivery', false) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (3, 3, 3, '2023-10-17') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (4, 104, 'David Brown', 'Exceptional service!', 5) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (4, 104, 'Improved product quality', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (4, 4, 4, '2023-10-18') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (5, 105, 'Anna Green', 'Average experience', 3) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (5, 105, 'Improved customer support', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (5, 5, 5, '2023-10-19') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (6, 106, 'Michael Williams', 'Outstanding quality!', 5) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (6, 106, 'Enhanced features', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (6, 6, 6, '2023-10-20') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (7, 107, 'Sarah Lee', 'Could be better', 2) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (7, 107, 'Improved customization options', false) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (7, 7, 7, '2023-10-21') ON CONFLICT (feedback_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (1, 101, 'John Doe', 'Great product!', 5) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (1, 101, 'Improved packaging', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (1, 1, 1, '2022-01-01') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (2, 102, 'Jane Smith', 'Not satisfied with the quality', 3) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (2, 102, 'Enhanced user interface', false) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (2, 2, 2, '2022-01-02') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (3, 103, 'Alice Johnson', 'Average experience', 3) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (3, 103, 'Better customer support', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (3, 3, 3, '2022-01-03') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (4, 104, 'David Brown', 'Excellent service!', 5) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (4, 104, 'Faster delivery', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (4, 4, 4, '2022-01-04') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (5, 105, 'Sarah Wilson', 'Could be better', 2) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (5, 105, 'Bug fixes needed', false) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (5, 5, 5, '2022-01-05') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (6, 106, 'Michael Lee', 'Very impressed with the product', 4) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (6, 106, 'New features requested', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (6, 6, 6, '2022-01-06') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (7, 107, 'Emily Davis', 'Disappointing experience', 1) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (7, 107, 'Improved product documentation', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO FeedbackHistory (feedback_id, review_id, improvement_id, feedback_date) VALUES (7, 7, 7, '2022-01-07') ON CONFLICT (feedback_id) DO UPDATE SET review_id = EXCLUDED.review_id, improvement_id = EXCLUDED.improvement_id, feedback_date = EXCLUDED.feedback_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO CustomerReviews (review_id, product_id, customer_name, review_text, rating) VALUES (8, 108, 'Olivia Martinez', 'Average performance', 3) ON CONFLICT (review_id) DO UPDATE SET product_id = EXCLUDED.product_id, customer_name = EXCLUDED.customer_name, review_text = EXCLUDED.review_text, rating = EXCLUDED.rating;",
  "### TABLEDATA\n\nCREATE TABLE CustomerReviews (\n  review_id INT PRIMARY KEY,\n  product_id INT,\n  customer_name VARCHAR(50),\n  review_text TEXT,\n  rating INT\n);\n\n\nCREATE TABLE ProductImprovements (\n  improvement_id INT PRIMARY KEY,\n  product_id INT,\n  improvement_text TEXT,\n  implemented BOOLEAN\n);\n\n\nCREATE TABLE FeedbackHistory (\n  feedback_id INT PRIMARY KEY,\n  review_id INT,\n  improvement_id INT,\n  feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductImprovements (improvement_id, product_id, improvement_text, implemented) VALUES (8, 108, 'Enhanced security features', true) ON CONFLICT (improvement_id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_text = EXCLUDED.improvement_text, implemented = EXCLUDED.implemented;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '1234567890') ON CONFLICT (id) DO UPDATE SET full_name = 'John Doe', email = 'johndoe@example.com', phone_number = '1234567890';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (2, 'Alice Smith', 'alicesmith@example.com', '9876543210') ON CONFLICT (id) DO UPDATE SET full_name = 'Alice Smith', email = 'alicesmith@example.com', phone_number = '9876543210';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (3, 'Bob Johnson', 'bjohnson@example.com', '5558887777') ON CONFLICT (id) DO UPDATE SET full_name = 'Bob Johnson', email = 'bjohnson@example.com', phone_number = '5558887777';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (1, 'Smartphone', 'Latest smartphone model', 999.99) ON CONFLICT (id) DO UPDATE SET name = 'Smartphone', description = 'Latest smartphone model', price = 999.99;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (2, 'Laptop', 'High-performance laptop', 1499.99) ON CONFLICT (id) DO UPDATE SET name = 'Laptop', description = 'High-performance laptop', price = 1499.99;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (3, 'Headphones', 'Noise-canceling headphones', 199.99) ON CONFLICT (id) DO UPDATE SET name = 'Headphones', description = 'Noise-canceling headphones', price = 199.99;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (1, 1, 1, 5, 'Great product!') ON CONFLICT (id) DO UPDATE SET customer_id = 1, product_id = 1, rating = 5, comment = 'Great product!';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (2, 2, 2, 4, 'Good quality.') ON CONFLICT (id) DO UPDATE SET customer_id = 2, product_id = 2, rating = 4, comment = 'Good quality.';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (3, 3, 3, 3, 'Could be better.') ON CONFLICT (id) DO UPDATE SET customer_id = 3, product_id = 3, rating = 3, comment = 'Could be better.';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description, status) VALUES (1, 1, 'Software update needed', 'pending') ON CONFLICT (id) DO UPDATE SET product_id = 1, improvement_description = 'Software update needed', status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description, status) VALUES (2, 2, 'Increase RAM capacity', 'in progress') ON CONFLICT (id) DO UPDATE SET product_id = 2, improvement_description = 'Increase RAM capacity', status = 'in progress';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description, status) VALUES (3, 3, 'Enhance sound clarity', 'completed') ON CONFLICT (id) DO UPDATE SET product_id = 3, improvement_description = 'Enhance sound clarity', status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (id) DO UPDATE SET full_name = EXCLUDED.full_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (1, 'Product A', 'Description A', 99.99) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (1, 1, 1, 5, 'Great product!') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rating = EXCLUDED.rating, comment = EXCLUDED.comment;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description) VALUES (1, 1, 'Improve XYZ feature') ON CONFLICT (id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_description = EXCLUDED.improvement_description, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (2, 'Alice Smith', 'alice.smith@example.com', '987-654-3210') ON CONFLICT (id) DO UPDATE SET full_name = EXCLUDED.full_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (2, 'Product B', 'Description B', 49.99) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (2, 2, 2, 4, 'Needs improvement') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rating = EXCLUDED.rating, comment = EXCLUDED.comment;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description) VALUES (2, 2, 'Enhance ABC functionality') ON CONFLICT (id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_description = EXCLUDED.improvement_description, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (3, 'Bob Johnson', 'bob.johnson@example.com', '567-890-1234') ON CONFLICT (id) DO UPDATE SET full_name = EXCLUDED.full_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (3, 'Product C', 'Description C', 29.99) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (3, 3, 3, 3, 'Not satisfied') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rating = EXCLUDED.rating, comment = EXCLUDED.comment;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description) VALUES (3, 3, 'Fix issue with Z feature') ON CONFLICT (id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_description = EXCLUDED.improvement_description, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (4, 'Emma Brown', 'emma.brown@example.com', '345-678-9012') ON CONFLICT (id) DO UPDATE SET full_name = EXCLUDED.full_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (4, 'Product D', 'Description D', 79.99) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (4, 4, 4, 4, 'Average product') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rating = EXCLUDED.rating, comment = EXCLUDED.comment;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description) VALUES (4, 4, 'Update feature Y') ON CONFLICT (id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_description = EXCLUDED.improvement_description, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, full_name, email, phone_number) VALUES (5, 'Grace Lee', 'grace.lee@example.com', '901-234-5678') ON CONFLICT (id) DO UPDATE SET full_name = EXCLUDED.full_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO products (id, name, description, price) VALUES (5, 'Product E', 'Description E', 39.99) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO reviews (id, customer_id, product_id, rating, comment) VALUES (5, 5, 5, 5, 'Excellent product!') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rating = EXCLUDED.rating, comment = EXCLUDED.comment;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  rating INT,\n  comment TEXT,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE improvements (\n  id INT PRIMARY KEY,\n  product_id INT,\n  improvement_description TEXT,\n  status VARCHAR(10) DEFAULT 'pending',\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n### STATEMENT\n\nINSERT INTO improvements (id, product_id, improvement_description) VALUES (5, 5, 'Add new feature') ON CONFLICT (id) DO UPDATE SET product_id = EXCLUDED.product_id, improvement_description = EXCLUDED.improvement_description, status = EXCLUDED.status;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (1, 101, 'Alice', 'Great product, highly recommend it.');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (1, 101, 4.5, 1);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'Alice', 'alice@example.com', '123-456-7890');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (101, 'Product1', 'Electronics', 299.99);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (1, 1, 'Great service and fast shipping!', '2022-01-10');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (2, 102, 'Bob', 'Good quality product at a reasonable price.');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (2, 102, 4.0, 2);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Bob', 'bob@example.com', '234-567-8901');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (102, 'Product2', 'Home & Kitchen', 49.99);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (2, 2, 'Satisfied with the purchase!', '2022-01-15');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (3, 103, 'Charlie', 'Impressive product quality and performance.');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (3, 103, 4.8, 3);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Charlie', 'charlie@example.com', '345-678-9012');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (103, 'Product3', 'Clothing', 79.99);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (3, 3, 'Excellent customer service!', '2022-01-20');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (4, 104, 'David', 'The best product I've ever used.');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (4, 104, 5.0, 4);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (4, 'David', 'david@example.com', '456-789-0123');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (104, 'Product4', 'Sports & Outdoors', 129.99);",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (4, 4, 'Fast delivery and top-notch quality!', '2022-01-25');",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (1, 101, 'John Doe', 'Great product, highly recommend') ON DUPLICATE KEY UPDATE review_text = 'Updated review text';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (1, 101, 4.5, 1) ON DUPLICATE KEY UPDATE rating = 4.7;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'Alice Smith', 'alice@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE email = 'newemail@example.com';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (101, 'Product A', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE price = 549.99;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (1, 1, 'Good service, prompt delivery', '2023-01-15') ON DUPLICATE KEY UPDATE feedback_text = 'Excellent service, fast delivery';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (2, 102, 'Mary Brown', 'Nice product, satisfied with the purchase') ON DUPLICATE KEY UPDATE review_text = 'Revised review text';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (2, 102, 4.0, 2) ON DUPLICATE KEY UPDATE rating = 4.2;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Bob Johnson', 'bob@example.com', '456-789-0123') ON DUPLICATE KEY UPDATE email = 'newemail2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (102, 'Product B', 'Clothing', 39.99) ON DUPLICATE KEY UPDATE price = 44.99;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (2, 2, 'Loved the product, great quality', '2023-01-20') ON DUPLICATE KEY UPDATE feedback_text = 'Top-notch product, excellent quality';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (3, 103, 'Lisa Green', 'Amazing product, exceeded expectations') ON DUPLICATE KEY UPDATE review_text = 'Updated review text 3';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (3, 103, 5.0, 3) ON DUPLICATE KEY UPDATE rating = 4.9;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Ethan Lee', 'ethan@example.com', '789-012-3456') ON DUPLICATE KEY UPDATE email = 'newemail3@example.com';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (103, 'Product C', 'Home & Kitchen', 79.99) ON DUPLICATE KEY UPDATE price = 89.99;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (3, 3, 'Excellent customer service, very satisfied', '2023-01-25') ON DUPLICATE KEY UPDATE feedback_text = 'Outstanding customer service, highly satisfied';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductReviews (review_id, product_id, customer_name, review_text) VALUES (4, 104, 'Kevin Adams', 'Awesome product, worth the price') ON DUPLICATE KEY UPDATE review_text = 'Updated review text 4';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO ProductRatings (rating_id, product_id, rating, review_id) VALUES (4, 104, 4.7, 4) ON DUPLICATE KEY UPDATE rating = 4.6;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (4, 'Sophia Patel', 'sophia@example.com', '012-345-6789') ON DUPLICATE KEY UPDATE email = 'newemail4@example.com';",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Products (product_id, product_name, category, price) VALUES (104, 'Product D', 'Beauty & Personal Care', 29.99) ON DUPLICATE KEY UPDATE price = 34.99;",
  "### TABLEDATA\n\nCREATE TABLE ProductReviews (\n    review_id INT PRIMARY KEY,\n    product_id INT,\n    customer_name VARCHAR(50),\n    review_text TEXT\n);\n\n\nCREATE TABLE ProductRatings (\n    rating_id INT PRIMARY KEY,\n    product_id INT,\n    rating FLOAT,\n    review_id INT\n);\n\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    category VARCHAR(50),\n    price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE Feedback (\n    feedback_id INT PRIMARY KEY,\n    customer_id INT,\n    feedback_text TEXT,\n    feedback_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO Feedback (feedback_id, customer_id, feedback_text, feedback_date) VALUES (4, 4, 'Impressed with the product quality', '2023-01-30') ON DUPLICATE KEY UPDATE feedback_text = 'Extremely impressed with the product quality';"
]