<t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>DELETE FROM collaboration_tools WHERE tool_id = 1;</stat><divider><t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>delete from collaboration_tools where tool_id = 1;</stat><divider><t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>DELETE FROM collaboration_tools WHERE tool_name = 'Example Tool';</stat><divider><t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>delete from collaboration_tools where tool_name = 'example tool';</stat><divider><t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>DELETE FROM collaboration_tools WHERE tool_category = 'Communication';</stat><divider><t>CREATE TABLE collaboration_tools (     tool_id INT PRIMARY KEY,     tool_name VARCHAR(50) NOT NULL,     tool_description TEXT,     tool_category VARCHAR(30) )</t><stat>delete from collaboration_tools where tool_category = 'communication';</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>DELETE FROM Projects WHERE projectID = 1;</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>delete from projects where projectid = 1;</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>DELETE FROM Projects WHERE projectID = 1;</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>delete from projects where projectid = 1;</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>DELETE FROM Members WHERE memberID = 100;</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>delete from members where memberid = 100;</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>DELETE FROM Members WHERE memberID = 100;</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>delete from members where memberid = 100;</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>DELETE FROM Projects WHERE project_name = 'Example Project';</stat><divider><t>CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)

CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)</t><stat>delete from projects where project_name = 'example project';</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>DELETE FROM Projects WHERE project_name = 'Example Project';</stat><divider><t>CREATE TABLE Members (memberID INT PRIMARY KEY, member_name VARCHAR(255) NOT NULL, member_email VARCHAR(255) UNIQUE, member_role VARCHAR(50), join_date DATE)

CREATE TABLE Projects (projectID INT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, project_description TEXT, created_date DATE)</t><stat>delete from projects where project_name = 'example project';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM tasks WHERE task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from tasks where task_id = '12345678-1234-1234-1234-123456789abc';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM projects WHERE project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from projects where project_id = '98765432-5678-9876-5432-109876543210';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>DELETE FROM users WHERE user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE tasks (
    task_id UUID PRIMARY KEY,
    task_name VARCHAR(100) NOT NULL,
    project_id UUID REFERENCES projects(project_id),
    assigned_to UUID REFERENCES users(user_id),
    due_date DATE
);

CREATE TABLE projects (
    project_id UUID PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP
);</t><stat>delete from users where user_id = '55555555-5555-5555-5555-555555555555';</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM teams WHERE team_id = 5;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from teams where team_id = 5;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>DELETE FROM projects WHERE project_id = 10;</stat><divider><t>CREATE TABLE tasks ( task_id SERIAL PRIMARY KEY, task_name VARCHAR(100) NOT NULL, description TEXT, deadline DATE NOT NULL, user_id INT REFERENCES users(user_id), project_id INT REFERENCES projects(project_id) )

CREATE TABLE projects ( project_id INT PRIMARY KEY, project_name VARCHAR(100) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, team_id INT REFERENCES teams(team_id) )

CREATE TABLE teams ( team_id INT PRIMARY KEY, team_name VARCHAR(50) NOT NULL, description TEXT, created_at TIMESTAMP NOT NULL )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP NOT NULL )</t><stat>delete from projects where project_id = 10;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from users where user_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM teams WHERE team_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from teams where team_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>DELETE FROM projects WHERE project_id = 1;</stat><divider><t>CREATE TABLE messages (
    message_id INT PRIMARY KEY,
    sender_id INT REFERENCES users(user_id),
    receiver_id INT REFERENCES users(user_id),
    message_text STRING,
    sent_at TIMESTAMP
);


CREATE TABLE tasks (
    task_id INT PRIMARY KEY,
    task_name STRING NOT NULL,
    project_id INT REFERENCES projects(project_id),
    assigned_to INT REFERENCES users(user_id),
    due_date DATE,
    status STRING
);


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name STRING NOT NULL,
    team_id INT REFERENCES teams(team_id),
    created_at TIMESTAMP
);


CREATE TABLE teams (
    team_id INT PRIMARY KEY,
    team_name STRING NOT NULL,
    created_at TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username STRING NOT NULL,
    email STRING NOT NULL,
    created_at TIMESTAMP
);
</t><stat>delete from projects where project_id = 1;</stat>