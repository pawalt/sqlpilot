[
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress WHERE player_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id FROM player_progress WHERE quest_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, mission_id FROM player_progress WHERE mission_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress WHERE progress_percent > 50;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(progress_percent) FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT SUM(progress_percent) FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT MIN(progress_percent) FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(progress_percent) FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT quest_id FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, SUM(progress_percent) AS total_progress FROM player_progress GROUP BY player_id;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, AVG(progress_percent) AS avg_progress FROM player_progress GROUP BY player_id;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT quest_id, AVG(progress_percent) FROM player_progress GROUP BY quest_id;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT mission_id, MAX(progress_percent) FROM player_progress GROUP BY mission_id;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress ORDER BY progress_percent DESC;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress ORDER BY progress_percent ASC;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress WHERE player_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress WHERE player_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id FROM player_progress WHERE progress_percent > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id FROM player_progress WHERE progress_percent >= 0.8 AND mission_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(player_id) AS total_players FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(progress_percent) AS average_progress FROM player_progress WHERE quest_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, mission_id FROM player_progress WHERE quest_id IN (1, 3);",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(progress_percent) AS max_progress FROM player_progress WHERE player_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE player_id IN (1, 2) ORDER BY progress_percent DESC;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT quest_id FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE progress_percent BETWEEN 0.2 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, COUNT(quest_id) AS total_quests FROM player_progress GROUP BY player_id;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE quest_id = 1 AND mission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(progress_percent) AS average_progress, quest_id FROM player_progress GROUP BY quest_id HAVING AVG(progress_percent) > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE quest_id = 1 OR mission_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, ROUND(progress_percent * 100) AS progress_percentage FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE progress_percent < 0.4 OR progress_percent > 0.6;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE player_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE quest_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE quest_id = 3 AND mission_id = 2 AND progress_percent > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE player_progress (\n    player_id INT PRIMARY KEY,\n    quest_id INT,\n    mission_id INT,\n    progress_percent FLOAT\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, progress_percent FROM player_progress WHERE player_id = 3 OR (quest_id = 2 AND mission_id = 2);",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT * FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name AS name, quest_description AS description FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT * FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_reward FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_reward, quest_id FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, mission_name FROM quests JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, mission_name, mission_type FROM quests JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id WHERE quest_difficulty > 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id WHERE quest_name LIKE '%Defeat%';",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id WHERE quest_description LIKE '%Find%';",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id ORDER BY quest_difficulty DESC;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id ORDER BY mission_reward ASC;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_quests FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, COUNT(*) AS total_missions FROM missions GROUP BY quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT AVG(quest_difficulty) AS avg_difficulty FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, MAX(mission_reward) AS max_reward FROM missions GROUP BY quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, MIN(mission_reward) AS min_reward FROM missions GROUP BY quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT * FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description FROM quests WHERE quest_difficulty > 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty FROM quests WHERE quest_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_type, mission_reward FROM missions WHERE quest_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, mission_name, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty, mission_name, mission_type, mission_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty, mission_name, mission_type, mission_reward FROM quests LEFT JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty, mission_name, mission_type, mission_reward FROM quests RIGHT JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty, mission_name, mission_type, mission_reward FROM quests INNER JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty, mission_name, mission_type, mission_reward FROM quests FULL JOIN missions ON quests.quest_id = missions.quest_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, COUNT(mission_id) AS mission_count FROM quests JOIN missions ON quests.quest_id = missions.quest_id GROUP BY quest_name, quest_description;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, SUM(mission_reward) AS total_reward FROM quests JOIN missions ON quests.quest_id = missions.quest_id GROUP BY quest_name, quest_description;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, AVG(quest_difficulty) AS avg_difficulty FROM quests JOIN missions ON quests.quest_id = missions.quest_id GROUP BY quest_name, quest_description;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_id IN (SELECT quest_id FROM missions WHERE mission_type = 'Assassination');",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_id IN (SELECT quest_id FROM missions WHERE mission_reward > 1000);",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_id NOT IN (SELECT quest_id FROM missions WHERE mission_type = 'Reconnaissance');",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_id NOT IN (SELECT quest_id FROM missions WHERE mission_reward < 500);",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE LOWER(quest_name) LIKE '%rescue%';",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_difficulty BETWEEN 1 AND 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n    quest_id INT PRIMARY KEY,\n    quest_name VARCHAR(255) NOT NULL,\n    quest_description TEXT,\n    quest_difficulty INT\n);\n\nCREATE TABLE missions (\n    mission_id INT PRIMARY KEY,\n    mission_name VARCHAR(255) NOT NULL,\n    mission_type VARCHAR(50),\n    mission_reward INT,\n    quest_id INT,\n    FOREIGN KEY (quest_id) REFERENCES quests(quest_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description, quest_difficulty FROM quests WHERE quest_name LIKE '%Forgotten%' AND quest_difficulty > 2;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name, experience_reward FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_id, mission_name, difficulty_level FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id, completion_status FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id FROM player_progress WHERE completion_status = true;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id FROM player_progress WHERE completion_status = false;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, mission_id FROM player_progress WHERE player_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM quests WHERE quest_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, experience_reward FROM quests WHERE quest_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM missions WHERE difficulty_level > 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM missions WHERE difficulty_level <= 2;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT count(*) FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT avg(experience_reward) FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT max(experience_reward) FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT min(experience_reward) FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT sum(experience_reward) FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name FROM quests WHERE experience_reward > 100;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, quest_description FROM quests WHERE quest_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name, experience_reward FROM quests WHERE quest_name LIKE '%defeat%';",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name, experience_reward FROM quests WHERE quest_name LIKE '%boss%' AND experience_reward > 500;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name, quest_description FROM quests WHERE experience_reward BETWEEN 200 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_id, mission_name FROM missions WHERE difficulty_level < 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM missions WHERE mission_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_id, mission_name, difficulty_level FROM missions WHERE mission_type = 'stealth';",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_id, mission_name, difficulty_level FROM missions WHERE mission_type = 'combat' AND difficulty_level >= 5;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT mission_id, mission_name, mission_type FROM missions WHERE difficulty_level BETWEEN 3 AND 6;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT player_id, quest_id, mission_id FROM player_progress WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_name, mission_name FROM player_progress JOIN quests ON player_progress.quest_id = quests.quest_id JOIN missions ON player_progress.mission_id = missions.mission_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT quest_id, quest_name, mission_name FROM player_progress JOIN quests ON player_progress.quest_id = quests.quest_id JOIN missions ON player_progress.mission_id = missions.mission_id;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT p.player_id, q.quest_name, m.mission_name FROM player_progress p JOIN quests q ON p.quest_id = q.quest_id JOIN missions m ON p.mission_id = m.mission_id WHERE p.completion_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT p.player_id, q.quest_name, m.mission_name FROM player_progress p JOIN quests q ON p.quest_id = q.quest_id JOIN missions m ON p.mission_id = m.mission_id WHERE q.experience_reward > m.difficulty_level;",
  "### TABLEDATA\n\nCREATE TABLE quests (\n  quest_id INT PRIMARY KEY,\n  quest_name VARCHAR(255) NOT NULL,\n  quest_description TEXT,\n  experience_reward INT\n);\n\nCREATE TABLE missions (\n  mission_id INT PRIMARY KEY,\n  mission_name VARCHAR(255) NOT NULL,\n  mission_type VARCHAR(50),\n  difficulty_level INT\n);\n\nCREATE TABLE player_progress (\n  player_id INT,\n  quest_id INT,\n  mission_id INT,\n  completion_status BOOLEAN,\n  FOREIGN KEY (quest_id) REFERENCES quests(quest_id),\n  FOREIGN KEY (mission_id) REFERENCES missions(mission_id)\n);\n\n### STATEMENT\n\nSELECT p.player_id, q.quest_name, m.mission_name FROM player_progress p JOIN quests q ON p.quest_id = q.quest_id JOIN missions m ON p.mission_id = m.mission_id WHERE q.quest_id = 2 AND m.mission_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM players;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level FROM players;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT quest_name, difficulty FROM quests;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT mission_name, reward FROM missions;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pid, qid, completed FROM player_progress;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, reward FROM players JOIN missions ON players.pid = missions.mid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, mission_name FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE players.level > 5;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE quests.difficulty = 'Hard';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE player_progress.completed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE player_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE quest_name IN ('Quest1', 'Quest2');",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE player_name = 'John' AND quests.difficulty = 'Easy';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty, mission_name, reward, completed FROM players JOIN quests ON players.pid = quests.qid JOIN player_progress ON players.pid = player_progress.pid JOIN missions ON player_progress.mid = missions.mid WHERE quests.difficulty <> 'Easy';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level FROM players WHERE level > 10;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT quest_name, difficulty FROM quests WHERE difficulty = 'Hard';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT mission_name, reward FROM missions WHERE reward LIKE '%gold%';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, completed FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE completed = true;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT player_name FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE q.difficulty = 'Hard';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE level > 5 AND difficulty = 'Medium';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, mission_name FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid JOIN missions m ON pp.mid = m.mid WHERE p.level > 10;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, completion_status FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE completion_status = 'Incomplete';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, COUNT(qid) AS total_quests FROM players p JOIN player_progress pp ON p.pid = pp.pid GROUP BY player_name;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, AVG(level) AS average_level FROM players GROUP BY player_name HAVING AVG(level) > 15;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, reward FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN missions m ON pp.mid = m.mid WHERE reward = 'XP';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE q.difficulty IN ('Medium', 'Hard');",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, completion_date FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE completion_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, reward FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN missions m ON pp.mid = m.mid WHERE reward NOT LIKE '%Gold%';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, COUNT(DISTINCT qid) AS total_unique_quests FROM players p JOIN player_progress pp ON p.pid = pp.pid;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level, quest_name, difficulty FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid WHERE level >= 10 AND (difficulty = 'Medium' OR difficulty = 'Hard');",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, reward FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN missions m ON pp.mid = m.mid GROUP BY player_name, quest_name HAVING COUNT(reward) > 1;",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, completion_status, reward FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN quests q ON pp.qid = q.qid JOIN missions m ON pp.mid = m.mid WHERE completion_status = 'Complete' AND reward = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, level FROM players p WHERE EXISTS (SELECT 1 FROM player_progress pp WHERE pp.pid = p.pid AND pp.completed = true);",
  "### TABLEDATA\n\nCREATE TABLE players (\n\tpid INT PRIMARY KEY,\n\tplayer_name VARCHAR(50),\n\tlevel INT\n);\n\nCREATE TABLE quests (\n\tqid INT PRIMARY KEY,\n\tquest_name VARCHAR(50),\n\tdifficulty VARCHAR(20)\n);\n\nCREATE TABLE missions (\n\tmid INT PRIMARY KEY,\n\tmission_name VARCHAR(50),\n\treward VARCHAR(50)\n);\n\nCREATE TABLE player_progress (\n\tppid INT PRIMARY KEY,\n\tpid INT,\n\tqid INT,\n\tmid INT,\n\tcompleted BOOLEAN\n);\n\n### STATEMENT\n\nSELECT player_name, quest_name, reward FROM players p JOIN player_progress pp ON p.pid = pp.pid JOIN missions m ON pp.mid = m.mid WHERE p.level >= 20 AND reward LIKE '%XP%';",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM player;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, level FROM player;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest_name, quest_description FROM quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM mission;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM mission;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_id, quest_id FROM player_quest_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_id, mission_id, completed FROM player_mission_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, player.level, quest.quest_name, quest.quest_description FROM player, quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, player.level, mission.mission_name, mission.mission_type FROM player, mission;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, player.level, quest.quest_name, quest.quest_difficulty FROM player, quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, player.level, mission.mission_name, mission.mission_reward FROM player, mission;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest.quest_name, player_quest_progress.progress_percentage FROM quest, player_quest_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT mission.mission_name, player_mission_progress.completed FROM mission, player_mission_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, quest.quest_name, player_quest_progress.progress_percentage FROM player, quest, player_quest_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, mission.mission_name, player_mission_progress.completed FROM player, mission, player_mission_progress;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM player WHERE level > 5;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM quest WHERE quest_difficulty < 3;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM mission WHERE mission_reward > 100;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, player.level, quest.quest_name, quest.quest_description, player_quest_progress.progress_percentage FROM player, quest, player_quest_progress WHERE player.player_id = player_quest_progress.player_id AND quest.quest_id = player_quest_progress.quest_id AND player.level > 8;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM player;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, level FROM player WHERE level > 10;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, experience FROM player WHERE experience BETWEEN 1000 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, level FROM player ORDER BY level DESC;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, COUNT(*) AS total_quests FROM player JOIN player_quest_progress ON player.player_id = player_quest_progress.player_id GROUP BY player_name;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest_name, quest_description FROM quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest_name, quest_difficulty FROM quest WHERE quest_difficulty < 3;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest_name, COUNT(*) AS total_players FROM quest JOIN player_quest_progress ON quest.quest_id = player_quest_progress.quest_id GROUP BY quest_name;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT mission_name, mission_type FROM mission;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT mission_name, mission_reward FROM mission WHERE mission_reward > 500;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT mission_name, COUNT(*) AS total_players FROM mission JOIN player_mission_progress ON mission.mission_id = player_mission_progress.mission_id GROUP BY mission_name;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, mission.mission_name FROM player JOIN player_mission_progress ON player.player_id = player_mission_progress.player_id JOIN mission ON player_mission_progress.mission_id = mission.mission_id WHERE player.player_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, quest.quest_name FROM player JOIN player_quest_progress ON player.player_id = player_quest_progress.player_id JOIN quest ON player_quest_progress.quest_id = quest.quest_id WHERE player.player_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, mission.mission_name FROM player JOIN player_mission_progress ON player.player_id = player_mission_progress.player_id JOIN mission ON player_mission_progress.mission_id = mission.mission_id WHERE player.player_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player.player_name, SUM(progress_percentage) AS total_progress FROM player JOIN player_quest_progress ON player.player_id = player_quest_progress.player_id GROUP BY player.player_name;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT quest_id) AS total_quests_completed FROM player_quest_progress WHERE progress_percentage = 100;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT AVG(quest_difficulty) AS average_difficulty FROM quest;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT player_name, level, experience FROM player WHERE player_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT quest.quest_name, quest.quest_description, COUNT(player_id) AS total_players FROM quest JOIN player_quest_progress ON quest.quest_id = player_quest_progress.quest_id GROUP BY quest.quest_name, quest.quest_description;",
  "### TABLEDATA\n\nCREATE TABLE player (player_id INT PRIMARY KEY, player_name VARCHAR(50), level INT, experience INT);\n\nCREATE TABLE quest (quest_id INT PRIMARY KEY, quest_name VARCHAR(50), quest_description TEXT, quest_difficulty INT);\n\nCREATE TABLE mission (mission_id INT PRIMARY KEY, mission_name VARCHAR(50), mission_type VARCHAR(50), mission_reward INT);\n\nCREATE TABLE player_quest_progress (player_id INT, quest_id INT, progress_percentage FLOAT, PRIMARY KEY (player_id, quest_id));\n\nCREATE TABLE player_mission_progress (player_id INT, mission_id INT, completed BOOLEAN, PRIMARY KEY (player_id, mission_id));\n\n### STATEMENT\n\nSELECT * FROM player WHERE player_id IN (SELECT player_id FROM player_quest_progress WHERE progress_percentage = 100);"
]