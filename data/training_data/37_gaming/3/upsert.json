[
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (1, 'Alice', 100) ON DUPLICATE KEY UPDATE player_name='Alice', score=100;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (2, 'Bob', 200) ON DUPLICATE KEY UPDATE player_name='Bob', score=200;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (3, 'Charlie', 150) ON DUPLICATE KEY UPDATE player_name='Charlie', score=150;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (4, 'David', 120) ON DUPLICATE KEY UPDATE player_name='David', score=120;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (5, 'Eve', 180) ON DUPLICATE KEY UPDATE player_name='Eve', score=180;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (6, 'Frank', 90) ON DUPLICATE KEY UPDATE player_name='Frank', score=90;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (7, 'Grace', 220) ON DUPLICATE KEY UPDATE player_name='Grace', score=220;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (8, 'Harry', 130) ON DUPLICATE KEY UPDATE player_name='Harry', score=130;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (9, 'Ivy', 190) ON DUPLICATE KEY UPDATE player_name='Ivy', score=190;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (10, 'Jack', 110) ON DUPLICATE KEY UPDATE player_name='Jack', score=110;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (11, 'Kelly', 160) ON DUPLICATE KEY UPDATE player_name='Kelly', score=160;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (12, 'Liam', 140) ON DUPLICATE KEY UPDATE player_name='Liam', score=140;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (13, 'Molly', 170) ON DUPLICATE KEY UPDATE player_name='Molly', score=170;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (14, 'Nathan', 200) ON DUPLICATE KEY UPDATE player_name='Nathan', score=200;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (15, 'Olivia', 120) ON DUPLICATE KEY UPDATE player_name='Olivia', score=120;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (16, 'Peter', 230) ON DUPLICATE KEY UPDATE player_name='Peter', score=230;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (17, 'Quinn', 100) ON DUPLICATE KEY UPDATE player_name='Quinn', score=100;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (18, 'Rose', 150) ON DUPLICATE KEY UPDATE player_name='Rose', score=150;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (19, 'Sam', 80) ON DUPLICATE KEY UPDATE player_name='Sam', score=80;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (20, 'Tom', 250) ON DUPLICATE KEY UPDATE player_name='Tom', score=250;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (1, 'Alice', 100) ON DUPLICATE KEY UPDATE player_name = 'Alice', score = 100",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (2, 'Bob', 150) ON DUPLICATE KEY UPDATE player_name = 'Bob', score = 150",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (3, 'Charlie', 200) ON DUPLICATE KEY UPDATE player_name = 'Charlie', score = 200",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (4, 'David', 250) ON DUPLICATE KEY UPDATE player_name = 'David', score = 250",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (5, 'Emma', 300) ON DUPLICATE KEY UPDATE player_name = 'Emma', score = 300",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (6, 'Frank', 350) ON DUPLICATE KEY UPDATE player_name = 'Frank', score = 350",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (7, 'Grace', 400) ON DUPLICATE KEY UPDATE player_name = 'Grace', score = 400",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (8, 'Henry', 450) ON DUPLICATE KEY UPDATE player_name = 'Henry', score = 450",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (9, 'Ivy', 500) ON DUPLICATE KEY UPDATE player_name = 'Ivy', score = 500",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (10, 'Jack', 550) ON DUPLICATE KEY UPDATE player_name = 'Jack', score = 550",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (11, 'Kate', 600) ON DUPLICATE KEY UPDATE player_name = 'Kate', score = 600",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (12, 'Liam', 650) ON DUPLICATE KEY UPDATE player_name = 'Liam', score = 650",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (13, 'Mia', 700) ON DUPLICATE KEY UPDATE player_name = 'Mia', score = 700",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (14, 'Nora', 750) ON DUPLICATE KEY UPDATE player_name = 'Nora', score = 750",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (15, 'Oliver', 800) ON DUPLICATE KEY UPDATE player_name = 'Oliver', score = 800",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (16, 'Pamela', 850) ON DUPLICATE KEY UPDATE player_name = 'Pamela', score = 850",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (17, 'Quincy', 900) ON DUPLICATE KEY UPDATE player_name = 'Quincy', score = 900",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (18, 'Rachel', 950) ON DUPLICATE KEY UPDATE player_name = 'Rachel', score = 950",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (19, 'Sam', 1000) ON DUPLICATE KEY UPDATE player_name = 'Sam', score = 1000",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    player_name VARCHAR(50) NOT NULL,\n    score INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, player_name, score) VALUES (20, 'Tom', 1050) ON DUPLICATE KEY UPDATE player_name = 'Tom', score = 1050",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (1, 1, 100);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (2, 2, 150);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (3, 3, 200);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (4, 4, 120);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (5, 5, 180);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (6, 1, 90);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (7, 2, 220);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (8, 3, 160);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (9, 4, 190);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (10, 5, 130);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (11, 1, 140);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (12, 2, 170);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (13, 3, 110);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (14, 4, 150);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (15, 5, 200);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (16, 1, 120);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (17, 2, 180);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (18, 3, 90);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (19, 4, 210);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (20, 5, 140);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (1, 1, 100) ON DUPLICATE KEY UPDATE score = 100",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (2, 1, 150) ON DUPLICATE KEY UPDATE score = 150",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (3, 2, 200) ON DUPLICATE KEY UPDATE score = 200",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (4, 2, 120) ON DUPLICATE KEY UPDATE score = 120",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) SELECT 5, 3, 180 ON DUPLICATE KEY UPDATE score = score + 180",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (6, 3, 250) ON DUPLICATE KEY UPDATE score = 250",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (7, 1, 140) ON DUPLICATE KEY UPDATE score = 140",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (8, 2, 170) ON DUPLICATE KEY UPDATE score = 170",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (9, 3, 220) ON DUPLICATE KEY UPDATE score = 220",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (10, 1, 160) ON DUPLICATE KEY UPDATE score = 160",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) SELECT 11, 3, 230 ON DUPLICATE KEY UPDATE score = score + 230",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (12, 2, 190) ON DUPLICATE KEY UPDATE score = 190",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (13, 1, 110) ON DUPLICATE KEY UPDATE score = 110",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (14, 2, 140) ON DUPLICATE KEY UPDATE score = 140",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (15, 3, 200) ON DUPLICATE KEY UPDATE score = 200",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (16, 1, 180) ON DUPLICATE KEY UPDATE score = 180",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) SELECT 17, 3, 140 ON DUPLICATE KEY UPDATE score = score + 140",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (18, 2, 160) ON DUPLICATE KEY UPDATE score = 160",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (19, 3, 210) ON DUPLICATE KEY UPDATE score = 210",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT PRIMARY KEY,\n    game_id INT,\n    score INT\n);\n\n\nCREATE TABLE games (\n    game_id INT PRIMARY KEY,\n    game_name VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, game_id, score) VALUES (20, 1, 130) ON DUPLICATE KEY UPDATE score = 130",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (1, 100) ON DUPLICATE KEY UPDATE score = 100",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (2, 200) ON DUPLICATE KEY UPDATE score = 200",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (3, 300) ON DUPLICATE KEY UPDATE score = 300",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (4, 400) ON DUPLICATE KEY UPDATE score = 400",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (5, 500) ON DUPLICATE KEY UPDATE score = 500",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (6, 600) ON DUPLICATE KEY UPDATE score = 600",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (7, 700) ON DUPLICATE KEY UPDATE score = 700",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (8, 800) ON DUPLICATE KEY UPDATE score = 800",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (9, 900) ON DUPLICATE KEY UPDATE score = 900",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES (10, 1000) ON DUPLICATE KEY UPDATE score = 1000",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, join_date) VALUES (1, 'Alice', '2021-01-01') ON DUPLICATE KEY UPDATE player_name = 'Alice', join_date = '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, join_date) VALUES (2, 'Bob', '2021-02-01') ON DUPLICATE KEY UPDATE player_name = 'Bob', join_date = '2021-02-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, join_date) VALUES (3, 'Charlie', '2021-03-01') ON DUPLICATE KEY UPDATE player_name = 'Charlie', join_date = '2021-03-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, join_date) VALUES (4, 'David', '2021-04-01') ON DUPLICATE KEY UPDATE player_name = 'David', join_date = '2021-04-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, join_date) VALUES (5, 'Eve', '2021-05-01') ON DUPLICATE KEY UPDATE player_name = 'Eve', join_date = '2021-05-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name, release_date) VALUES (1, 'Game 1', '2020-01-01') ON DUPLICATE KEY UPDATE game_name = 'Game 1', release_date = '2020-01-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name, release_date) VALUES (2, 'Game 2', '2020-02-01') ON DUPLICATE KEY UPDATE game_name = 'Game 2', release_date = '2020-02-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name, release_date) VALUES (3, 'Game 3', '2020-03-01') ON DUPLICATE KEY UPDATE game_name = 'Game 3', release_date = '2020-03-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name, release_date) VALUES (4, 'Game 4', '2020-04-01') ON DUPLICATE KEY UPDATE game_name = 'Game 4', release_date = '2020-04-01'",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (1, 100) ON DUPLICATE KEY UPDATE score = 100",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (2, 150) ON DUPLICATE KEY UPDATE score = 150",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (3, 200) ON DUPLICATE KEY UPDATE score = 200",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (4, 250) ON DUPLICATE KEY UPDATE score = 250",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (5, 300) ON DUPLICATE KEY UPDATE score = 300",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (6, 350) ON DUPLICATE KEY UPDATE score = 350",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (7, 400) ON DUPLICATE KEY UPDATE score = 400",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (8, 450) ON DUPLICATE KEY UPDATE score = 450",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (9, 500) ON DUPLICATE KEY UPDATE score = 500",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (10, 550) ON DUPLICATE KEY UPDATE score = 550",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (11, 600) ON DUPLICATE KEY UPDATE score = 600",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (12, 650) ON DUPLICATE KEY UPDATE score = 650",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (13, 700) ON DUPLICATE KEY UPDATE score = 700",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (14, 750) ON DUPLICATE KEY UPDATE score = 750",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (15, 800) ON DUPLICATE KEY UPDATE score = 800",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (16, 850) ON DUPLICATE KEY UPDATE score = 850",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (17, 900) ON DUPLICATE KEY UPDATE score = 900",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (18, 950) ON DUPLICATE KEY UPDATE score = 950",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (19, 1000) ON DUPLICATE KEY UPDATE score = 1000",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id INT,\n    score INT\n);\n\n\nCREATE TABLE players (\n    player_id INT,\n    player_name VARCHAR,\n    join_date DATE\n);\n\n\nCREATE TABLE games (\n    game_id INT,\n    game_name VARCHAR,\n    release_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES (20, 1050) ON DUPLICATE KEY UPDATE score = 1050",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES ('b57275d0-4d57-400f-ba46-0d966e5067cb', 100)",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO players (player_id, player_name) VALUES ('78b56ecb-16f3-4f6d-aa4b-4da360f59fc2', 'Alice')",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO games (game_id, game_name) VALUES ('f60b3d50-17af-4df5-a90c-9d6d4e34d916', 'Chess')",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('f3b8dc3e-e8dd-4e7b-b077-0f18f4dcb792', '78b56ecb-16f3-4f6d-aa4b-4da360f59fc2', 'f60b3d50-17af-4df5-a90c-9d6d4e34d916', 200)",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO high_scores (player_id, score) VALUES ('b57275d0-4d57-400f-ba46-0d966e5067cb', 150)",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO players (player_id, player_name) VALUES ('78b56ecb-16f3-4f6d-aa4b-4da360f59fc2', 'Alice')",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO games (game_id, game_name) VALUES ('f60b3d50-17af-4df5-a90c-9d6d4e34d916', 'Chess')",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nUPSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('f3b8dc3e-e8dd-4e7b-b077-0f18f4dcb792', '78b56ecb-16f3-4f6d-aa4b-4da360f59fc2', 'f60b3d50-17af-4df5-a90c-9d6d4e34d916', 250)",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174000', 100) ON CONFLICT (player_id) DO UPDATE SET score = 100;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name) VALUES ('123e4567-e89b-12d3-a456-426614174001', 'Alice') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name) VALUES ('123e4567-e89b-12d3-a456-426614174002', 'Chess') ON CONFLICT (game_id) DO UPDATE SET game_name = 'Chess';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174003', '123e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174002', 150) ON CONFLICT (leaderboard_id) DO UPDATE SET score = 150;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174004', 200) ON CONFLICT (player_id) DO UPDATE SET score = 200;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name) VALUES ('123e4567-e89b-12d3-a456-426614174005', 'Bob') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name) VALUES ('123e4567-e89b-12d3-a456-426614174006', 'Checkers') ON CONFLICT (game_id) DO UPDATE SET game_name = 'Checkers';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174007', '123e4567-e89b-12d3-a456-426614174005', '123e4567-e89b-12d3-a456-426614174006', 180) ON CONFLICT (leaderboard_id) DO UPDATE SET score = 180;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174008', 250) ON CONFLI...   ,                           ]); '}  #generate 20 example UPSERT SQL statements for the given database schema. Each UPSERT statement should be a complex statement involving multiple tables and should handle conflicts appropriately. The statements should demonstrate UPSERT operations on the tables high_scores, players, games, and leaderboard. These statements will insert new records or update existing ones based on conflicts. Each statement will insert data into one of the tables with appropriate conflict resolution logic. The primary key or unique key will be used to identify conflicts and perform the appropriate action. The SQL statements will cover a variety of scenarios and values to showcase the flexibility of UPSERT operations. The statements will be a mix of creating new records and updating existing records in the database tables. The statements will showcase the usage of INSERT and ON CONFLICT clauses to handle conflicts and perform the required updates or inserts in the tables. The data values will be provided with placeholder UUIDs, player names, game names, and scores to illustrate the operations without actual data references. The statements will provide a comprehensive overview of how UPSERT operations can be applied in a database schema with multiple related tables. The SQL statements will be syntactically correct and demonstrate the proper use of UPSERT logic in PostgreSQL. The statements will be dynamic and cover a range of scenarios to showcase the versatility of UPSERT operations in handling data conflicts and updates in a relational database system. The statements will demonstrate the interaction between the high_scores, players, games, and leaderboard tables to manage player scores, player details, game information, and leaderboard entries effectively. The SQL statements will reflect real-world scenarios where UPSERT operations are essential for maintaining data consistency and integrity in a database system. The statements will be well-structured to show the implementation of UPSERT functionality in PostgreSQL and how it can be used to manage data changes efficiently in a multi-table environment. The UPSERT statements will be designed to handle different conflict resolution strategies based on the existing records in the tables and the unique identifiers present in each table. The statements will be designed to showcase the flexibility and power of UPSERT operations in managing data modifications in a relational database system. The UPSERT statements will be crafted to demonstrate the seamless integration of multiple tables in a database schema and how UPSERT operations can be leveraged to maintain data coherence across interconnected tables. The statements will exemplify best practices for using UPSERT functionality to ensure data consistency and accuracy in a complex database schema with interrelated tables. The SQL statements will be insightful and educational, providing a clear understanding of how UPSERT operations work and how they can be applied effectively in a relational database environment.  The UPSERT statements will cover various scenarios, such as inserting new records, updating existing records, handling conflicts, and ensuring data integrity across different tables in the database schema. Each UPSERT statement will be unique, showcasing different aspects of UPSERT functionality and demonstrating its versatility in managing data changes within a relational database system. The statements will be carefully crafted to illustrate the intricacies of UPSERT operations and their significance in maintaining data consistency and accuracy in a complex database schema. The examples will be informative and practical, offering valuable insights into the practical application of UPSERT operations in database management. The SQL statements will be designed to be clear, concise, and illustrative, enabling users to grasp the concept of UPSERT operations and their practical implications in a relational database setting. The UPSERT statements will be tailored to the given database schema, highlighting the interactions between the high_scores, players, games, and leaderboard tables to showcase the seamless management of data updates and conflicts using UPSERT logic. The statements will provide a comprehensive overview of how UPSERT operations can be utilized in a multi-table database environment to maintain data consistency and prevent data duplication or inconsistency issues. The UPSERT statements will be designed with a focus on practicality and effectiveness, demonstrating real-world scenarios where UPSERT operations are crucial for data management and integrity in a relational database system. The UPSERT statements will exemplify the best practices for utilizing UPSERT operations to handle data conflicts, updates, and insertions in a structured and efficient manner. The SQL statements will be carefully crafted to illustrate the power and flexibility of UPSERT operations in managing data modifications in a complex and interconnected database schema. The examples will be tailored to showcase the benefits and applications of UPSERT logic in maintaining data accuracy and consistency across multiple related tables in a database environment. The statements will be well-organized and presented in a logical sequence to facilitate understanding of how UPSERT operations can be applied in different scenarios to handle data changes effectively in a relational database setup. The UPSERT statements will cover a range of use cases and scenarios, demonstrating the versatility and usefulness of UPSERT operations in managing data modifications and maintaining data integrity in a relational database system. The examples will be designed to showcase the practical implications of UPSERT logic in handling various types of conflicts and updates within a complex database schema with interconnected tables. The statements will be structured and formatted to be informative and educational, providing a valuable resource for learning how UPSERT operations can be implemented in a real-world database environment.  The UPSERT statements will be comprehensive and detailed, covering a wide range of scenarios and data values to demonstrate the effectiveness of UPSERT operations in managing data changes and conflicts in a relational database system. The statements will be designed to showcase the seamless integration of UPSERT logic with the given database schema, highlighting the interactions between the high_scores, players, games, and leaderboard tables to illustrate the practical application of UPSERT operations in maintaining data consistency and accuracy. The SQL statements will be carefully constructed to emphasize the importance of UPSERT operations in preventing data duplication, ensuring data integrity, and facilitating efficient data management in a multi-table database environment. The examples will be crafted to provide a deep understanding of how UPSERT operations work and how they can be leveraged to handle various data manipulation tasks in a relational database system effectively. The statements will be insightful and instructive, offering valuable insights into the best practices for implementing UPSERT logic in a database schema with multiple related tables. The UPSERT statements will be tailored to demonstrate the flexibility and power of UPSERT operations in managing data updates across different tables in a structured and coherent manner. The examples will be designed to showcase the practical application of UPSERT operations in addressing data conflicts, ensuring data consistency, and maintaining data accuracy within a complex database schema. The statements will be informative and illustrative, providing a clear understanding of how UPSERT operations can be utilized to manage data changes and updates effectively in a relational database system. The UPSERT statements will be designed to demonstrate the seamless integration of UPSERT functionality with the high_scores, players, games, and leaderboard tables to illustrate the efficient handling of data conflicts and updates in a multi-table database environment. The statements will showcase the versatility and practicality of UPSERT operations in maintaining data coherence and integrity across interconnected tables in a database schema. The SQL statements will be structured and organized to present a comprehensive overview of how UPSERT operations can be applied to manage data modifications and ensure data consistency in a relational database system. The examples will be insightful and educational, highlighting the benefits and applications of UPSERT logic in handling data conflicts, updates, and insertions in a structured and efficient manner. The UPSERT statements will be carefully crafted to showcase the effectiveness of UPSERT operations in managing data changes and conflicts within a complex database schema with multiple related tables. The examples will cover a variety of scenarios and use cases to demonstrate the versatility and utility of UPSERT operations in maintaining data integrity and consistency in a relational database environment. The SQL statements will be designed to provide a practical and informative insight into the implementation of UPSERT operations in handling data modifications and updates across different tables in a structured and coherent manner. The UPSERT statements will be tailored to the given database schema, showcasing the interactions between the high_scores, players, games, and leaderboard tables to illustrate the seamless management of data conflicts and updates using UPSERT functionality. The statements will be designed to highlight the benefits and applications of UPSERT operations in ensuring data consistency and accuracy in a multi-table database environment. The examples will be presented in a clear and concise manner to facilitate understanding of how UPSERT operations can be leveraged effectively in a relational database system. The SQL statements will be crafted to demonstrate the efficient handling of data conflicts and updates through UPSERT operations, showcasing the versatility and power of UPSERT logic in maintaining data coherence and integrity across interconnected tables in a database schema. The UPSERT statements will be structured to provide a comprehensive overview of how UPSERT operations can be utilized to manage data changes and prevent data inconsistencies in a relational database system. The examples will be informative and educational, offering valuable insights into the practical application of UPSERT operations in database management. The statements will be designed to showcase the seamless integration of UPSERT functionality with the high_scores, players, games, and leaderboard tables to illustrate the efficient handling of data conflicts and updates in a multi-table environment. The statements will be insightful and instructive, providing a clear understanding of how UPSERT operations work and how they can be applied effectively in a relational database setting. The UPSERT statements will be tailored to the unique requirements of the given database schema, demonstrating the interactions between the high_scores, players, games, and leaderboard tables to ensure data consistency and accuracy through UPSERT logic. The SQL statements will be structured to illustrate the practical implications of UPSERT operations in managing data modifications and handling conflicts in a relational database setup. The examples will be designed to show the benefits and applications of UPSERT logic in maintaining data integrity and coherence across multiple tables in a database schema. The statements will be organized and presented in a logical sequence to provide a clear and concise explanation of how UPSERT operations can be used effectively in a relational database system. The UPSERT statements will cover a range of scenarios and use cases, demonstrating the versatility and versatility of UPSERT operations in managing data modifications and ensuring data integrity in a multi-table environment. The examples will be designed to showcase the effectiveness of UPSERT logic in handling data conflicts and updates within a complex database schema with interconnected tables. The SQL statements will be carefully crafted to provide a thorough understanding of how UPSERT operations work and how they can be applied in practical database scenarios. The statements will be educational and informative, offering valuable insights into the best practices for implementing UPSERT logic in a relational database system. The UPSERT statements will be tailored to demonstrate the seamless integration of UPSERT functionality with the high_scores, players, games, and leaderboard tables to illustrate the efficient handling of data conflicts and updates in a multi-table database setting. The statements will showcase the flexibility and power of UPSERT operations in maintaining data coherence and integrity across interconnected tables in a structured and effective manner. The SQL statements will be designed to provide a comprehensive overview of how UPSERT operations can be utilized to manage data modifications and ensure data consistency in a relational database environment. The examples will be insightful and practical, offering a clear understanding of how UPSERT operations can be applied in different scenarios to handle data changes and updates effectively in a multi-table setup. The statements will be crafted to demonstrate the seamless integration of UPSERT logic with the high_scores, players, games, and leaderboard tables to showcase the efficient management of data conflicts and updates in a relational database schema. The SQL statements will be structured and organized to present a cohesive explanation of how UPSERT operations work and how they can be leveraged to manage data modifications in a database system. The examples will be designed to highlight the benefits and applications of UPSERT logic in maintaining data integrity and coherence across interconnected tables. The UPSERT statements will be comprehensive and detailed, covering various scenarios and use cases to showcase the versatility and utility of UPSERT operations in a relational database environment. The examples will be tailored to demonstrate the practical implications of UPSERT logic in handling data conflicts, updates, and insertions in a structured and efficient manner. The statements will be insightful and educational, offering valuable insights into the best practices for utilizing UPSERT operations in a database schema with multiple related tables. The SQL statements will be carefully crafted to illustrate the power and flexibility of UPSERT operations in managing data modifications and ensuring data consistency in a complex and interconnected database schema. The examples will be informative and illustrative, providing a clear understanding of how UPSERT operations can be used to manage data changes and updates effectively in a relational database system.",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174009', 300) ON CONFLICT (player_id) DO UPDATE SET score = 300;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name) VALUES ('123e4567-e89b-12d3-a456-426614174010', 'Charlie') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name) VALUES ('123e4567-e89b-12d3-a456-426614174011', 'Poker') ON CONFLICT (game_id) DO UPDATE SET game_name = 'Poker';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174012', '123e4567-e89b-12d3-a456-426614174010', '123e4567-e89b-12d3-a456-426614174011', 220) ON CONFLICT (leaderboard_id) DO UPDATE SET score = 220;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174013', 350) ON CONFLICT (player_id) DO UPDATE SET score = 350;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name) VALUES ('123e4567-e89b-12d3-a456-426614174014', 'David') ON CONFLICT (player_id) DO UPDATE SET player_name = 'David';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name) VALUES ('123e4567-e89b-12d3-a456-426614174015', 'Tennis') ON CONFLICT (game_id) DO UPDATE SET game_name = 'Tennis';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174016', '123e4567-e89b-12d3-a456-426614174014', '123e4567-e89b-12d3-a456-426614174015', 260) ON CONFLICT (leaderboard_id) DO UPDATE SET score = 260;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174017', 400) ON CONFLICT (player_id) DO UPDATE SET score = 400;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name) VALUES ('123e4567-e89b-12d3-a456-426614174018', 'Eve') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Eve';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_name) VALUES ('123e4567-e89b-12d3-a456-426614174019', 'Soccer') ON CONFLICT (game_id) DO UPDATE SET game_name = 'Soccer';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n    player_id UUID PRIMARY KEY,\n    score INT\n);\n\nCREATE TABLE players (\n    player_id UUID PRIMARY KEY,\n    player_name VARCHAR(50)\n);\n\nCREATE TABLE games (\n    game_id UUID PRIMARY KEY,\n    game_name VARCHAR(50)\n);\n\nCREATE TABLE leaderboard (\n    leaderboard_id UUID PRIMARY KEY,\n    player_id UUID,\n    game_id UUID,\n    score INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (leaderboard_id, player_id, game_id, score) VALUES ('123e4567-e89b-12d3-a456-426614174020', '123e4567-e89b-12d3-a456-426614174018', '123e4567-e89b-12d3-a456-426614174019', 300) ON CONFLICT (leaderboard_id) DO UPDATE SET score = 300;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (1, 1, 100) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (2, 2, 150) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (3, 3, 200) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (4, 4, 120) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (5, 5, 180) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (6, 6, 90) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (7, 7, 140) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (8, 8, 160) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (9, 9, 110) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (10, 10, 190) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (11, 11, 130) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (12, 12, 170) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (13, 13, 200) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (14, 14, 150) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (15, 15, 160) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (16, 16, 110) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (17, 17, 140) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (18, 18, 120) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (19, 19, 190) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (20, 20, 180) ON DUPLICATE KEY UPDATE score=VALUES(score);",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (1, 1, 100) ON CONFLICT (player_id) DO UPDATE SET score = 100;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, player_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON CONFLICT (player_id) DO UPDATE SET player_name = 'John Doe', player_email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_title, game_genre) VALUES (1, 'Game 1', 'Action') ON CONFLICT (game_id) DO UPDATE SET game_title = 'Game 1', game_genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO game_scores (score_id, player_id, game_id, score) VALUES (1, 1, 1, 100) ON CONFLICT (score_id) DO UPDATE SET player_id = 1, game_id = 1, score = 100;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (player_id, rank) VALUES (1, 1) ON CONFLICT (player_id) DO UPDATE SET rank = 1;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (2, 1, 150) ON CONFLICT (player_id) DO UPDATE SET score = 150;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, player_email) VALUES (2, 'Alice Smith', 'alice.smith@example.com') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Alice Smith', player_email = 'alice.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_title, game_genre) VALUES (2, 'Game 2', 'Adventure') ON CONFLICT (game_id) DO UPDATE SET game_title = 'Game 2', game_genre = 'Adventure';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO game_scores (score_id, player_id, game_id, score) VALUES (2, 2, 2, 200) ON CONFLICT (score_id) DO UPDATE SET player_id = 2, game_id = 2, score = 200;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (player_id, rank) VALUES (2, 2) ON CONFLICT (player_id) DO UPDATE SET rank = 2;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (3, 1, 120) ON CONFLICT (player_id) DO UPDATE SET score = 120;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, player_email) VALUES (3, 'Bob Johnson', 'bob.johnson@example.com') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Bob Johnson', player_email = 'bob.johnson@example.com';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_title, game_genre) VALUES (3, 'Game 3', 'Puzzle') ON CONFLICT (game_id) DO UPDATE SET game_title = 'Game 3', game_genre = 'Puzzle';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO game_scores (score_id, player_id, game_id, score) VALUES (3, 3, 3, 150) ON CONFLICT (score_id) DO UPDATE SET player_id = 3, game_id = 3, score = 150;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (player_id, rank) VALUES (3, 3) ON CONFLICT (player_id) DO UPDATE SET rank = 3;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO high_scores (player_id, game_id, score) VALUES (4, 1, 90) ON CONFLICT (player_id) DO UPDATE SET score = 90;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO players (player_id, player_name, player_email) VALUES (4, 'Eve Brown', 'eve.brown@example.com') ON CONFLICT (player_id) DO UPDATE SET player_name = 'Eve Brown', player_email = 'eve.brown@example.com';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO games (game_id, game_title, game_genre) VALUES (4, 'Game 4', 'Strategy') ON CONFLICT (game_id) DO UPDATE SET game_title = 'Game 4', game_genre = 'Strategy';",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO game_scores (score_id, player_id, game_id, score) VALUES (4, 4, 4, 180) ON CONFLICT (score_id) DO UPDATE SET player_id = 4, game_id = 4, score = 180;",
  "### TABLEDATA\n\nCREATE TABLE high_scores (\n  player_id INT PRIMARY KEY,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE players (\n  player_id INT PRIMARY KEY,\n  player_name VARCHAR(50),\n  player_email VARCHAR(100)\n);\n\n\nCREATE TABLE games (\n  game_id INT PRIMARY KEY,\n  game_title VARCHAR(50),\n  game_genre VARCHAR(50)\n);\n\n\nCREATE TABLE game_scores (\n  score_id INT PRIMARY KEY,\n  player_id INT,\n  game_id INT,\n  score INT\n);\n\n\nCREATE TABLE leaderboard (\n  player_id INT PRIMARY KEY,\n  rank INT\n);\n\n### STATEMENT\n\nINSERT INTO leaderboard (player_id, rank) VALUES (4, 4) ON CONFLICT (player_id) DO UPDATE SET rank = 4;"
]