<t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>UPSERT INTO analytics_data (id, event_name, event_value, event_date) VALUES (1, 'Page View', 100, '2022-01-01') ON DUPLICATE KEY UPDATE event_value = 100;</stat><divider><t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>upsert into analytics_data (id, event_name, event_value, event_date) values (1, 'page view', 100, '2022-01-01') on duplicate key update event_value = 100;</stat><divider><t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>UPSERT INTO analytics_data (id, event_name, event_value, event_date) VALUES (2, 'Click Event', 50, '2022-02-15') ON DUPLICATE KEY UPDATE event_value = 50;</stat><divider><t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>upsert into analytics_data (id, event_name, event_value, event_date) values (2, 'click event', 50, '2022-02-15') on duplicate key update event_value = 50;</stat><divider><t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>UPSERT INTO analytics_data (id, event_name, event_value, event_date) VALUES (3, 'Conversion', 10, '2022-03-31') ON DUPLICATE KEY UPDATE event_value = 10;</stat><divider><t>CREATE TABLE analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_value INT, event_date DATE)</t><stat>upsert into analytics_data (id, event_name, event_value, event_date) values (3, 'conversion', 10, '2022-03-31') on duplicate key update event_value = 10;</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>INSERT INTO analytics_data (id, event_name, event_timestamp) VALUES (1, 'click', '2022-03-15 10:00:00') ON CONFLICT (id) DO UPDATE SET event_name = 'click', event_timestamp = '2022-03-15 10:00:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>insert into analytics_data (id, event_name, event_timestamp) values (1, 'click', '2022-03-15 10:00:00') on conflict (id) do update set event_name = 'click', event_timestamp = '2022-03-15 10:00:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>INSERT INTO analytics_data (id, event_name, event_timestamp) VALUES (1, 'click', '2022-03-15 10:00:00') ON CONFLICT (id) DO UPDATE SET event_name = 'click', event_timestamp = '2022-03-15 10:00:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>insert into analytics_data (id, event_name, event_timestamp) values (1, 'click', '2022-03-15 10:00:00') on conflict (id) do update set event_name = 'click', event_timestamp = '2022-03-15 10:00:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>INSERT INTO user_data (user_id, user_name, user_email) VALUES (1001, 'John Doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET user_name = 'John Doe', user_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>insert into user_data (user_id, user_name, user_email) values (1001, 'john doe', 'john.doe@example.com') on conflict (user_id) do update set user_name = 'john doe', user_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>INSERT INTO user_data (user_id, user_name, user_email) VALUES (1001, 'John Doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET user_name = 'John Doe', user_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>insert into user_data (user_id, user_name, user_email) values (1001, 'john doe', 'john.doe@example.com') on conflict (user_id) do update set user_name = 'john doe', user_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>INSERT INTO analytics_data (id, event_name, event_timestamp) VALUES (2, 'page_view', '2022-03-16 15:30:00') ON CONFLICT (id) DO UPDATE SET event_name = 'page_view', event_timestamp = '2022-03-16 15:30:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)

CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))</t><stat>insert into analytics_data (id, event_name, event_timestamp) values (2, 'page_view', '2022-03-16 15:30:00') on conflict (id) do update set event_name = 'page_view', event_timestamp = '2022-03-16 15:30:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>INSERT INTO analytics_data (id, event_name, event_timestamp) VALUES (2, 'page_view', '2022-03-16 15:30:00') ON CONFLICT (id) DO UPDATE SET event_name = 'page_view', event_timestamp = '2022-03-16 15:30:00';</stat><divider><t>CREATE TABLE IF NOT EXISTS user_data (user_id INT PRIMARY KEY, user_name VARCHAR(255), user_email VARCHAR(255))

CREATE TABLE IF NOT EXISTS analytics_data (id INT PRIMARY KEY, event_name VARCHAR(255), event_timestamp TIMESTAMP)</t><stat>insert into analytics_data (id, event_name, event_timestamp) values (2, 'page_view', '2022-03-16 15:30:00') on conflict (id) do update set event_name = 'page_view', event_timestamp = '2022-03-16 15:30:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO pageviews (id, page_url, timestamp) VALUES (1, 'example.com/page1', '2022-01-01 12:00:00') ON CONFLICT (id) DO UPDATE SET page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into pageviews (id, page_url, timestamp) values (1, 'example.com/page1', '2022-01-01 12:00:00') on conflict (id) do update set page_url='example.com/page1_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO users (user_id, username, email) VALUES (1, 'john_doe', 'john.doe@example.com') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into users (user_id, username, email) values (1, 'john_doe', 'john.doe@example.com') on conflict (user_id) do update set username='john_doe_updated', email='john.doe@example.com';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>INSERT INTO events (event_id, event_name, timestamp) VALUES (1, 'Pageview', '2022-01-01 12:00:00') ON CONFLICT (event_id) DO UPDATE SET event_name='Pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(50), timestamp TIMESTAMP);

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100));

CREATE TABLE pageviews (id INT PRIMARY KEY, page_url VARCHAR(255), timestamp TIMESTAMP);</t><stat>insert into events (event_id, event_name, timestamp) values (1, 'pageview', '2022-01-01 12:00:00') on conflict (event_id) do update set event_name='pageview_updated', timestamp='2022-01-01 12:00:00';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.users (user_id, username, email, created_at) VALUES (1, 'JohnDoe', 'johndoe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE username = 'JohnDoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.users (user_id, username, email, created_at) values (1, 'johndoe', 'johndoe@example.com', '2022-01-01') on duplicate key update username = 'johndoe_updated', email = 'johndoe_updated@example.com', created_at = '2022-02-01';</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.products (product_id, product_name, category, price) VALUES (1, 'ProductA', 'Electronics', 499.99) ON DUPLICATE KEY UPDATE product_name = 'ProductA_updated', category = 'Electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.products (product_id, product_name, category, price) values (1, 'producta', 'electronics', 499.99) on duplicate key update product_name = 'producta_updated', category = 'electronics_updated', price = 599.99;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>UPSERT INTO analytics.orders (order_id, user_id, product_id, order_date, quantity) VALUES (1, 1, 1, '2022-03-15', 2) ON DUPLICATE KEY UPDATE user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE analytics.sales ( sale_id INT PRIMARY KEY, product_id INT, sale_date DATE, revenue DECIMAL )

CREATE TABLE analytics.orders ( order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, quantity INT )

CREATE TABLE analytics.products ( product_id INT PRIMARY KEY, product_name STRING, category STRING, price DECIMAL )

CREATE TABLE analytics.users ( user_id INT PRIMARY KEY, username STRING, email STRING, created_at TIMESTAMP )</t><stat>upsert into analytics.orders (order_id, user_id, product_id, order_date, quantity) values (1, 1, 1, '2022-03-15', 2) on duplicate key update user_id = 1, product_id = 1, order_date = '2022-03-15', quantity = 3;</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>INSERT INTO Sales (id, product_id, amount, sales_date) VALUES (1, 1001, 500, '2022-01-10') ON CONFLICT (id) DO UPDATE SET product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>insert into sales (id, product_id, amount, sales_date) values (1, 1001, 500, '2022-01-10') on conflict (id) do update set product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>INSERT INTO Sales (id, product_id, amount, sales_date) VALUES (2, 1002, 700, '2022-01-15') ON CONFLICT (id) DO UPDATE SET product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>insert into sales (id, product_id, amount, sales_date) values (2, 1002, 700, '2022-01-15') on conflict (id) do update set product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>INSERT INTO Sales (id, product_id, amount, sales_date) VALUES (3, 1003, 900, '2022-01-20') ON CONFLICT (id) DO UPDATE SET product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat><divider><t>CREATE TABLE Sales (id INT PRIMARY KEY, product_id INT, amount INT, sales_date DATE)</t><stat>insert into sales (id, product_id, amount, sales_date) values (3, 1003, 900, '2022-01-20') on conflict (id) do update set product_id = excluded.product_id, amount = excluded.amount, sales_date = excluded.sales_date</stat>