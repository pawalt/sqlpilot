[
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM customer_feedback WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT feedback FROM customer_feedback WHERE sentiment_score > 0.5",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(sentiment_score) FROM customer_feedback",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, sentiment_score FROM customer_feedback WHERE feedback LIKE '%great%'",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM customer_feedback ORDER BY sentiment_score DESC",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM customer_feedback",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_feedback",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(sentiment_score) AS highest_score FROM customer_feedback GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS feedback_count FROM customer_feedback GROUP BY customer_id HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(sentiment_score) AS average_score, COUNT(*) AS total_feedback FROM customer_feedback",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM customer_feedback LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE sentiment_score BETWEEN 0.2 AND 0.8",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, sentiment_score FROM customer_feedback WHERE customer_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) AS average_score FROM customer_feedback GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT feedback, COUNT(*) AS feedback_count FROM customer_feedback GROUP BY feedback ORDER BY feedback_count DESC",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT feedback) AS unique_feedback_count FROM customer_feedback GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(sentiment_score) AS total_score FROM customer_feedback GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(sentiment_score) AS highest_score FROM customer_feedback GROUP BY customer_id ORDER BY highest_score DESC",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE sentiment_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_feedback FROM customer_feedback GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) AS avg_score FROM customer_feedback GROUP BY customer_id HAVING AVG(sentiment_score) > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE feedback LIKE '%great%';",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_feedback FROM customer_feedback WHERE sentiment_score < 0.3 GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(sentiment_score) AS max_score FROM customer_feedback GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE sentiment_score BETWEEN 0.4 AND 0.6;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(sentiment_score) AS total_score FROM customer_feedback GROUP BY customer_id HAVING SUM(sentiment_score) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE feedback IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) AS avg_score FROM customer_feedback WHERE sentiment_score < 0.5 GROUP BY customer_id HAVING AVG(sentiment_score) > 0.3;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback, sentiment_score FROM customer_feedback WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_feedback FROM customer_feedback WHERE feedback IS NOT NULL GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM customer_feedback;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE feedback LIKE '%poor%' OR sentiment_score < 0.3;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) AS avg_score FROM customer_feedback WHERE feedback IS NOT NULL GROUP BY customer_id HAVING AVG(sentiment_score) < 0.4;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE feedback IN ('Good', 'Excellent');",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(sentiment_score) AS max_score FROM customer_feedback WHERE feedback IS NOT NULL GROUP BY customer_id HAVING MAX(sentiment_score) > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE customer_id IN (SELECT customer_id FROM customer_details WHERE age > 30);",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_feedback FROM customer_feedback WHERE customer_id IN (SELECT customer_id FROM customer_details WHERE gender = 'Female') GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_feedback (\n  customer_id INT,\n  feedback TEXT,\n  sentiment_score FLOAT\n)\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM customer_feedback WHERE sentiment_score = (SELECT MIN(sentiment_score) FROM customer_feedback);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE customer_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, feedback_text FROM feedback;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, sentiment_score FROM feedback WHERE sentiment_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, date_posted FROM feedback WHERE date_posted > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, f.sentiment_score  FROM customers c JOIN feedback f ON c.customer_id = f.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(f.feedback_id) as num_feedbacks FROM customers c LEFT JOIN feedback f ON c.customer_id = f.customer_id GROUP BY c.customer_name HAVING num_feedbacks > 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(f.sentiment_score) as avg_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(sentiment_score) as max_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MIN(f.sentiment_score) as min_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(f.sentiment_score) as total_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, f.sentiment_score, f.date_posted FROM customers c JOIN feedback f ON c.customer_id = f.customer_id ORDER BY f.date_posted DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(f.sentiment_score) as avg_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id WHERE f.date_posted > '2021-06-01' GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_name, f.feedback_text FROM customers c JOIN feedback f ON c.customer_id = f.customer_id WHERE f.feedback_text LIKE '%good%' OR f.feedback_text LIKE '%great%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(feedback_id) as num_feedbacks FROM customers c LEFT JOIN feedback f ON c.customer_id = f.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(sentiment_score) as total_sentiment_score FROM customers c JOIN feedback f ON c.customer_id = f.customer_id WHERE f.date_posted > '2021-01-01' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_id = '123';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone_number FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone_number FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(sentiment_score) AS total_sentiment_score FROM feedback GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(feedback_id) AS total_feedback_count FROM customers LEFT JOIN feedback ON customers.customer_id = feedback.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, AVG(sentiment_score) AS avg_sentiment_score FROM feedback GROUP BY customer_id HAVING AVG(sentiment_score) > 3.0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, feedback_text, date_posted FROM customers INNER JOIN feedback ON customers.customer_id = feedback.customer_id WHERE feedback.sentiment_score < 2.5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone_number, DATE(date_posted) AS date_posted FROM customers LEFT JOIN feedback ON customers.customer_id = feedback.customer_id WHERE sentiment_score > 4.0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, AVG(sentiment_score) AS avg_sentiment_score FROM feedback WHERE date_posted >= '2022-01-01' AND date_posted <= '2022-12-31' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, COUNT(feedback_id) AS total_feedback_count FROM customers INNER JOIN feedback ON customers.customer_id = feedback.customer_id WHERE customer_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, SUM(sentiment_score) AS total_sentiment_score FROM feedback WHERE date_posted >= '2022-01-01' AND date_posted <= '2022-06-30' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, feedback_text, sentiment_score, date_posted FROM customers LEFT JOIN feedback ON customers.customer_id = feedback.customer_id WHERE date_posted BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, COUNT(feedback_id) AS total_feedback_count FROM customers INNER JOIN feedback ON customers.customer_id = feedback.customer_id GROUP BY customer_id HAVING COUNT(feedback_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(sentiment_score) AS avg_sentiment_score FROM customers INNER JOIN feedback ON customers.customer_id = feedback.customer_id GROUP BY customer_name HAVING AVG(sentiment_score) < 3.0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, feedback_text, date_posted FROM customers INNER JOIN feedback ON customers.customer_id = feedback.customer_id WHERE feedback_text LIKE '%good%' OR feedback_text LIKE '%excellent%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone_number FROM customers WHERE customer_id IN (SELECT customer_id FROM feedback WHERE sentiment_score > 4.5);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, AVG(sentiment_score) AS avg_sentiment_score FROM feedback GROUP BY customer_id ORDER BY avg_sentiment_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name STRING,\n    email STRING,\n    phone_number STRING\n);\n\nCREATE TABLE feedback (\n    feedback_id UUID PRIMARY KEY,\n    customer_id UUID,\n    feedback_text STRING,\n    sentiment_score DOUBLE,\n    date_posted TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, SUM(sentiment_score) AS total_sentiment_score FROM feedback GROUP BY customer_id ORDER BY total_sentiment_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, rating FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT customer_id, feedback FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM review_sentiment;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT review_id, customer_id, sentiment_score FROM review_sentiment;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT review_text FROM review_sentiment;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM support_services;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_name, service_type FROM support_services;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_id, feedback_id FROM support_services;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, feedback_survey.rating, review_sentiment.sentiment_score FROM feedback_survey INNER JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.feedback, review_sentiment.review_text, support_services.service_name FROM feedback_survey INNER JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id INNER JOIN support_services ON feedback_survey.customer_id = support_services.feedback_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, review_sentiment.review_id, support_services.service_id, support_services.service_name FROM feedback_survey INNER JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id INNER JOIN support_services ON feedback_survey.customer_id = support_services.feedback_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, feedback_survey.rating, review_sentiment.sentiment_score, review_sentiment.review_text FROM feedback_survey LEFT JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, feedback_survey.rating, review_sentiment.sentiment_score, review_sentiment.review_text FROM feedback_survey RIGHT JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, feedback_survey.rating, review_sentiment.sentiment_score, review_sentiment.review_text FROM feedback_survey FULL JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT feedback_survey.survey_id, feedback_survey.rating, review_sentiment.sentiment_score, review_sentiment.review_text, support_services.service_name FROM feedback_survey INNER JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id INNER JOIN support_services ON feedback_survey.customer_id = support_services.feedback_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT AVG(rating) as average_rating FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT MAX(sentiment_score) as max_sentiment_score FROM review_sentiment;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT MIN(rating) as min_rating FROM feedback_survey;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT service_type FROM support_services;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM feedback_survey WHERE rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(rating) FROM feedback_survey GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT review_text, sentiment_score FROM review_sentiment WHERE sentiment_score < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, feedback FROM feedback_survey WHERE LENGTH(feedback) > 100;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_type, COUNT(service_id) FROM support_services GROUP BY service_type;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT review_text FROM review_sentiment WHERE sentiment_score > 0.7 ORDER BY sentiment_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM feedback_survey JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_name, feedback FROM support_services JOIN feedback_survey ON support_services.feedback_id = feedback_survey.survey_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_id, service_name, rating FROM support_services JOIN feedback_survey ON support_services.feedback_id = feedback_survey.survey_id WHERE rating < 3;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT review_text, sentiment_score FROM review_sentiment WHERE review_id IN (SELECT review_id FROM review_sentiment WHERE sentiment_score < 0.5);",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) FROM review_sentiment GROUP BY customer_id HAVING AVG(sentiment_score) > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT service_type FROM support_services ORDER BY service_type;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, rating, sentiment_score FROM feedback_survey JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, feedback, sentiment_score FROM feedback_survey JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id WHERE sentiment_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_type, AVG(rating) FROM support_services JOIN feedback_survey ON support_services.feedback_id = feedback_survey.survey_id GROUP BY service_type;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_name, feedback FROM support_services JOIN feedback_survey ON support_services.feedback_id = feedback_survey.survey_id WHERE feedback IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(rating) AS avg_rating, AVG(sentiment_score) AS avg_sentiment FROM feedback_survey JOIN review_sentiment ON feedback_survey.customer_id = review_sentiment.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM feedback_survey WHERE survey_id IN (SELECT survey_id FROM support_services WHERE service_type = 'Support');",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, rating, service_name FROM feedback_survey JOIN support_services ON feedback_survey.survey_id = support_services.feedback_id;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT survey_id, rating, service_type FROM feedback_survey JOIN support_services ON feedback_survey.survey_id = support_services.feedback_id WHERE rating <= 3;",
  "### TABLEDATA\n\nCREATE TABLE feedback_survey (\n  survey_id INT PRIMARY KEY,\n  customer_id INT,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE review_sentiment (\n  review_id INT PRIMARY KEY,\n  customer_id INT,\n  review_text TEXT,\n  sentiment_score FLOAT\n);\n\n\nCREATE TABLE support_services (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(50),\n  service_type VARCHAR(50),\n  feedback_id INT\n);\n\n### STATEMENT\n\nSELECT service_id, service_name, feedback FROM support_services JOIN feedback_survey ON support_services.feedback_id = feedback_survey.survey_id WHERE LENGTH(feedback) > 50;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT feedback_id, feedback_text FROM CustomerFeedback;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT customer_id, feedback_text FROM CustomerFeedback WHERE sentiment_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SurveyResponses;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT survey_id, survey_date FROM SurveyResponses;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT customer_id, satisfaction_score FROM SurveyResponses WHERE satisfaction_score < 3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT review_id, review_text FROM ReviewAnalysis;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT review_text, sentiment_score FROM ReviewAnalysis WHERE helpful_votes > 10;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SupportServices;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT service_id, service_name FROM SupportServices;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT service_name, support_rating FROM SupportServices WHERE support_rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT feedback_id, feedback_text, sentiment_score FROM CustomerFeedback WHERE sentiment_score > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT survey_id, survey_date, satisfaction_score FROM SurveyResponses WHERE satisfaction_score > 4;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT review_id, review_text, sentiment_score FROM ReviewAnalysis WHERE helpful_votes > 5;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT service_id, service_name, support_category FROM SupportServices WHERE support_rating < 3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback WHERE customer_id = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SurveyResponses WHERE customer_id = 'xyz456';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis WHERE review_id = '123abc';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SupportServices WHERE service_id = '456xyz';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback WHERE sentiment_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT feedback_id, customer_id FROM CustomerFeedback WHERE customer_id = '123456';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SurveyResponses WHERE satisfaction_score >= 8;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT survey_id, survey_date FROM SurveyResponses WHERE customer_id = '654321';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis WHERE helpful_votes > 10;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT review_id, review_text FROM ReviewAnalysis WHERE sentiment_score < 0.3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SupportServices WHERE support_rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT service_id, service_name FROM SupportServices WHERE support_category = 'Technical';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback JOIN SurveyResponses ON CustomerFeedback.customer_id = SurveyResponses.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis JOIN SupportServices ON ReviewAnalysis.sentiment_score > 0.6 AND SupportServices.support_rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback JOIN SurveyResponses ON CustomerFeedback.sentiment_score > 0.7 AND SurveyResponses.satisfaction_score >= 7;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis JOIN SupportServices ON ReviewAnalysis.helpful_votes > 5 AND SupportServices.support_rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT CustomerFeedback.customer_id, SurveyResponses.satisfaction_score FROM CustomerFeedback JOIN SurveyResponses ON CustomerFeedback.customer_id = SurveyResponses.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT CustomerFeedback.customer_id, CustomerFeedback.sentiment_score, SurveyResponses.satisfaction_score FROM CustomerFeedback JOIN SurveyResponses ON CustomerFeedback.customer_id = SurveyResponses.customer_id WHERE CustomerFeedback.sentiment_score > 0.5 AND SurveyResponses.satisfaction_score >= 8;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT CustomerFeedback.customer_id, ReviewAnalysis.sentiment_score, SupportServices.support_rating FROM CustomerFeedback JOIN ReviewAnalysis ON CustomerFeedback.customer_id = ReviewAnalysis.review_id JOIN SupportServices ON ReviewAnalysis.sentiment_score > 0.6 AND SupportServices.support_rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM CustomerFeedback WHERE feedback_text LIKE '%great%';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SurveyResponses WHERE survey_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM ReviewAnalysis WHERE review_text ILIKE '%excellent%';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT * FROM SupportServices WHERE support_name = '24/7 Support';",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM CustomerFeedback;",
  "### TABLEDATA\n\nCREATE TABLE CustomerFeedback ( \n    feedback_id UUID PRIMARY KEY, \n    customer_id UUID, \n    feedback_text TEXT, \n    sentiment_score FLOAT \n);\n\nCREATE TABLE SurveyResponses ( \n    survey_id UUID PRIMARY KEY, \n    customer_id UUID, \n    survey_date DATE, \n    satisfaction_score INT \n);\n\nCREATE TABLE ReviewAnalysis ( \n    review_id UUID PRIMARY KEY, \n    review_text TEXT, \n    sentiment_score FLOAT, \n    helpful_votes INT \n);\n\nCREATE TABLE SupportServices ( \n    service_id UUID PRIMARY KEY, \n    service_name TEXT, \n    support_category TEXT, \n    support_rating INT \n);\n\n### STATEMENT\n\nSELECT AVG(satisfaction_score) FROM SurveyResponses;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM surveys;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT survey_id, survey_date, rating FROM surveys;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT feedback FROM surveys WHERE rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM reviews;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, review_date, review_text FROM reviews;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, review_date FROM reviews WHERE rating < 3;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT email FROM customers WHERE customer_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_date, status FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT issue_description FROM support_tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM sentiment_analysis;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT analysis_id, sentiment_score, sentiment_label FROM sentiment_analysis;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, analysis_date FROM sentiment_analysis WHERE sentiment_score > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT survey_id, customer_id, survey_date FROM surveys WHERE rating >= 4;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT ticket_id, issue_description FROM support_tickets WHERE status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, sentiment_label FROM sentiment_analysis WHERE sentiment_label = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM reviews WHERE review_date BETWEEN '2022-01-01' AND '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM surveys WHERE rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, survey_date FROM surveys WHERE rating = 5;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM reviews WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'John');",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT survey_id, survey_date FROM surveys WHERE survey_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, review_date FROM reviews WHERE rating < 3 ORDER BY review_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_reviews FROM reviews GROUP BY customer_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE status = 'Open' AND issue_description LIKE '%network%';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, sentiment_score FROM sentiment_analysis WHERE sentiment_label = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(rating) AS avg_rating FROM surveys GROUP BY customer_id HAVING AVG(rating) > 4;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM surveys s JOIN customers c ON s.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, review_text FROM reviews r JOIN sentiment_analysis sa ON r.review_id = sa.review_id;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(*) AS total_tickets FROM customers c LEFT JOIN support_tickets st ON c.customer_id = st.customer_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT survey_id, rating, sentiment_label FROM surveys s JOIN sentiment_analysis sa ON s.survey_id = sa.review_id WHERE rating > 3 AND sentiment_label = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, AVG(rating) AS avg_rating FROM customers c JOIN surveys s ON c.customer_id = s.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT review_id, sentiment_score, analysis_date FROM sentiment_analysis sa LEFT JOIN reviews r ON sa.review_id = r.review_id ORDER BY analysis_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(rating) AS max_rating, MIN(rating) AS min_rating, AVG(rating) AS avg_rating FROM surveys;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM surveys WHERE rating < 3);",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(sentiment_score) AS avg_sentiment_score FROM reviews r JOIN sentiment_analysis sa ON r.review_id = sa.review_id GROUP BY customer_id HAVING AVG(sentiment_score) > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT survey_id, rating, feedback FROM surveys UNION SELECT NULL, NULL, issue_description FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE surveys (\n  survey_id INT,\n  customer_id INT,\n  survey_date DATE,\n  rating INT,\n  feedback TEXT\n);\n\n\nCREATE TABLE reviews (\n  review_id INT,\n  customer_id INT,\n  review_date DATE,\n  rating INT,\n  review_text TEXT\n);\n\n\nCREATE TABLE customers (\n  customer_id INT,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  email VARCHAR(100),\n  phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE support_tickets (\n  ticket_id INT,\n  customer_id INT,\n  ticket_date DATE,\n  issue_description TEXT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE sentiment_analysis (\n  analysis_id INT,\n  review_id INT,\n  sentiment_score DECIMAL(5,2),\n  sentiment_label VARCHAR(10),\n  analysis_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.first_name, c.last_name, COUNT(*) AS total_reviews FROM customers c JOIN reviews r ON c.customer_id = r.customer_id GROUP BY c.customer_id HAVING COUNT(*) > 2;"
]