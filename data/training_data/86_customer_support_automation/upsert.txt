<t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number, issue_description) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', 'Issue description 1')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, issue_description) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', 'issue description 1')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number, issue_description) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '456-789-0123', 'Issue description 2')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, issue_description) values (2, 'jane smith', 'jane.smith@example.com', '456-789-0123', 'issue description 2')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number, issue_description) VALUES (3, 'Alice Brown', 'alice.brown@example.com', '789-012-3456', 'Issue description 3')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), issue_description TEXT )</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, issue_description) values (3, 'alice brown', 'alice.brown@example.com', '789-012-3456', 'issue description 3')</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>UPSERT INTO Customer (customer_id, name, email) VALUES (1, 'Alice', 'alice@example.com') ON CONFLICT (customer_id) DO UPDATE SET name = excluded.name, email = excluded.email;</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>upsert into customer (customer_id, name, email) values (1, 'alice', 'alice@example.com') on conflict (customer_id) do update set name = excluded.name, email = excluded.email;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>UPSERT INTO Customer (customer_id, name, email) VALUES (1, 'Alice', 'alice@example.com') ON CONFLICT (customer_id) DO UPDATE SET name = excluded.name, email = excluded.email;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>upsert into customer (customer_id, name, email) values (1, 'alice', 'alice@example.com') on conflict (customer_id) do update set name = excluded.name, email = excluded.email;</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>UPSERT INTO Ticket (ticket_id, customer_id, issue_description, status) VALUES (1, 1, 'Internet not working', 'Open') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>upsert into ticket (ticket_id, customer_id, issue_description, status) values (1, 1, 'internet not working', 'open') on conflict (ticket_id) do update set customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>UPSERT INTO Ticket (ticket_id, customer_id, issue_description, status) VALUES (1, 1, 'Internet not working', 'Open') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>upsert into ticket (ticket_id, customer_id, issue_description, status) values (1, 1, 'internet not working', 'open') on conflict (ticket_id) do update set customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>UPSERT INTO Ticket (ticket_id, customer_id, issue_description, status) VALUES (2, 2, 'Printer not working', 'Open') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));

CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));</t><stat>upsert into ticket (ticket_id, customer_id, issue_description, status) values (2, 2, 'printer not working', 'open') on conflict (ticket_id) do update set customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>UPSERT INTO Ticket (ticket_id, customer_id, issue_description, status) VALUES (2, 2, 'Printer not working', 'Open') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE Ticket (ticket_id INT PRIMARY KEY, customer_id INT, issue_description TEXT, status VARCHAR(20));

CREATE TABLE Customer (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100));</t><stat>upsert into ticket (ticket_id, customer_id, issue_description, status) values (2, 2, 'printer not working', 'open') on conflict (ticket_id) do update set customer_id = excluded.customer_id, issue_description = excluded.issue_description, status = excluded.status;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO customers (customer_id, name, email, phone_number, created_at) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', NOW()) ON DUPLICATE KEY UPDATE name='John Doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=NOW();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into customers (customer_id, name, email, phone_number, created_at) values (1, 'john doe', 'john.doe@example.com', '123-456-7890', now()) on duplicate key update name='john doe', email='john.doe@example.com', phone_number='123-456-7890', created_at=now();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO tickets (ticket_id, customer_id, category, status, created_at, closed_at) VALUES (1, 1, 'Technical Support', 'Open', NOW(), NULL) ON DUPLICATE KEY UPDATE category='Technical Support', status='Open', created_at=NOW(), closed_at=NULL;</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into tickets (ticket_id, customer_id, category, status, created_at, closed_at) values (1, 1, 'technical support', 'open', now(), null) on duplicate key update category='technical support', status='open', created_at=now(), closed_at=null;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>INSERT INTO interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) VALUES (1, 1, 'Issue reported', 'Chat', NOW()) ON DUPLICATE KEY UPDATE message='Issue reported', interaction_type='Chat', interaction_time=NOW();</stat><divider><t>CREATE TABLE interactions (interaction_id INT PRIMARY KEY, ticket_id INT, message TEXT, interaction_type VARCHAR(20), interaction_time TIMESTAMP, FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)) ENGINE=InnoDB

CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT, category VARCHAR(50), status VARCHAR(20), created_at TIMESTAMP, closed_at TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)) ENGINE=InnoDB

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20), created_at TIMESTAMP) ENGINE=InnoDB</t><stat>insert into interactions (interaction_id, ticket_id, message, interaction_type, interaction_time) values (1, 1, 'issue reported', 'chat', now()) on duplicate key update message='issue reported', interaction_type='chat', interaction_time=now();</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on conflict (customer_id) do update set name = 'john doe', email = 'john.doe@example.com', phone_number = '123-456-7890';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO tickets (ticket_id, customer_id, issue_description) VALUES (1, 1, 'Issue with product delivery') ON CONFLICT (ticket_id) DO UPDATE SET customer_id = 1, issue_description = 'Issue with product delivery';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into tickets (ticket_id, customer_id, issue_description) values (1, 1, 'issue with product delivery') on conflict (ticket_id) do update set customer_id = 1, issue_description = 'issue with product delivery';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>UPSERT INTO agents (agent_id, name, email) VALUES (1, 'Agent Smith', 'agent.smith@example.com') ON CONFLICT (agent_id) DO UPDATE SET name = 'Agent Smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY,
    agent_id INT REFERENCES agents(agent_id),
    ticket_id INT REFERENCES tickets(ticket_id),
    assigned_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE agents (
    agent_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);


CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(20) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT NOW()
);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20)
);
</t><stat>upsert into agents (agent_id, name, email) values (1, 'agent smith', 'agent.smith@example.com') on conflict (agent_id) do update set name = 'agent smith', email = 'agent.smith@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email, customer_phone) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into customers (customer_id, customer_name, customer_email, customer_phone) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com', customer_phone = '123-456-7890';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) VALUES (1, 1, 'Example Ticket', 'This is an example ticket description.', 'Open') ON DUPLICATE KEY UPDATE ticket_subject = 'Example Ticket', ticket_description = 'This is an example ticket description.', ticket_status = 'Open';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into tickets (ticket_id, customer_id, ticket_subject, ticket_description, ticket_status) values (1, 1, 'example ticket', 'this is an example ticket description.', 'open') on duplicate key update ticket_subject = 'example ticket', ticket_description = 'this is an example ticket description.', ticket_status = 'open';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>UPSERT INTO agents (agent_id, agent_name, agent_email, agent_phone) VALUES (1, 'Agent Smith', 'agent.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE agent_name = 'Agent Smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat><divider><t>CREATE TABLE interactions (interaction_id INT, ticket_id INT, agent_id INT, interaction_timestamp TIMESTAMP, interaction_text TEXT);

CREATE TABLE departments (department_id INT, department_name VARCHAR(50));

CREATE TABLE agents (agent_id INT, agent_name VARCHAR(50), agent_email VARCHAR(100), agent_phone VARCHAR(15));

CREATE TABLE tickets (ticket_id INT, customer_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20));

CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50), customer_email VARCHAR(100), customer_phone VARCHAR(15));</t><stat>upsert into agents (agent_id, agent_name, agent_email, agent_phone) values (1, 'agent smith', 'agent.smith@example.com', '987-654-3210') on duplicate key update agent_name = 'agent smith', agent_email = 'agent.smith@example.com', agent_phone = '987-654-3210';</stat>