[
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_description FROM support_tickets WHERE agent_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT MAX(ticket_id) FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT MIN(ticket_id) FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT AVG(agent_id) FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT agent_id FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets ORDER BY ticket_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets ORDER BY agent_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE agent_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE status LIKE 'Closed%';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE agent_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_description LIKE '%issue%';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, status FROM support_tickets WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE status = 'Resolved' OR status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE agent_id = 1",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description FROM support_tickets WHERE status = 'Open'",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM support_tickets WHERE status = 'Closed'",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT agent_id FROM support_tickets",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, status FROM support_tickets WHERE status = 'Resolved'",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE agent_id IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT agent_id, COUNT(*) FROM support_tickets GROUP BY agent_id",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets ORDER BY ticket_id DESC",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT AVG(agent_id) AS avg_agent_id FROM support_tickets",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT MAX(ticket_id) AS max_ticket_id FROM support_tickets",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT MIN(ticket_id) AS min_ticket_id FROM support_tickets",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_description LIKE '%issue%'",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT agent_id, SUM(ticket_id) AS total_tickets FROM support_tickets GROUP BY agent_id",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE agent_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, AVG(agent_id) FROM support_tickets GROUP BY ticket_id",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT agent_id, COUNT(*) FROM support_tickets WHERE status = 'Open' GROUP BY agent_id",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE ticket_id > 10",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description FROM support_tickets WHERE ticket_id BETWEEN 5 AND 10",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT agent_id, COUNT(*) FROM support_tickets WHERE status = 'Closed' GROUP BY agent_id",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  agent_id INT,\n  status VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM support_tickets WHERE status = 'Open' OR status = 'Pending'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM agents WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE assigned_agent_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets ORDER BY title ASC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, email FROM agents WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM agents WHERE agent_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE description LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE assigned_agent_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, email FROM agents WHERE agent_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE status IN ('Open', 'InProgress');",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM agents WHERE name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE description LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE assigned_agent_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, email FROM agents WHERE name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE description LIKE '%issue%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, status FROM tickets WHERE assigned_agent_id <> '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets INNER JOIN agents ON tickets.assigned_agent_id = agents.agent_id WHERE tickets.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT title, description FROM tickets WHERE assigned_agent_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT ticket_id, title, agents.name AS agent_name FROM tickets INNER JOIN agents ON tickets.assigned_agent_id = agents.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_tickets FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(LENGTH(description)) AS avg_description_length FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT assigned_agent_id, COUNT(ticket_id) AS total_tickets_assigned FROM tickets GROUP BY assigned_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE title LIKE '%support%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE title IN ('Bug Report', 'Feature Request');",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, COUNT(ticket_id) AS total_tickets_assigned FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, COUNT(ticket_id) AS total_tickets_assigned FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_id HAVING COUNT(ticket_id) > 3;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, MAX(total_tickets_assigned) AS max_tickets_assigned FROM (SELECT agent_id, COUNT(ticket_id) AS total_tickets_assigned FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_id) AS agent_ticket_counts;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets ORDER BY title ASC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM tickets ORDER BY title DESC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, AVG(LENGTH(description)) AS avg_description_length FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, COUNT(ticket_id) AS total_tickets_assigned FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_id ORDER BY total_tickets_assigned DESC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT agent_id, name, COUNT(ticket_id) AS total_tickets_assigned FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id WHERE total_tickets_assigned > 1 GROUP BY agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT status, AVG(LENGTH(description)) AS avg_description_length FROM tickets GROUP BY status HAVING AVG(LENGTH(description)) >= 50;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_agents_with_tickets FROM agents WHERE agent_id IN (SELECT DISTINCT assigned_agent_id FROM tickets);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DATE_TRUNC('month', NOW()) AS current_month;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'Open',\n    assigned_agent_id UUID\n);\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT EXTRACT(MONTH FROM NOW()) AS current_month;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT ticket_description FROM tickets WHERE ticket_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM agents WHERE agent_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department FROM agents WHERE agent_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_status WHERE status_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT status_name FROM ticket_status WHERE status_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT ticket_description, assigned_agent_id FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department FROM agents WHERE department = 'Sales';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status LIKE '%Pending%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name FROM agents WHERE agent_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_status WHERE status_name = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT MAX(ticket_id) FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT MIN(agent_id) FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(ticket_id) FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT SUM(agent_id) FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT ticket_description FROM tickets WHERE status = 'Closed' AND assigned_agent_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT ticket_description, status_name FROM tickets JOIN ticket_status ON tickets.status = ticket_status.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT a.agent_name, t.ticket_description FROM agents a INNER JOIN tickets t ON a.agent_id = t.assigned_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT t.ticket_description, s.status_name FROM tickets t LEFT JOIN ticket_status s ON t.status = s.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets JOIN agents ON tickets.assigned_agent_id = agents.agent_id WHERE tickets.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description, agent_name, status_name FROM tickets JOIN agents ON tickets.assigned_agent_id = agents.agent_id JOIN ticket_status ON tickets.status = ticket_status.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department HAVING COUNT(ticket_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, AVG(tickets.ticket_id) AS avg_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, MAX(tickets.ticket_id) AS max_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, MIN(tickets.ticket_id) AS min_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, SUM(tickets.ticket_id) AS total_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, AVG(tickets.ticket_id) AS avg_ticket_id, MAX(tickets.ticket_id) AS max_ticket_id, MIN(tickets.ticket_id) AS min_ticket_id, SUM(tickets.ticket_id) AS total_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id GROUP BY agent_name, department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name GROUP BY agent_name, department, status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name GROUP BY agent_name, department, status_name HAVING COUNT(ticket_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE tickets.ticket_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE agent_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE agent_id = 1 AND tickets.status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE agent_id = 1 OR agent_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, COUNT(ticket_id) AS total_tickets FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE agent_id IN (1, 2);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, SUM(ticket_id) AS total_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name WHERE agent_id = 1 GROUP BY agent_name, department, status_name HAVING SUM(ticket_id) > 10;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, MAX(ticket_id) AS max_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name GROUP BY agent_name, department, status_name HAVING MAX(ticket_id) > 100;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  ticket_description TEXT,\n  assigned_agent_id INT,\n  status VARCHAR(20)\n);\n\n\nCREATE TABLE agents (\n  agent_id INT PRIMARY KEY,\n  agent_name VARCHAR(50),\n  department VARCHAR(50)\n);\n\n\nCREATE TABLE ticket_status (\n  status_id INT PRIMARY KEY,\n  status_name VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT agent_name, department, status_name, AVG(ticket_id) AS avg_ticket_id FROM agents LEFT JOIN tickets ON agents.agent_id = tickets.assigned_agent_id LEFT JOIN ticket_status ON tickets.status = ticket_status.status_name GROUP BY agent_name, department, status_name HAVING AVG(ticket_id) > 50;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, subject FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT description FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT agent_id, name FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT email FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT assignment_id, ticket_id, agent_id FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT assigned_timestamp FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT status_id, status_name FROM ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT subject, status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT name, email FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT assignment_id, ticket_id, agent_id, assigned_timestamp FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT status_id FROM ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, agent_id FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, subject, description, status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT agent_id, name, email FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, agent_id, assigned_timestamp FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT status_name FROM ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, subject FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT agent_id, name FROM agents WHERE email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_tickets FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.subject, a.name AS agent_name FROM tickets t INNER JOIN agents a ON t.agent_id = a.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, COUNT(*) AS total_assignments FROM tickets t INNER JOIN assignments a ON t.ticket_id = a.ticket_id GROUP BY t.subject;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, a.name AS agent_name FROM tickets t LEFT JOIN assignments a ON t.ticket_id = a.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, ts.status_name FROM tickets t INNER JOIN ticket_status ts ON t.status = ts.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, COUNT(*) AS total_assignments FROM tickets t WHERE NOT EXISTS (SELECT * FROM assignments a WHERE a.ticket_id = t.ticket_id);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, MAX(a.assigned_timestamp) AS latest_assignment FROM tickets t INNER JOIN assignments a ON t.ticket_id = a.ticket_id GROUP BY t.subject;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT a.name AS agent_name, AVG(a.assigned_timestamp) AS avg_assignment_time FROM assignments a INNER JOIN agents ag ON a.agent_id = ag.agent_id GROUP BY a.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, a.name AS agent_name, a.email FROM tickets t INNER JOIN agents a ON t.agent_id = a.agent_id WHERE t.status = (SELECT status_name FROM ticket_status WHERE status_name = 'Closed');",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, ts.status_name, COUNT(*) AS total_assignments FROM tickets t INNER JOIN ticket_status ts ON t.status = ts.status_name INNER JOIN assignments a ON t.ticket_id = a.ticket_id GROUP BY t.subject, ts.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, a.name AS agent_name FROM tickets t INNER JOIN assignments a ON t.ticket_id = a.ticket_id WHERE a.assigned_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT agent_id, name, COUNT(*) AS total_tickets_assigned FROM agents a INNER JOIN assignments ass ON a.agent_id = ass.agent_id GROUP BY a.agent_id, a.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT a.name AS agent_name, COUNT(*) AS total_tickets_assigned FROM agents a LEFT JOIN assignments ass ON a.agent_id = ass.agent_id GROUP BY a.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT t.ticket_id) AS total_tickets_assigned, ts.status_name FROM tickets t INNER JOIN ticket_status ts ON t.status = ts.status_name GROUP BY ts.status_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(LENGTH(description)) AS avg_description_length FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.subject, COUNT(*) AS total_assignments FROM tickets t INNER JOIN assignments a ON t.ticket_id = a.ticket_id WHERE a.assigned_timestamp IS NOT NULL GROUP BY t.subject;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    subject VARCHAR(255),\n    description TEXT,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\n\nCREATE TABLE assignments (\n    assignment_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    assigned_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ticket_status (\n    status_id UUID PRIMARY KEY,\n    status_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT a.name AS agent_name, COUNT(*) AS total_tickets_assigned FROM agents a INNER JOIN assignments ass ON a.agent_id = ass.agent_id WHERE ass.assigned_timestamp <= NOW();",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_subject FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description FROM support_tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_name, department FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_assignments;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, agent_id FROM ticket_assignments WHERE status = 'Assigned';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_comments;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_id, comment_text FROM ticket_comments WHERE ticket_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket_history;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, agent_id, action FROM ticket_history WHERE action = 'Update';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_description, created_date FROM support_tickets WHERE status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_name, email FROM agents WHERE department = 'IT Support';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM ticket_assignments;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT MAX(created_date) FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT AVG(LENGTH(comment_text)) FROM ticket_comments;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, COUNT(*) AS num_comments FROM ticket_comments GROUP BY ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_id, COUNT(*) AS num_assignments FROM ticket_assignments GROUP BY agent_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, MAX(action_date) FROM ticket_history GROUP BY ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_id, AVG(DATEDIFF(NOW(), action_date)) AS avg_days_since_action FROM ticket_history GROUP BY agent_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_subject, created_date FROM support_tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT * FROM agents WHERE department = 'Support';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT agent_name, email FROM agents WHERE agent_id IN (SELECT agent_id FROM ticket_assignments WHERE ticket_id = 1001);",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, comment_text, comment_date FROM ticket_comments WHERE agent_id = 2002;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, action, action_date FROM ticket_history WHERE agent_id = 3003;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_subject, a.agent_name FROM support_tickets t JOIN ticket_assignments ta ON t.ticket_id = ta.ticket_id JOIN agents a ON ta.agent_id = a.agent_id WHERE t.status = 'Closed' AND a.department = 'Technical Support';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_subject, c.comment_text FROM support_tickets t JOIN ticket_comments c ON t.ticket_id = c.ticket_id WHERE c.agent_id = 4004;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_subject, h.action FROM support_tickets t JOIN ticket_history h ON t.ticket_id = h.ticket_id WHERE h.agent_id = 5005;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_subject, a.agent_name, c.comment_text FROM support_tickets t JOIN ticket_assignments ta ON t.ticket_id = ta.ticket_id JOIN agents a ON ta.agent_id = a.agent_id JOIN ticket_comments c ON t.ticket_id = c.ticket_id WHERE t.status = 'Pending' AND a.department = 'Sales';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_description, a.agent_name, h.action FROM support_tickets t JOIN ticket_assignments ta ON t.ticket_id = ta.ticket_id JOIN agents a ON ta.agent_id = a.agent_id JOIN ticket_history h ON t.ticket_id = h.ticket_id WHERE a.department = 'Support' AND t.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT a.agent_id, a.agent_name, COUNT(ta.ticket_id) AS total_tickets_assigned FROM agents a LEFT JOIN ticket_assignments ta ON a.agent_id = ta.agent_id GROUP BY a.agent_id, a.agent_name;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT a.department, COUNT(DISTINCT ta.ticket_id) AS total_tickets_assigned FROM agents a LEFT JOIN ticket_assignments ta ON a.agent_id = ta.agent_id GROUP BY a.department;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.created_date, COUNT(c.comment_id) AS total_comments FROM support_tickets t LEFT JOIN ticket_comments c ON t.ticket_id = c.ticket_id GROUP BY t.created_date;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, AVG(DAYOFYEAR(CURDATE()) - DAYOFYEAR(t.created_date)) AS avg_days_open FROM support_tickets t WHERE t.status = 'Closed' GROUP BY t.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT a.agent_id, a.agent_name, COUNT(DISTINCT th.history_id) AS total_actions FROM agents a LEFT JOIN ticket_history th ON a.agent_id = th.agent_id GROUP BY a.agent_id, a.agent_name;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT department, COUNT(DISTINCT ticket_id) AS total_tickets FROM agents a LEFT JOIN ticket_assignments ta ON a.agent_id = ta.agent_id GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, COUNT(a.assignment_id) AS total_assignments FROM support_tickets t LEFT JOIN ticket_assignments a ON t.ticket_id = a.ticket_id GROUP BY ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT department, AVG(DAYOFYEAR(CURDATE()) - DAYOFYEAR(t.created_date)) AS avg_days_assigned FROM agents a LEFT JOIN ticket_assignments ta ON a.agent_id = ta.agent_id LEFT JOIN support_tickets t ON ta.ticket_id = t.ticket_id GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_subject, AVG(DAYOFYEAR(CURDATE()) - DAYOFYEAR(t.created_date)) AS avg_days_open FROM support_tickets t WHERE t.status = 'Open' GROUP BY t.ticket_id, t.ticket_subject;",
  "### TABLEDATA\n\nCREATE TABLE support_tickets (\n    ticket_id INT PRIMARY KEY,\n    ticket_subject VARCHAR(255),\n    ticket_description TEXT,\n    created_date TIMESTAMP,\n    status VARCHAR(50)\n);\n\n\nCREATE TABLE agents (\n    agent_id INT PRIMARY KEY,\n    agent_name VARCHAR(100),\n    department VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE ticket_assignments (\n    assignment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    assignment_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_comments (\n    comment_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    comment_text TEXT,\n    comment_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n\nCREATE TABLE ticket_history (\n    history_id INT PRIMARY KEY,\n    ticket_id INT,\n    agent_id INT,\n    action VARCHAR(255),\n    action_date TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n);\n\n### STATEMENT\n\nSELECT a.agent_id, a.agent_name, COUNT(DISTINCT ta.ticket_id) AS total_tickets_assigned, AVG(DAYOFYEAR(CURDATE()) - DAYOFYEAR(t.created_date)) AS avg_days_open FROM agents a LEFT JOIN ticket_assignments ta ON a.agent_id = ta.agent_id LEFT JOIN support_tickets t ON ta.ticket_id = t.ticket_id WHERE t.status = 'Open' GROUP BY a.agent_id, a.agent_name;"
]