[
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-01', 'Income', 1000.00, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-02', 'Expense', 500.50, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-03', 'Income', 750.25, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-04', 'Expense', 300.75, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-05', 'Income', 1200.00, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-06', 'Expense', 800.20, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-07', 'Income', 950.50, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-08', 'Expense', 600.80, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-09', 'Income', 1100.00, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-10', 'Expense', 700.30, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-11', 'Income', 850.75, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-12', 'Expense', 400.60, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-13', 'Income', 1300.00, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-14', 'Expense', 900.50, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-15', 'Income', 1000.75, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-16', 'Expense', 500.25, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-17', 'Income', 1150.00, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-18', 'Expense', 700.85, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-19', 'Income', 950.25, true);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nUPSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-20', 'Expense', 600.70, false);",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-01', 'Income', 1000.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1000.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-02', 'Expense', 500.50, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 500.50, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-03', 'Income', 750.75, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 750.75, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-04', 'Expense', 300.25, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 300.25, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-05', 'Income', 1200.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1200.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-06', 'Expense', 600.60, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 600.60, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-07', 'Income', 900.90, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 900.90, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-08', 'Expense', 450.45, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 450.45, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-09', 'Income', 1500.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1500.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-10', 'Expense', 750.75, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 750.75, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-11', 'Income', 1600.00, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1600.00, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-12', 'Expense', 800.80, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 800.80, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-13', 'Income', 1800.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1800.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-14', 'Expense', 900.90, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 900.90, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-15', 'Income', 2000.00, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 2000.00, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-16', 'Expense', 1000.00, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1000.00, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-17', 'Income', 2200.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 2200.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-18', 'Expense', 1100.00, true) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1100.00, reconciled = true;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-19', 'Income', 2400.00, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 2400.00, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE Financial_Statements (\n    id SERIAL PRIMARY KEY,\n    statement_date DATE,\n    statement_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    reconciled BOOLEAN\n)\n\n### STATEMENT\n\nINSERT INTO Financial_Statements (statement_date, statement_type, amount, reconciled) VALUES ('2022-01-20', 'Expense', 1200.00, false) ON CONFLICT (statement_date, statement_type) DO UPDATE SET amount = 1200.00, reconciled = false;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (1, '2022-01-01', 1000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', statement_amount = 1000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (2, '2022-02-01', 2000) ON DUPLICATE KEY UPDATE statement_date = '2022-02-01', statement_amount = 2000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (3, '2022-03-01', 3000) ON DUPLICATE KEY UPDATE statement_date = '2022-03-01', statement_amount = 3000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (4, '2022-04-01', 4000) ON DUPLICATE KEY UPDATE statement_date = '2022-04-01', statement_amount = 4000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (5, '2022-05-01', 5000) ON DUPLICATE KEY UPDATE statement_date = '2022-05-01', statement_amount = 5000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (6, '2022-06-01', 6000) ON DUPLICATE KEY UPDATE statement_date = '2022-06-01', statement_amount = 6000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (7, '2022-07-01', 7000) ON DUPLICATE KEY UPDATE statement_date = '2022-07-01', statement_amount = 7000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (8, '2022-08-01', 8000) ON DUPLICATE KEY UPDATE statement_date = '2022-08-01', statement_amount = 8000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (9, '2022-09-01', 9000) ON DUPLICATE KEY UPDATE statement_date = '2022-09-01', statement_amount = 9000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (10, '2022-10-01', 10000) ON DUPLICATE KEY UPDATE statement_date = '2022-10-01', statement_amount = 10000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (11, '2022-11-01', 11000) ON DUPLICATE KEY UPDATE statement_date = '2022-11-01', statement_amount = 11000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (12, '2022-12-01', 12000) ON DUPLICATE KEY UPDATE statement_date = '2022-12-01', statement_amount = 12000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (13, '2023-01-01', 13000) ON DUPLICATE KEY UPDATE statement_date = '2023-01-01', statement_amount = 13000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (14, '2023-02-01', 14000) ON DUPLICATE KEY UPDATE statement_date = '2023-02-01', statement_amount = 14000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (15, '2023-03-01', 15000) ON DUPLICATE KEY UPDATE statement_date = '2023-03-01', statement_amount = 15000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (16, '2023-04-01', 16000) ON DUPLICATE KEY UPDATE statement_date = '2023-04-01', statement_amount = 16000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (17, '2023-05-01', 17000) ON DUPLICATE KEY UPDATE statement_date = '2023-05-01', statement_amount = 17000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (18, '2023-06-01', 18000) ON DUPLICATE KEY UPDATE statement_date = '2023-06-01', statement_amount = 18000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (19, '2023-07-01', 19000) ON DUPLICATE KEY UPDATE statement_date = '2023-07-01', statement_amount = 19000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (20, '2023-08-01', 20000) ON DUPLICATE KEY UPDATE statement_date = '2023-08-01', statement_amount = 20000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (1, '2022-01-01', 1000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-01', statement_amount = 1000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (2, '2022-01-02', 1500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-02', statement_amount = 1500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (3, '2022-01-03', 2000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-03', statement_amount = 2000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (4, '2022-01-04', 2500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-04', statement_amount = 2500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (5, '2022-01-05', 3000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-05', statement_amount = 3000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (6, '2022-01-06', 3500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-06', statement_amount = 3500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (7, '2022-01-07', 4000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-07', statement_amount = 4000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (8, '2022-01-08', 4500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-08', statement_amount = 4500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (9, '2022-01-09', 5000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-09', statement_amount = 5000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (10, '2022-01-10', 5500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-10', statement_amount = 5500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (11, '2022-01-11', 6000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-11', statement_amount = 6000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (12, '2022-01-12', 6500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-12', statement_amount = 6500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (13, '2022-01-13', 7000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-13', statement_amount = 7000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (14, '2022-01-14', 7500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-14', statement_amount = 7500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (15, '2022-01-15', 8000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-15', statement_amount = 8000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (16, '2022-01-16', 8500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-16', statement_amount = 8500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (17, '2022-01-17', 9000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-17', statement_amount = 9000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (18, '2022-01-18', 9500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-18', statement_amount = 9500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (19, '2022-01-19', 10000) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-19', statement_amount = 10000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  statement_id INT PRIMARY KEY,\n  statement_date DATE,\n  statement_amount DECIMAL\n);\n\nCREATE TABLE audit_logs (\n  log_id INT PRIMARY KEY,\n  statement_id INT,\n  action_performed VARCHAR(255),\n  logged_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO financial_statements (statement_id, statement_date, statement_amount) VALUES (20, '2022-01-20', 10500) ON CONFLICT (statement_id) DO UPDATE SET statement_date = '2022-01-20', statement_amount = 10500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Income Statement', '2022-01-01', 10000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 10000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Balance Sheet', '2022-01-01', 50000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 50000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (1, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (2, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (1, 'Completed', 10000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (2, 'Completed', 50000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Flow Statement', '2022-01-01', 20000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 20000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Profit and Loss Statement', '2022-01-01', 30000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 30000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (3, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (4, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (3, 'Completed', 20000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (4, 'Completed', 30000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Budget Statement', '2022-01-01', 40000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 40000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Position Statement', '2022-01-01', 15000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 15000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (5, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (6, 'Created financial statement', '2022-01-01 08:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (5, 'Completed', 40000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (6, 'Completed', 15000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Revenue Statement', '2022-01-01', 25000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 25000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Expenditure Statement', '2022-01-01', 35000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 35000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Income Statement', '2022-03-15', 10000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 11000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Balance Sheet', '2022-03-15', 50000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 55000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Flow Statement', '2022-03-15', 20000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 22000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Income Statement', '2022-03-20', 12000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 13200;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Balance Sheet', '2022-03-20', 55000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 60500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Flow Statement', '2022-03-20', 25000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 27500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Income Statement', '2022-03-25', 15000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 16500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Balance Sheet', '2022-03-25', 60000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 66000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Flow Statement', '2022-03-25', 30000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 33000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Income Statement', '2022-03-30', 18000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 19800;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Balance Sheet', '2022-03-30', 65000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 71500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO financial_statements (statement_name, statement_date, total_amount) VALUES ('Cash Flow Statement', '2022-03-30', 35000) ON CONFLICT (statement_name) DO UPDATE SET total_amount = 38500;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (1, 'Updated', '2022-03-15 10:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (2, 'Updated', '2022-03-15 11:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (3, 'Updated', '2022-03-15 12:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (4, 'Updated', '2022-03-20 10:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (5, 'Updated', '2022-03-20 11:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (6, 'Updated', '2022-03-20 12:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (7, 'Updated', '2022-03-25 10:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (8, 'Updated', '2022-03-25 11:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (9, 'Updated', '2022-03-25 12:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (10, 'Updated', '2022-03-30 10:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (11, 'Updated', '2022-03-30 11:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO audit_logs (statement_id, action, action_date) VALUES (12, 'Updated', '2022-03-30 12:00:00');",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (1, 'Reconciled', 10000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (2, 'Reconciled', 50000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (3, 'Reconciled', 20000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (4, 'Reconciled', 12000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (5, 'Reconciled', 55000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (6, 'Reconciled', 25000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (7, 'Reconciled', 15000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (8, 'Reconciled', 60000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (9, 'Reconciled', 30000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (10, 'Reconciled', 18000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (11, 'Reconciled', 65000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n  id SERIAL PRIMARY KEY,\n  statement_name TEXT NOT NULL,\n  statement_date DATE NOT NULL,\n  total_amount DECIMAL NOT NULL\n);\n\nCREATE TABLE audit_logs (\n  log_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  action TEXT NOT NULL,\n  action_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE reconciliation_records (\n  record_id SERIAL PRIMARY KEY,\n  statement_id INT NOT NULL REFERENCES financial_statements(id),\n  status TEXT NOT NULL,\n  reconciled_amount DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO reconciliation_records (statement_id, status, reconciled_amount) VALUES (12, 'Reconciled', 35000);",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO financial_statement (id, statement_date, amount) VALUES (1, '2022-01-01', 10000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', amount = 10000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO financial_statement (id, statement_date, amount) VALUES (2, '2022-01-01', 15000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', amount = 15000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO financial_statement (id, statement_date, amount) VALUES (3, '2022-01-01', 20000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', amount = 20000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO financial_statement (id, statement_date, amount) VALUES (4, '2022-01-01', 25000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', amount = 25000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO financial_statement (id, statement_date, amount) VALUES (5, '2022-01-01', 30000) ON DUPLICATE KEY UPDATE statement_date = '2022-01-01', amount = 30000;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO auditor (id, name, email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE name = 'John Doe', email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO auditor (id, name, email) VALUES (2, 'Jane Smith', 'jane.smith@example.com') ON DUPLICATE KEY UPDATE name = 'Jane Smith', email = 'jane.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO auditor (id, name, email) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com') ON DUPLICATE KEY UPDATE name = 'Alice Johnson', email = 'alice.johnson@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO auditor (id, name, email) VALUES (4, 'Bob Wilson', 'bob.wilson@example.com') ON DUPLICATE KEY UPDATE name = 'Bob Wilson', email = 'bob.wilson@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO auditor (id, name, email) VALUES (5, 'Eve Brown', 'eve.brown@example.com') ON DUPLICATE KEY UPDATE name = 'Eve Brown', email = 'eve.brown@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (1, '2022-01-01', 1, 'approve') ON DUPLICATE KEY UPDATE audit_date = '2022-01-01', auditor_id = 1, action = 'approve';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (2, '2022-01-01', 2, 'reject') ON DUPLICATE KEY UPDATE audit_date = '2022-01-01', auditor_id = 2, action = 'reject';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (3, '2022-01-01', 3, 'approve') ON DUPLICATE KEY UPDATE audit_date = '2022-01-01', auditor_id = 3, action = 'approve';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (4, '2022-01-01', 4, 'reject') ON DUPLICATE KEY UPDATE audit_date = '2022-01-01', auditor_id = 4, action = 'reject';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (5, '2022-01-01', 5, 'approve') ON DUPLICATE KEY UPDATE audit_date = '2022-01-01', auditor_id = 5, action = 'approve';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO reconciliation (id, start_date, end_date, status) VALUES (1, '2022-01-01', '2022-01-31', 'completed') ON DUPLICATE KEY UPDATE start_date = '2022-01-01', end_date = '2022-01-31', status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO reconciliation (id, start_date, end_date, status) VALUES (2, '2022-02-01', '2022-02-28', 'pending') ON DUPLICATE KEY UPDATE start_date = '2022-02-01', end_date = '2022-02-28', status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO reconciliation (id, start_date, end_date, status) VALUES (3, '2022-03-01', '2022-03-31', 'in_progress') ON DUPLICATE KEY UPDATE start_date = '2022-03-01', end_date = '2022-03-31', status = 'in_progress';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO reconciliation (id, start_date, end_date, status) VALUES (4, '2022-04-01', '2022-04-30', 'completed') ON DUPLICATE KEY UPDATE start_date = '2022-04-01', end_date = '2022-04-30', status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nINSERT INTO reconciliation (id, start_date, end_date, status) VALUES (5, '2022-05-01', '2022-05-31', 'pending') ON DUPLICATE KEY UPDATE start_date = '2022-05-01', end_date = '2022-05-31', status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO financial_statement (id, statement_date, amount) VALUES (1, '2022-01-01', 100.00) ON DUPLICATE KEY UPDATE statement_date='2022-01-01', amount=100.00;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO financial_statement (id, statement_date, amount) VALUES (2, '2022-01-02', 200.00) ON DUPLICATE KEY UPDATE statement_date='2022-01-02', amount=200.00;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO financial_statement (id, statement_date, amount) VALUES (3, '2022-01-03', 300.00) ON DUPLICATE KEY UPDATE statement_date='2022-01-03', amount=300.00;",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO auditor (id, name, email) VALUES (1, 'Auditor A', 'auditorA@example.com') ON DUPLICATE KEY UPDATE name='Auditor A', email='auditorA@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO auditor (id, name, email) VALUES (2, 'Auditor B', 'auditorB@example.com') ON DUPLICATE KEY UPDATE name='Auditor B', email='auditorB@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO auditor (id, name, email) VALUES (3, 'Auditor C', 'auditorC@example.com') ON DUPLICATE KEY UPDATE name='Auditor C', email='auditorC@example.com';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (1, '2022-01-01', 1, 'Audit Action A') ON DUPLICATE KEY UPDATE audit_date='2022-01-01', auditor_id=1, action='Audit Action A';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (2, '2022-01-02', 2, 'Audit Action B') ON DUPLICATE KEY UPDATE audit_date='2022-01-02', auditor_id=2, action='Audit Action B';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO audit_log (id, audit_date, auditor_id, action) VALUES (3, '2022-01-03', 3, 'Audit Action C') ON DUPLICATE KEY UPDATE audit_date='2022-01-03', auditor_id=3, action='Audit Action C';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO reconciliation (id, start_date, end_date, status) VALUES (1, '2022-01-01', '2022-01-10', 'Pending') ON DUPLICATE KEY UPDATE start_date='2022-01-01', end_date='2022-01-10', status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO reconciliation (id, start_date, end_date, status) VALUES (2, '2022-01-05', '2022-01-15', 'Completed') ON DUPLICATE KEY UPDATE start_date='2022-01-05', end_date='2022-01-15', status='Completed';",
  "### TABLEDATA\n\nCREATE TABLE financial_statement (id INT PRIMARY KEY,\n statement_date DATE,\n amount DECIMAL);\n\nCREATE TABLE auditor (id INT PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(50));\n\nCREATE TABLE audit_log (id INT PRIMARY KEY,\n audit_date DATE,\n auditor_id INT,\n action VARCHAR(50));\n\nCREATE TABLE reconciliation (id INT PRIMARY KEY,\n start_date DATE,\n end_date DATE,\n status VARCHAR(50));\n\n### STATEMENT\n\nUPSERT INTO reconciliation (id, start_date, end_date, status) VALUES (3, '2022-01-10', '2022-01-20', 'Cancelled') ON DUPLICATE KEY UPDATE start_date='2022-01-10', end_date='2022-01-20', status='Cancelled';",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (1, '2022-01-01', 'Example statement details') ON CONFLICT (id) DO UPDATE SET statement_details = EXCLUDED.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (1, 'Audit Firm A', 40.5, 5000.00) ON CONFLICT (auditor_id) DO UPDATE SET audit_hours = EXCLUDED.audit_hours, audit_fee = EXCLUDED.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (1, 'Client X', 'contact@clientx.com') ON CONFLICT (client_id) DO UPDATE SET client_contact = EXCLUDED.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (1, 1, 1, 'Pending') ON CONFLICT (reconciliation_id) DO UPDATE SET reconciliation_status = EXCLUDED.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (1, 1, 100.00, '2022-01-15') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (2, '2022-01-02', 'Another example statement') ON CONFLICT (id) DO UPDATE SET statement_details = EXCLUDED.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (2, 'Audit Firm B', 35.5, 4500.00) ON CONFLICT (auditor_id) DO UPDATE SET audit_hours = EXCLUDED.audit_hours, audit_fee = EXCLUDED.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (2, 'Client Y', 'contact@clienty.com') ON CONFLICT (client_id) DO UPDATE SET client_contact = EXCLUDED.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (2, 2, 2, 'Complete') ON CONFLICT (reconciliation_id) DO UPDATE SET reconciliation_status = EXCLUDED.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (2, 2, 150.00, '2022-01-20') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (3, '2022-01-03', 'Yet another example statement') ON CONFLICT (id) DO UPDATE SET statement_details = EXCLUDED.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (3, 'Audit Firm C', 38.0, 4800.00) ON CONFLICT (auditor_id) DO UPDATE SET audit_hours = EXCLUDED.audit_hours, audit_fee = EXCLUDED.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (3, 'Client Z', 'contact@clientz.com') ON CONFLICT (client_id) DO UPDATE SET client_contact = EXCLUDED.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (3, 3, 3, 'In Progress') ON CONFLICT (reconciliation_id) DO UPDATE SET reconciliation_status = EXCLUDED.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (3, 3, 200.00, '2022-01-25') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (4, '2022-01-04', 'One more example statement') ON CONFLICT (id) DO UPDATE SET statement_details = EXCLUDED.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (4, 'Audit Firm D', 36.5, 4700.00) ON CONFLICT (auditor_id) DO UPDATE SET audit_hours = EXCLUDED.audit_hours, audit_fee = EXCLUDED.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (4, 'Client W', 'contact@clientw.com') ON CONFLICT (client_id) DO UPDATE SET client_contact = EXCLUDED.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (4, 4, 4, 'Approved') ON CONFLICT (reconciliation_id) DO UPDATE SET reconciliation_status = EXCLUDED.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (4, 4, 250.00, '2022-01-30') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (5, '2022-01-05', 'Final example statement') ON CONFLICT (id) DO UPDATE SET statement_details = EXCLUDED.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (1, '2022-01-01', 'Financial statement details...') ON CONFLICT (id) DO UPDATE SET statement_date = excluded.statement_date, statement_details = excluded.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (1, 'Auditor A', 40.5, 2500.00) ON CONFLICT (auditor_id) DO UPDATE SET auditor_name = excluded.auditor_name, audit_hours = excluded.audit_hours, audit_fee = excluded.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (1, 'Client A', 'clienta@example.com') ON CONFLICT (client_id) DO UPDATE SET client_name = excluded.client_name, client_contact = excluded.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (1, 1, 1, 'Pending') ON CONFLICT (reconciliation_id) DO UPDATE SET statement_id = excluded.statement_id, auditor_id = excluded.auditor_id, reconciliation_status = excluded.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (1, 1, 500.00, '2022-01-15') ON CONFLICT (payment_id) DO UPDATE SET client_id = excluded.client_id, payment_amount = excluded.payment_amount, payment_date = excluded.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (2, '2022-02-01', 'Financial statement details...') ON CONFLICT (id) DO UPDATE SET statement_date = excluded.statement_date, statement_details = excluded.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (2, 'Auditor B', 35.0, 2800.00) ON CONFLICT (auditor_id) DO UPDATE SET auditor_name = excluded.auditor_name, audit_hours = excluded.audit_hours, audit_fee = excluded.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (2, 'Client B', 'clientb@example.com') ON CONFLICT (client_id) DO UPDATE SET client_name = excluded.client_name, client_contact = excluded.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (2, 2, 2, 'Completed') ON CONFLICT (reconciliation_id) DO UPDATE SET statement_id = excluded.statement_id, auditor_id = excluded.auditor_id, reconciliation_status = excluded.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (2, 2, 750.00, '2022-02-10') ON CONFLICT (payment_id) DO UPDATE SET client_id = excluded.client_id, payment_amount = excluded.payment_amount, payment_date = excluded.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (3, '2022-03-01', 'Financial statement details...') ON CONFLICT (id) DO UPDATE SET statement_date = excluded.statement_date, statement_details = excluded.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (3, 'Auditor C', 45.5, 3200.00) ON CONFLICT (auditor_id) DO UPDATE SET auditor_name = excluded.auditor_name, audit_hours = excluded.audit_hours, audit_fee = excluded.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (3, 'Client C', 'clientc@example.com') ON CONFLICT (client_id) DO UPDATE SET client_name = excluded.client_name, client_contact = excluded.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (3, 3, 3, 'Pending') ON CONFLICT (reconciliation_id) DO UPDATE SET statement_id = excluded.statement_id, auditor_id = excluded.auditor_id, reconciliation_status = excluded.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (3, 3, 1000.00, '2022-03-20') ON CONFLICT (payment_id) DO UPDATE SET client_id = excluded.client_id, payment_amount = excluded.payment_amount, payment_date = excluded.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO financial_statements (id, statement_date, statement_details) VALUES (4, '2022-04-01', 'Financial statement details...') ON CONFLICT (id) DO UPDATE SET statement_date = excluded.statement_date, statement_details = excluded.statement_details;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO auditors (auditor_id, auditor_name, audit_hours, audit_fee) VALUES (4, 'Auditor D', 38.0, 2900.00) ON CONFLICT (auditor_id) DO UPDATE SET auditor_name = excluded.auditor_name, audit_hours = excluded.audit_hours, audit_fee = excluded.audit_fee;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO clients (client_id, client_name, client_contact) VALUES (4, 'Client D', 'clientd@example.com') ON CONFLICT (client_id) DO UPDATE SET client_name = excluded.client_name, client_contact = excluded.client_contact;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO reconciliations (reconciliation_id, statement_id, auditor_id, reconciliation_status) VALUES (4, 4, 4, 'Completed') ON CONFLICT (reconciliation_id) DO UPDATE SET statement_id = excluded.statement_id, auditor_id = excluded.auditor_id, reconciliation_status = excluded.reconciliation_status;",
  "### TABLEDATA\n\nCREATE TABLE financial_statements (\n    id INT,\n    statement_date DATE,\n    statement_details TEXT,\n    PRIMARY KEY (id)\n)\n\nCREATE TABLE auditors (\n    auditor_id INT,\n    auditor_name TEXT,\n    audit_hours DECIMAL,\n    audit_fee DECIMAL,\n    PRIMARY KEY (auditor_id)\n)\n\nCREATE TABLE clients (\n    client_id INT,\n    client_name TEXT,\n    client_contact TEXT,\n    PRIMARY KEY (client_id)\n)\n\nCREATE TABLE reconciliations (\n    reconciliation_id INT,\n    statement_id INT,\n    auditor_id INT,\n    reconciliation_status TEXT,\n    PRIMARY KEY (reconciliation_id),\n    FOREIGN KEY (statement_id) REFERENCES financial_statements(id),\n    FOREIGN KEY (auditor_id) REFERENCES auditors(auditor_id)\n)\n\nCREATE TABLE payments (\n    payment_id INT,\n    client_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    PRIMARY KEY (payment_id),\n    FOREIGN KEY (client_id) REFERENCES clients(client_id)\n)\n\n### STATEMENT\n\nINSERT INTO payments (payment_id, client_id, payment_amount, payment_date) VALUES (4, 4, 1200.00, '2022-04-15') ON CONFLICT (payment_id) DO UPDATE SET client_id = excluded.client_id, payment_amount = excluded.payment_amount, payment_date = excluded.payment_date;"
]