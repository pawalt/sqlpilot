[
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, user_id, amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id = 'user123'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) FROM transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY amount DESC",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE is_fraudulent = TRUE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount BETWEEN 500 AND 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE is_fraudulent = FALSE AND amount > 500",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) FROM transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id IN ('user123', 'user456')",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-03-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id = '12345'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id = 'user123' AND amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id = '1234' AND amount > 100",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, user_id, transaction_date FROM transactions WHERE amount < 50",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions WHERE user_id = '5678'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions WHERE transaction_date >= '2022-10-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions WHERE is_fraudulent = TRUE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM transactions WHERE user_id = '9101'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE is_fraudulent = FALSE ORDER BY transaction_date DESC",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, user_id, amount, transaction_date FROM transactions WHERE transaction_id = '9999'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions WHERE user_id = '2345' AND is_fraudulent = FALSE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_transactions FROM transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id IN ('AAA', 'BBB', 'CCC')",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount, COUNT(*) AS total_transactions FROM transactions WHERE is_fraudulent = FALSE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM transactions GROUP BY user_id HAVING total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(transaction_date) AS first_transaction_date, MAX(transaction_date) AS last_transaction_date FROM transactions GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date <= CURRENT_TIMESTAMP",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount >= 500 AND transaction_date >= '2022-08-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id = '6578' AND (amount < 50 OR is_fraudulent = TRUE)",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions WHERE user_id = '3333'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_attempts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT fraud_reason FROM fraud_attempts WHERE attempt_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id FROM fraud_attempts WHERE fraud_reason LIKE '%fraud%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions LEFT JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions RIGHT JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions INNER JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions FULL JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, fraud_attempts.fraud_reason FROM transactions JOIN fraud_attempts ON transactions.transaction_id = fraud_attempts.transaction_id WHERE fraud_attempts.attempt_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE customer_id IN (SELECT customer_id FROM fraud_attempts);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE customer_id NOT IN (SELECT customer_id FROM fraud_attempts);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id IN (SELECT transaction_id FROM fraud_attempts WHERE fraud_reason = 'Stolen Card');",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, customer_id FROM transactions WHERE amount >= 500 AND transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE customer_id IN (SELECT customer_id FROM fraud_attempts)",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_date, f.fraud_reason FROM transactions t INNER JOIN fraud_attempts f ON t.transaction_id = f.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_date, f.fraud_reason FROM transactions t LEFT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_date, f.fraud_reason FROM transactions t RIGHT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_date, f.fraud_reason FROM transactions t LEFT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id WHERE f.fraud_reason IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(transaction_id) AS transaction_count FROM transactions GROUP BY customer_id HAVING COUNT(transaction_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(amount) AS total_amount FROM transactions GROUP BY customer_id ORDER BY total_amount DESC",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DATE(transaction_date) AS transaction_day, SUM(amount) AS total_amount FROM transactions GROUP BY DATE(transaction_date)",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(attempt_id) AS fraud_attempt_count FROM fraud_attempts GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS avg_transaction_amount FROM transactions GROUP BY customer_id HAVING AVG(amount) > 500",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.customer_id, COUNT(f.attempt_id) AS fraud_attempt_count FROM transactions t LEFT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id GROUP BY t.customer_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.customer_id, COUNT(f.attempt_id) AS fraud_attempt_count FROM transactions t LEFT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id GROUP BY t.customer_id HAVING COUNT(f.attempt_id) > 2",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS avg_amount FROM transactions WHERE customer_id IN (SELECT DISTINCT customer_id FROM fraud_attempts) GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(amount) AS max_amount FROM transactions WHERE customer_id NOT IN (SELECT customer_id FROM fraud_attempts) GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT\n);\n\nCREATE TABLE fraud_attempts (\n    attempt_id INT PRIMARY KEY,\n    transaction_id INT,\n    fraud_reason TEXT,\n    attempted_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(fraud_reason) AS flagged_transactions FROM transactions t LEFT JOIN fraud_attempts f ON t.transaction_id = f.transaction_id WHERE fraud_reason IS NOT NULL GROUP BY customer_id HAVING COUNT(fraud_reason) > 1",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT amount, date FROM transactions WHERE account_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM accounts WHERE account_id = 50;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pattern_description FROM fraud_patterns WHERE is_active = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, date FROM transactions WHERE is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(balance) AS max_balance FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_type, SUM(balance) AS total_balance FROM accounts GROUP BY account_type;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE date >= '2022-01-01' AND date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM accounts WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pattern_id, pattern_description FROM fraud_patterns WHERE pattern_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE account_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(balance) AS average_balance FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM accounts ORDER BY balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_accounts FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 100 AND is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pattern_id, pattern_description FROM fraud_patterns WHERE is_active = true ORDER BY pattern_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000 AND date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_id, account_name, balance FROM accounts WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, a.account_name FROM transactions t INNER JOIN accounts a ON t.account_id = a.account_id WHERE t.is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.date, a.account_type FROM transactions t JOIN accounts a ON t.account_id = a.account_id WHERE a.account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.date, a.account_name FROM transactions t JOIN accounts a ON t.account_id = a.account_id WHERE a.balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.date, f.pattern_description FROM transactions t JOIN fraud_patterns f ON t.is_fraudulent = f.is_active WHERE t.is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, a.account_name, a.balance, f.pattern_description FROM transactions t JOIN accounts a ON t.account_id = a.account_id JOIN fraud_patterns f ON t.is_fraudulent = f.is_active WHERE t.amount > 500 AND a.balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.date, a.account_name, a.balance, a.account_type, f.pattern_description FROM transactions t JOIN accounts a ON t.account_id = a.account_id JOIN fraud_patterns f ON t.is_fraudulent = f.is_active WHERE a.account_type = 'Checking' AND t.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_accounts FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(balance) AS max_balance FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_type, SUM(balance) AS total_balance FROM accounts GROUP BY account_type;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pattern_description, COUNT(*) AS pattern_count FROM fraud_patterns GROUP BY pattern_description;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT pattern_description, MAX(pattern_id) AS max_pattern_id FROM fraud_patterns GROUP BY pattern_description;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT account_type, AVG(balance) AS average_balance FROM accounts GROUP BY account_type;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_fraud_patterns FROM fraud_patterns WHERE is_active = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, account_id FROM transactions UNION SELECT account_id, balance, NULL FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    date TIMESTAMP,\n    account_id INT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR,\n    account_type VARCHAR,\n    balance DECIMAL\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR,\n    is_active BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, a.account_name, a.account_type, f.pattern_description FROM transactions t LEFT JOIN accounts a ON t.account_id = a.account_id LEFT JOIN fraud_patterns f ON t.is_fraudulent = f.is_active WHERE f.is_active = true OR t.is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, merchant_id FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, phone_number FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM merchants;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT merchant_id, merchant_name FROM merchants;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT merchant_email, merchant_location FROM merchants;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT pattern_description, detection_method FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT pattern_id, pattern_description FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT detection_method FROM fraud_patterns WHERE pattern_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT merchant_name, merchant_email FROM merchants WHERE merchant_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_amount FROM transactions WHERE customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE fraud_flag = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount, transaction_date FROM transactions WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount, customer_id FROM transactions WHERE customer_id = 1001 AND merchant_id = 2002;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, phone_number FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE fraud_flag = true);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT merchant_name, merchant_location FROM merchants WHERE merchant_id IN (SELECT DISTINCT merchant_id FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, transaction_amount FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL,\n    transaction_date TIMESTAMP,\n    customer_id INT,\n    merchant_id INT,\n    fraud_flag BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50),\n    phone_number VARCHAR(15),\n    address VARCHAR(100)\n);\n\nCREATE TABLE merchants (\n    merchant_id INT PRIMARY KEY,\n    merchant_name VARCHAR(50),\n    merchant_email VARCHAR(50),\n    merchant_location VARCHAR(100)\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id INT PRIMARY KEY,\n    pattern_description VARCHAR(100),\n    detection_method VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT m.merchant_name, COUNT(t.transacti...",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT account_id, customer_id, account_type FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM alerts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT alert_id, transaction_id, alert_date FROM alerts;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT pattern_id, pattern_name FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone_number FROM customers WHERE customer_id = '12345678-1234-1234-1234-1234567890AB';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT pattern_name, pattern_description FROM fraud_patterns WHERE pattern_id = '98765432-4321-4321-4321-210987654321';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(balance) AS total_balance FROM accounts GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number, address FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM alerts ORDER BY alert_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT account_id, balance FROM accounts ORDER BY balance DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT pattern_name, COUNT(pattern_id) AS occurrences FROM fraud_patterns GROUP BY pattern_name HAVING COUNT(pattern_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000 AND is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE customer_id = '1234';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT account_id, balance FROM accounts WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions t JOIN accounts a ON t.customer_id = a.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT pattern_name, pattern_description FROM fraud_patterns WHERE pattern_id = '5678';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(amount) AS total_amount FROM transactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, account_type, balance FROM accounts WHERE account_type LIKE '%savings%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE email LIKE '%@gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT alert_id, alert_date FROM alerts ORDER BY alert_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(transaction_id) AS total_transactions FROM transactions GROUP BY customer_id HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE balance < 0);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT pattern_name FROM fraud_patterns;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(balance) AS total_balance FROM accounts GROUP BY customer_id HAVING total_balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE customer_id IN (SELECT customer_id FROM accounts WHERE balance > 5000);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions WHERE is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS average_transaction_amount FROM transactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT account_type, SUM(balance) AS total_balance FROM accounts GROUP BY account_type;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE,\n    amount DECIMAL,\n    customer_id UUID,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    address TEXT\n);\n\nCREATE TABLE accounts (\n    account_id UUID PRIMARY KEY,\n    customer_id UUID,\n    account_type TEXT,\n    balance DECIMAL\n);\n\nCREATE TABLE alerts (\n    alert_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    alert_date TIMESTAMP,\n    alert_description TEXT\n);\n\nCREATE TABLE fraud_patterns (\n    pattern_id UUID PRIMARY KEY,\n    pattern_name TEXT,\n    pattern_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date = (SELECT MAX(transaction_date) FROM transactions);"
]